<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Add Databases to an Availability Group</title>
    <url>/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/</url>
    <content><![CDATA[<h1 id="add-databases-to-an-availability-group">Add Databases to an
Availability Group</h1>
<p>In the primary replica, restore the database.</p>
<figure>
<img
src="/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/image-20220608094437985.png"
alt="image-20220608094437985" />
<figcaption aria-hidden="true">image-20220608094437985</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/image-20220608095913496.png"
alt="image-20220608095913496" />
<figcaption aria-hidden="true">image-20220608095913496</figcaption>
</figure>
<p>Change the <code>Recovery Model</code> to <strong>Full</strong>.</p>
<figure>
<img
src="/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/image-20220608100229708.png"
alt="image-20220608100229708" />
<figcaption aria-hidden="true">image-20220608100229708</figcaption>
</figure>
<p>Run the script to make full backups and tlog backups.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--Full Backups</span><br>BACKUP DATABASE [WideWorldImporters] <span class="hljs-keyword">TO</span>  DISK <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.SQL1\MSSQL\Backup\WideWorldImporters_FullBackup_20220608.bak&#x27;</span> <br><span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,  <br>NAME <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;WideWorldImporters-Full Database Backup&#x27;</span>, <br><span class="hljs-keyword">SKIP</span>, NOREWIND, NOUNLOAD, COMPRESSION,  STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span>, CHECKSUM<br>GO<br><br><span class="hljs-comment">--Tlog Backups</span><br>BACKUP LOG [WideWorldImporters] <span class="hljs-keyword">TO</span>  DISK <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.SQL1\MSSQL\Backup\WideWorldImporters_TlogBackup_20220608.trn&#x27;</span> <br><span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,  <br>NAME <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;WideWorldImporters-Full Database Backup&#x27;</span>, <br><span class="hljs-keyword">SKIP</span>, NOREWIND, NOUNLOAD, COMPRESSION,  STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span>, CHECKSUM<br>GO<br></code></pre></td></tr></table></figure>
<p>In the <strong>Properties</strong> page of the AG, add the name of
the database, then click on <code>OK</code>, if there is no warning,
then we successfully added an additional database to the AG.</p>
<figure>
<img
src="/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/image-20220608100051919.png"
alt="image-20220608100051919" />
<figcaption aria-hidden="true">image-20220608100051919</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Add%20Database%20to%20an%20Availability%20Group/image-20220608100634388.png"
alt="image-20220608100634388" />
<figcaption aria-hidden="true">image-20220608100634388</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Change Vote Weight of WSFC Node Servers</title>
    <url>/2022/06/06/Change%20Vote%20Weight%20of%20WSFC%20Node%20Servers/</url>
    <content><![CDATA[<h1 id="change-vote-weight-of-wsfc-node-servers">Change Vote Weight of
WSFC Node Servers</h1>
<p>Currently, my node servers have the voting values as the
following.</p>
<figure>
<img
src="/2022/06/06/Change%20Vote%20Weight%20of%20WSFC%20Node%20Servers/image-20220606171346007.png"
alt="image-20220606171346007" />
<figcaption aria-hidden="true">image-20220606171346007</figcaption>
</figure>
<p>In <strong>Windows PowerShell</strong>, we can view the node servers
by <code>get-clusternode</code>.</p>
<figure>
<img
src="/2022/06/06/Change%20Vote%20Weight%20of%20WSFC%20Node%20Servers/image-20220606171619268.png"
alt="image-20220606171619268" />
<figcaption aria-hidden="true">image-20220606171619268</figcaption>
</figure>
<p>Then, to change the vote weight,</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># (get-clusternode NODE_NAME).nodeweight = VALUE</span><br>(<span class="hljs-built_in">get-clusternode</span> tjxiem406VM).nodeweight = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/06/Change%20Vote%20Weight%20of%20WSFC%20Node%20Servers/image-20220606172036812.png"
alt="image-20220606172036812" />
<figcaption aria-hidden="true">image-20220606172036812</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Build a Failover Cluster on VMAS</title>
    <url>/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/</url>
    <content><![CDATA[<h1 id="build-a-failover-cluster-on-vmas">Build a failover cluster on
VMAS</h1>
<h2 id="preparation">Preparation</h2>
<h3 id="configure-domain-controller">Configure Domain Controller</h3>
<p>In the <strong>Server Manager</strong> of the server that you want to
use as a Domain Controller, click on <strong>Add roles and
features</strong>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602103151680.png"
alt="image-20220602103151680" />
<figcaption aria-hidden="true">image-20220602103151680</figcaption>
</figure>
<p>Check <code>Active Directory Domain Services</code> and
<code>DNS Server</code> tabs and continue the installation.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602102333211.png"
alt="image-20220602102333211" />
<figcaption aria-hidden="true">image-20220602102333211</figcaption>
</figure>
<h3 id="configure-domain-settings">Configure Domain Settings</h3>
<p>For the node servers, <strong>Control Panel --&gt; System and
Security --&gt; System --&gt; Change settings --&gt; Change</strong>,
set the <code>Domain</code> as you created. You may need to reboot the
machine to make effects.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220607180631031.png"
alt="image-20220607180631031" />
<figcaption aria-hidden="true">image-20220607180631031</figcaption>
</figure>
<h3 id="configure-dns-settings">Configure DNS Settings</h3>
<p>For the node servers, change their DNS settings to the same as the
DC, <strong>Control Panel --&gt; Network and Internet --&gt; Network
Connections --&gt; Properties --&gt; Internet Protocol Version 4
(TCP/IPv4)</strong>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220607181311498.png"
alt="image-20220607181311498" />
<figcaption aria-hidden="true">image-20220607181311498</figcaption>
</figure>
<h2 id="add-the-failover-clustering-feature-to-nodes">Add the Failover
Clustering Feature to Nodes</h2>
<p>This should be done for all the servers that you want to join your
WSFC.</p>
<p>In the <strong>Server Manager</strong> of node servers, click
<strong>Add roles and features</strong>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602103139638.png"
alt="image-20220602103139638" />
<figcaption aria-hidden="true">image-20220602103139638</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602102912334.png"
alt="image-20220602102912334" />
<figcaption aria-hidden="true">image-20220602102912334</figcaption>
</figure>
<p>Check <code>Failover Clustering</code>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602104348148.png"
alt="image-20220602104348148" />
<figcaption aria-hidden="true">image-20220602104348148</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602103048935.png"
alt="image-20220602103048935" />
<figcaption aria-hidden="true">image-20220602103048935</figcaption>
</figure>
<h2 id="running-the-failover-cluster-validation-wizard">Running the
Failover Cluster Validation Wizard</h2>
<p>Before creating the cluster, it's better to validate first. This step
can be done on any of your node servers.</p>
<p><strong>Server Manager --&gt; Tools --&gt; Failover Cluster
Manager</strong></p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602105158375.png"
alt="image-20220602105158375" />
<figcaption aria-hidden="true">image-20220602105158375</figcaption>
</figure>
<p>Select <strong>Validate Configuration</strong></p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602105248004.png"
alt="image-20220602105248004" />
<figcaption aria-hidden="true">image-20220602105248004</figcaption>
</figure>
<p>In the <code>Select Servers or a Cluster</code> section, you may find
the <code>Selected Servers</code> list is empty. Click
<code>Browse</code> and search servers using their names.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602110339994.png"
alt="image-20220602110339994" />
<figcaption aria-hidden="true">image-20220602110339994</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602110303490.png"
alt="image-20220602110303490" />
<figcaption aria-hidden="true">image-20220602110303490</figcaption>
</figure>
<p>Run the test and see the test result.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602110507810.png"
alt="image-20220602110507810" />
<figcaption aria-hidden="true">image-20220602110507810</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602110705518.png"
alt="image-20220602110705518" />
<figcaption aria-hidden="true">image-20220602110705518</figcaption>
</figure>
<p>If all tests are successful, check the
<code>Create the cluster now using the validated nodes</code> to start
creating clusters.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220607174119603.png"
alt="image-20220607174119603" />
<figcaption aria-hidden="true">image-20220607174119603</figcaption>
</figure>
<h2 id="create-wsfc">Create WSFC</h2>
<p>If you checked the
<code>Create the cluster now using the validated nodes</code> box,
simply continue installing would successfully create a failover
cluster.</p>
<h3 id="configure-static-ip-address">Configure Static IP Address</h3>
<p>Double click on the cluster you've created, you will see the
following prompt, and check the <code>Static IP Address</code>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602121732074.png"
alt="image-20220602121732074" />
<figcaption aria-hidden="true">image-20220602121732074</figcaption>
</figure>
<h2 id="build-iscsi-virtual-disk">Build iSCSI Virtual Disk</h2>
<p>One DC as Disk Server.</p>
<p>Two node servers as clients.</p>
<h3 id="configure-disk-server">Configure Disk Server</h3>
<h4 id="install-iscsi-service">Install iSCSI service</h4>
<p>Again, in the <strong>Server Manager --&gt; Add Roles and
Features</strong>. Expand the <code>File and Storage Services</code> and
check boxes start with <code>iSCSI</code>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602123004600.png"
alt="image-20220602123004600" />
<figcaption aria-hidden="true">image-20220602123004600</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602123112170.png"
alt="image-20220602123112170" />
<figcaption aria-hidden="true">image-20220602123112170</figcaption>
</figure>
<h4 id="create-virtual-disk">Create virtual disk</h4>
<p>Click on <strong>TASKS</strong> and <strong>New iSCSI Virtual
Disk</strong>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602123606013.png"
alt="image-20220602123606013" />
<figcaption aria-hidden="true">image-20220602123606013</figcaption>
</figure>
<p>Either <code>Select by volume</code> or
<code>Type a custom path</code> works.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602123754160.png"
alt="image-20220602123754160" />
<figcaption aria-hidden="true">image-20220602123754160</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602123850625.png"
alt="image-20220602123850625" />
<figcaption aria-hidden="true">image-20220602123850625</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602124038768.png"
alt="image-20220602124038768" />
<figcaption aria-hidden="true">image-20220602124038768</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602124119537.png"
alt="image-20220602124119537" />
<figcaption aria-hidden="true">image-20220602124119537</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602124204011.png"
alt="image-20220602124204011" />
<figcaption aria-hidden="true">image-20220602124204011</figcaption>
</figure>
<p>Here I choose to query clients, as we did before in the creating
clusters section.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602124345269.png"
alt="image-20220602124345269" />
<figcaption aria-hidden="true">image-20220602124345269</figcaption>
</figure>
<p>Those are client servers that access the disk server.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602125418777.png"
alt="image-20220602125418777" />
<figcaption aria-hidden="true">image-20220602125418777</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602125735307.png"
alt="image-20220602125735307" />
<figcaption aria-hidden="true">image-20220602125735307</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602130013751.png"
alt="image-20220602130013751" />
<figcaption aria-hidden="true">image-20220602130013751</figcaption>
</figure>
<h4 id="configuration">Configuration</h4>
<p><strong>Server Manager --&gt; File and Storage Services --&gt; iSCSI
--&gt; iSCSI</strong></p>
<p>We can add initiators here.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602130314511.png"
alt="image-20220602130314511" />
<figcaption aria-hidden="true">image-20220602130314511</figcaption>
</figure>
<h3 id="configure-client-servers">Configure Client Servers</h3>
<p>For each client server, configure it as the following.</p>
<p>Double click to start the <code>iSCSI Initiator</code> service.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602132228794.png"
alt="image-20220602132228794" />
<figcaption aria-hidden="true">image-20220602132228794</figcaption>
</figure>
<p>Since my initiator for the disk server is an IQN connection, I need
to input the IP address here. Note that we can find the IP address of
the disk server by typing <code>ipconfig</code> in the command line.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602132943178.png"
alt="image-20220602132943178" />
<figcaption aria-hidden="true">image-20220602132943178</figcaption>
</figure>
<p>In the <code>Volumes and Devices</code>, click
<code>Auto Configure</code> to add the virtual disk to the volume
list.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602135943801.png"
alt="image-20220602135943801" />
<figcaption aria-hidden="true">image-20220602135943801</figcaption>
</figure>
<p>Now, we can bring the virtual disk online.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602133216522.png"
alt="image-20220602133216522" />
<figcaption aria-hidden="true">image-20220602133216522</figcaption>
</figure>
<p>In the <strong>Disk Management</strong>, we can check the status of
the virtual disk.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602133526450.png"
alt="image-20220602133526450" />
<figcaption aria-hidden="true">image-20220602133526450</figcaption>
</figure>
<p>Note that for both clients and disk servers, we need to turn the
startup type of iSCSI service to <code>auto</code>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602133916305.png"
alt="image-20220602133916305" />
<figcaption aria-hidden="true">image-20220602133916305</figcaption>
</figure>
<h3 id="add-virtual-disk-to-cluster">Add Virtual Disk to Cluster</h3>
<p>Go to the Disk Management on any node server, initialize and create a
new volume for the virtual disk.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602152433107.png"
alt="image-20220602152433107" />
<figcaption aria-hidden="true">image-20220602152433107</figcaption>
</figure>
<p>Then go to the <strong>Failover Cluster Manager</strong>, in the
<strong>Disk</strong> tab, <code>Add Disk</code>. Choose the virtual
disk created before. Then, in the active node server, we can find a new
volume in the file explorer. You can click
<code>Move Available Storage</code> to see whether the action
succeeded.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602151901691.png"
alt="image-20220602151901691" />
<figcaption aria-hidden="true">image-20220602151901691</figcaption>
</figure>
<h2 id="configure-the-cluster-quorum-settings">Configure the Cluster
Quorum Settings</h2>
<p>On the disk of the DC server, create a Witness file folder and share
it. Make sure to give permissions to your WSFC server.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606092732482.png"
alt="image-20220606092732482" />
<figcaption aria-hidden="true">image-20220606092732482</figcaption>
</figure>
<p>Right click on your cluster, <strong>More Actions --&gt; Configure
Cluster Quorum Settings</strong>. This can be done in any of your node
servers.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093158802.png"
alt="image-20220606093158802" />
<figcaption aria-hidden="true">image-20220606093158802</figcaption>
</figure>
<p>In the <code>Configure Cluster Quorum Wizard</code>,
<code>Advanced quorum configuration --&gt; All Nodes --&gt; Configure a file share witness --&gt; Select the path of your shared folder</code></p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093427113.png"
alt="image-20220606093427113" />
<figcaption aria-hidden="true">image-20220606093427113</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093544405.png"
alt="image-20220606093544405" />
<figcaption aria-hidden="true">image-20220606093544405</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093655628.png"
alt="image-20220606093655628" />
<figcaption aria-hidden="true">image-20220606093655628</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093810393.png"
alt="image-20220606093810393" />
<figcaption aria-hidden="true">image-20220606093810393</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606093833067.png"
alt="image-20220606093833067" />
<figcaption aria-hidden="true">image-20220606093833067</figcaption>
</figure>
<h2
id="install-a-sql-server-2019-failover-clustered-instance-fci">Install a
SQL Server 2019 Failover Clustered Instance (FCI)</h2>
<p>Download the SQL Server 2019 installation media on the two node
servers.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602164508936.png"
alt="image-20220602164508936" />
<figcaption aria-hidden="true">image-20220602164508936</figcaption>
</figure>
<h3 id="for-the-primary-node-server">For the primary node server</h3>
<p>Run the <strong>setup.exe</strong>,
<code>New SQL Server failover cluster installation</code> in the
<code>installation</code> tab.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606094314046.png"
alt="image-20220606094314046" />
<figcaption aria-hidden="true">image-20220606094314046</figcaption>
</figure>
<p>It will go through server checks.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602164925334.png"
alt="image-20220602164925334" />
<figcaption aria-hidden="true">image-20220602164925334</figcaption>
</figure>
<p>If you have successfully added the virtual disk to the cluster, your
virtual disks will be shown here.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602165504291.png"
alt="image-20220602165504291" />
<figcaption aria-hidden="true">image-20220602165504291</figcaption>
</figure>
<p>Create an IP Address that is different from all IP addresses of your
servers and the cluster.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602165656261.png"
alt="image-20220602165656261" />
<figcaption aria-hidden="true">image-20220602165656261</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602165816089.png"
alt="image-20220602165816089" />
<figcaption aria-hidden="true">image-20220602165816089</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602165914386.png"
alt="image-20220602165914386" />
<figcaption aria-hidden="true">image-20220602165914386</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602165926475.png"
alt="image-20220602165926475" />
<figcaption aria-hidden="true">image-20220602165926475</figcaption>
</figure>
<h3 id="for-the-secondary-node-server">For the secondary node
server</h3>
<p>Run the <strong>setup.exe</strong>,
<code>Add node to a SQL Server failover cluster</code> in the
<code>installation</code> tab.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602174455520.png"
alt="image-20220602174455520" />
<figcaption aria-hidden="true">image-20220602174455520</figcaption>
</figure>
<p>Follow similar steps to add a node to the failover cluster.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220602174957642.png"
alt="image-20220602174957642" />
<figcaption aria-hidden="true">image-20220602174957642</figcaption>
</figure>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220606102320690.png"
alt="image-20220606102320690" />
<figcaption aria-hidden="true">image-20220606102320690</figcaption>
</figure>
<h2 id="testing-failover">Testing Failover</h2>
<p>In the <strong>Failover Cluster Manager</strong>, find the cluster,
<strong>Simulate Failure</strong>.</p>
<figure>
<img
src="/2022/06/07/Build%20a%20failover%20cluster%20on%20VMAS/image-20220607174939143.png"
alt="image-20220607174939143" />
<figcaption aria-hidden="true">image-20220607174939143</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Data Visualization Project-Development of Models Used in Computer Vision</title>
    <url>/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/</url>
    <content><![CDATA[<h1 id="development-of-models-used-in-computer-vision">Development of
Models Used in Computer Vision</h1>
<p>Jiacheng Xie, Haowen Ji, Dunhan Jiang</p>
<p>Oct-20th-2022</p>
<p><a href="https://dashvisproject.herokuapp.com/demo">Interactive
Online Demo</a></p>
<p><a href="https://github.com/jason5306/dash-vis-app">Source Code On
Github</a></p>
<h2 id="introduction">Introduction</h2>
<p>As computational power and the amount of data accumulated during the
past decade, deep learning models became the state-of-art approach in
the field of computer vision in hope of improving visual task detection
accuracy and reducing processing runtime. The development of deep
learning models branched, and a lot of new models based on completely
different architects arose. This paper thus investigates the adaptation
and transformation of those mainstream models as an epitome of the
development of the larger computer vision field. We confine our subject
of interests to only GoogleNet, SeNet, VGG, AlexNet, LeNet, and ResNet.
We download publication information of academic papers on these models
from the <em>Web of Science</em> as a holistic dataset for this
meta-analysis. This paper specifically focuses on the research area,
citation number, citation relationship, research keywords, as well as
publication geographical distribution properties as our guiding research
questions.</p>
<p>To thoroughly investigate these topics and properly demonstrate the
result, visualization techniques are of crucial significance to display
paper’s attribution proportional wise, to capture the dynamic trends in
citation amount temporal fluctuation, to unfold the messy and complex
citation relationship between papers, to extract the constantly changing
focus of ongoing research, and to map the regional publication
distribution across the spatial dimension. With this knowledge
visualized interactively, it would be much easier to understand the
development of models used in the field of computer vision.</p>
<h2 id="method">Method</h2>
<p>We collect our data set from the <em>Web of Science</em>. Using the
website’s search engine with filters that only return papers on our
confined six mainstream models, we download publication information of
these papers as excel sheets. This information includes article title,
the name of journal, author(s), publication time, author’s attributed
institution’s location, paper keywords and categories, application
areas. Other information including paper’s citation list and reference
list are obtained using a python script crawler. We use python code to
build a pandas data frame to import the dataset. Since it contains a
large amount of approximately 17,000 entries of holistic papers’
publication information, we can just eliminate those entries with
missing values.</p>
<p>With the raw dataset cleaned, we group all papers into six groups
based on their fields of models. We combine all citation list and
reference list in our dataset to record all papers’ relationship. We do
text extraction to find paper keywords and application areas. We also do
data matching to find the paper author’s attributed institution’s
location on the actual world map to generate the publication
geographical distributional map. With the above analysis ready, we use
python visualization tools to generate the below interactive figures.
Specifically, visualization 1 and 2 use <em>plotly</em> while
visualization 3, 5, and 6 use <em>pyecharts</em>. Visualization 4 uses
<em>PyVis</em> and <em>Networkx</em> instead.</p>
<h2 id="results">Results</h2>
<p>Figure 1 aims to show the evolution of research area and keywords. It
is a parallel categories graph connecting models, publication year, and
research area. We make it interactively so that selecting any section
gives it and its connected part a highlighted color. The number of
papers in that section will also appear in the hint box. Each bar in
this plot can be dragged to any position.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.39.31-6702820.png"
alt="Figure 1: models, publication time, and research areas connection" />
<figcaption aria-hidden="true">Figure 1: models, publication time, and
research areas connection</figcaption>
</figure>
<p>Figure 2 aims to demonstrate papers’ amount of citation over time.
It’s a time river plot demonstrating the timelines of the citation
number of selected published paper. One can choose a specific period at
the bottom bar section to zoom into the graph and have a clearer view.
Users can also filter models on the top right.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.40.05-6702830.png"
alt="Figure 2: citation times of papers regarding different models across time" />
<figcaption aria-hidden="true">Figure 2: citation times of papers
regarding different models across time</figcaption>
</figure>
<p>Figure 3 aims to show the citation relationship between papers. It’s
a circular network graph. All papers are categorized into their own
model's field and labeled with different colors on the top legend bar.
On the circle there are nodes representing individual papers while edges
in between represent citation relationship. The edge will have the same
color with the source paper node. And the bigger the node, the larger
its citation number. Users can hover the mouse over either edges or
nodes for a highlighted view and more detail information of paper names
and citation number. One can also zoom in and filter different models on
top.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.40.45-6702844.png"
alt="Figure 3: circular layout of citation and reference space" />
<figcaption aria-hidden="true">Figure 3: circular layout of citation and
reference space</figcaption>
</figure>
<p>Figure 4 also aims to show the citation relationship between papers.
It’s a linked network graph also with nodes representing papers and
edges representing citation relationship. While it’s difficult to target
a specific paper in the last circular network visualization, users can
hereby filter paper(s) and edge(s) in the top rows by entering paper
names and edge properties like citation number. Therefore, only part of
the sophisticated network will be displayed. Users can also hover mouse
over or click or drag the node to investigate the cite space
interactively. The visualization is also dynamic and supports zoom in
function.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.41.22-6702850.png"
alt="Figure 4: linked-node-network of citation and reference space" />
<figcaption aria-hidden="true">Figure 4: linked-node-network of citation
and reference space</figcaption>
</figure>
<p>Figure 5 aims to capture the dynamic of changes in models’
application area. It’s a dynamic word cloud concatenating the most
frequently appeared keywords of papers. Users can click start button for
an automatic display. Alternatively, selecting different years in the
timeline or filtering different models help users have a closer view at
the keywords under distinct setting. Left corner buttons also enable
users to select keywords with different occurrence frequency.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.42.10-6702856.png"
alt="Figure 5: transitional keyword clouds" />
<figcaption aria-hidden="true">Figure 5: transitional keyword
clouds</figcaption>
</figure>
<p>Figure 6 aims to map the regional publication distribution across the
spatial dimension. It’s a geographical map view with colored nodes on
top representing the number of publications at that location. Darker
color means more publications and vice versa. Users can zoom in to see
the publication distribution in each country and province. Publication
number appears when the mouse hover over the node. The bar at the left
bottom corner enables users to filter the number range. This map also
provides a heatmap view with similar interactions.</p>
<figure>
<img
src="/2022/10/25/Data%20Visualization%20Project-Development%20of%20Models%20Used%20in%20Computer%20Vision/Screen%20Shot%202022-10-25%20at%2020.42.40-6702862.png"
alt="Figure 6: regional distribution of publications around the globe" />
<figcaption aria-hidden="true">Figure 6: regional distribution of
publications around the globe</figcaption>
</figure>
<h2 id="discussions">Discussions</h2>
<p>In figure 1, user tasks are to retrieve value and characterize
distribution. It links three attributes of publication information
effectively, with section proportion highlighted and paper number shown.
Its interaction functions smoothly. However, too many connecting links
make it a little bit messy to see. One solution is to let those
non-highlighted links fade away for a more concentrated view.</p>
<p>In figure 2, user tasks are to sort and find extremum. Model
filtering and zooming in interactions are helpful for efficiently
capturing detailed citation changing trends. Since there are limited
research going on before 2014, it should take another decade for us to
picture a more nuanced development trend.</p>
<p>In figure 3, user tasks are to retrieve value and sort. Its model
filters and mouse hover and click interactions make it efficient to see
the citation relationship. The circular layout design also makes the
cite space less messy. However, it’s literally impossible to find a
specific target paper. Figure 4 solves this dilemma by adding a filter
and selection function to effectively search for target papers with
specific properties. Its user tasks are to find anomalies and retrieve
value. But the network design is indeed messier than that in figure 3.
These two figures compensate each other’s weakness and effectively
demonstrate the citation space together.</p>
<p>In figure 5, user task is to retrieve value. Thanks to its automatic
showcase and abundant filters, users can efficiently capture keywords of
specific field at any given time. But the meaning behind the keyword
cloud does need further interpretation.</p>
<p>In figure 6, user task is to characterize distribution. The color hue
makes it efficient to compare the publication number. Potential room for
improvement is papers’ location accuracy. Downloading a more accurate
map with city and town names really help.</p>
<h2 id="conclusions">Conclusions</h2>
<p>This paper gives an efficient solution to understand the research
area, citation number, citation and reference relationship, research
keywords, as well as publication geographical distribution of papers in
the field of computer vision. These knowledge help people better and
easier understand the structure and developmental trends of this field
intuitively. Specifically, scholars may want to focus on popular
keywords of latest publications from our keyword cloud. Researchers may
also want to find the most influential foundational papers by the
cite-space-visualization. Furthermore, our highly interactive online
dash version also helps spread and popularize such knowledge to people
new or outside to computer vision.</p>
<p>In the future, we can link all figures on one map to generate a
well-rounded and even more interactive view of the current results. We
can also incorporate more papers from other sub-areas of computer vision
to conduct similar visualizations and combine with these existing works
to generate a more holistic updated version.</p>
<p><a
href="https://github.com/jason5306/dash-vis-app/blob/main/assets/report.pdf">Original
Report PDF</a></p>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>Data Visualization</tag>
        <tag>Dash</tag>
        <tag>Plotly</tag>
      </tags>
  </entry>
  <entry>
    <title>Freeze SQL service manually using WinDbg</title>
    <url>/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/</url>
    <content><![CDATA[<h1 id="freeze-sql-service-manually-using-windbg">Freeze SQL service
manually using WinDbg</h1>
<p>Currently, the SQL failover cluster works normally.</p>
<figure>
<img
src="/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/image-20220606132830651.png"
alt="image-20220606132830651" />
<figcaption aria-hidden="true">image-20220606132830651</figcaption>
</figure>
<p>In the SSMS (Microsoft SQL Server Management Studio), the following
query returns the process id and other information related to the SQL
server service.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Thread ID</span><br><span class="hljs-keyword">SELECT</span> kpid,<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.sysprocesses <span class="hljs-keyword">where</span> program_name  <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;Microsoft® Windows® Operating System%&#x27;</span><br><span class="hljs-comment">-- Prrocess ID</span><br><span class="hljs-keyword">SELECT</span> process_id,<span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.dm_server_services <span class="hljs-keyword">WHERE</span> servicename <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL Server (MSSQLSERVER)&#x27;</span><br></code></pre></td></tr></table></figure>
<p>Note that the thread ID here is the id for the system, we need to
convert the id before using it.</p>
<figure>
<img
src="/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/image-20220606164943627.png"
alt="image-20220606164943627" />
<figcaption aria-hidden="true">image-20220606164943627</figcaption>
</figure>
<p>In <strong>WinDbg</strong>, attach to the <code>sqlserver.exe</code>
process. As you can see, the process id is the same as the query result.
Note that make sure the WinDbg is running on the node server that is the
current host of the cluster, or you may not find the
<code>sqlserver.exe</code> in the list.</p>
<figure>
<img
src="/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/image-20220606165000885.png"
alt="image-20220606165000885" />
<figcaption aria-hidden="true">image-20220606165000885</figcaption>
</figure>
<p>Convert the thread ID into hexadecimal, then enter
<code>~~[HEX Thread ID]</code> to get the thread ID (debug ID) in the
debugger. Then we can freeze the SQL service by
<code>~Debug ID f</code>.</p>
<figure>
<img
src="/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/image-20220606165508820.png"
alt="image-20220606165508820" />
<figcaption aria-hidden="true">image-20220606165508820</figcaption>
</figure>
<p>Now, we observe that the SQL service is frozen.</p>
<figure>
<img
src="/2022/06/06/Freeze%20SQL%20service%20manually%20using%20WinDbg/image-20220606170306322.png"
alt="image-20220606170306322" />
<figcaption aria-hidden="true">image-20220606170306322</figcaption>
</figure>
<p>To resume the service, detach the process from the debugger. Then the
SQL server will be brought online.</p>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>WinDbg</tag>
      </tags>
  </entry>
  <entry>
    <title>Install Always On 2019 For Failover Clusters</title>
    <url>/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/</url>
    <content><![CDATA[<h1 id="install-always-on-2019-for-failover-clusters">Install Always On
2019 For Failover Clusters</h1>
<h2 id="configure-sql-server">Configure SQL Server</h2>
<p>On each of the node servers (replica), turn on <strong>SQL Server
Configuration Manager</strong>, <strong>SQL Server Services --&gt; SQL
Server (MSSQLSERVER) --&gt; Properties --&gt; Always on Availability
Groups --&gt; Enable Always on Availability Groups</strong>.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607094155497.png"
alt="image-20220607094155497" />
<figcaption aria-hidden="true">image-20220607094155497</figcaption>
</figure>
<p>Then we install a stand-alone SQL service for the two node servers
(replica).</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607113534697.png"
alt="image-20220607113534697" />
<figcaption aria-hidden="true">image-20220607113534697</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607113818112.png"
alt="image-20220607113818112" />
<figcaption aria-hidden="true">image-20220607113818112</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607114135531.png"
alt="image-20220607114135531" />
<figcaption aria-hidden="true">image-20220607114135531</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607114435948.png"
alt="image-20220607114435948" />
<figcaption aria-hidden="true">image-20220607114435948</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607114540380.png"
alt="image-20220607114540380" />
<figcaption aria-hidden="true">image-20220607114540380</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607114626758.png"
alt="image-20220607114626758" />
<figcaption aria-hidden="true">image-20220607114626758</figcaption>
</figure>
<p>Also, we need to enable <strong>Always on Availability
Groups</strong> service as we did before for the two stand-alone SQL
services.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607132532145.png"
alt="image-20220607132532145" />
<figcaption aria-hidden="true">image-20220607132532145</figcaption>
</figure>
<p>Moreover, for the secondary replica, we need to make sure its local
SQL service can be connected to the primary replica. In the <strong>SQL
Server Configuration Manager</strong> of the secondary replica,
<strong>SQL Server Network Configuration --&gt; Protocols for SQL2
</strong>, enable <code>Named Pipes</code> and <code>TCP/IP</code>.</p>
<p>You need to restart the servers to make all the changes.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607151315019.png"
alt="image-20220607151315019" />
<figcaption aria-hidden="true">image-20220607151315019</figcaption>
</figure>
<h2 id="restore-and-backup-databases">Restore and Backup Databases</h2>
<p>If you have databases that need to be added to the AG, make sure that
they are in <strong>Full Recovery Mode</strong> and remove these
databases from any <strong>tlog backup maintenance</strong>. Here I need
to restore and back up <code>AdventureWorks2019</code> database.</p>
<p>Restore the database on the primary replica, SQL 1.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607151437088.png"
alt="image-20220607151437088" />
<figcaption aria-hidden="true">image-20220607151437088</figcaption>
</figure>
<p>Change the <code>Recovery Model</code> to <code>Full</code>.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607103723163.png"
alt="image-20220607103723163" />
<figcaption aria-hidden="true">image-20220607103723163</figcaption>
</figure>
<p>Take Full and tlog backups of all databases before adding them to
AG.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--Full Backups</span><br>BACKUP DATABASE [AdventureWorks2019] <span class="hljs-keyword">TO</span>  DISK <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.SQL1\MSSQL\Backup\AdventureWorks2019_FullBackup_20220607.bak&#x27;</span> <br><span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,  <br>NAME <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;AdventureWorks2019-Full Database Backup&#x27;</span>, <br><span class="hljs-keyword">SKIP</span>, NOREWIND, NOUNLOAD, COMPRESSION,  STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span>, CHECKSUM<br>GO<br><br><span class="hljs-comment">--Tlog Backups</span><br>BACKUP LOG [AdventureWorks2019] <span class="hljs-keyword">TO</span>  DISK <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.SQL1\MSSQL\Backup\Adventureworks2019_TlogBackup_20220607.trn&#x27;</span> <br><span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,  <br>NAME <span class="hljs-operator">=</span> N<span class="hljs-string">&#x27;AdventureWorks2019-Full Database Backup&#x27;</span>, <br><span class="hljs-keyword">SKIP</span>, NOREWIND, NOUNLOAD, COMPRESSION,  STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span>, CHECKSUM<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607140009216.png"
alt="image-20220607140009216" />
<figcaption aria-hidden="true">image-20220607140009216</figcaption>
</figure>
<h2 id="install-always-on">Install Always On</h2>
<p>Connect to your primary replica, and start the <strong>New
Availability Group Wizard</strong>.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607142521671.png"
alt="image-20220607142521671" />
<figcaption aria-hidden="true">image-20220607142521671</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607101944506.png"
alt="image-20220607101944506" />
<figcaption aria-hidden="true">image-20220607101944506</figcaption>
</figure>
<p>If the <code>status</code> of the database is not
<code>Meets prerequisites</code>, check detailed information.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607104426006.png"
alt="image-20220607104426006" />
<figcaption aria-hidden="true">image-20220607104426006</figcaption>
</figure>
<p>Add secondary replica.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607140235168.png"
alt="image-20220607140235168" />
<figcaption aria-hidden="true">image-20220607140235168</figcaption>
</figure>
<p>In the <code>Endpoints</code> tab, to avoid the following warning, we
need to set the <code>SQL Server Service Account</code> to the domain
account instead of the local server service account. Note that the
<code>Port Number</code> should be <strong>5022</strong></p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607141252469.png"
alt="image-20220607141252469" />
<figcaption aria-hidden="true">image-20220607141252469</figcaption>
</figure>
<p>In the <strong>SQL Service Configuration Manager</strong> of both
node servers, change the account name into the <strong>domain
account</strong> as the following.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607141542135.png"
alt="image-20220607141542135" />
<figcaption aria-hidden="true">image-20220607141542135</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607141623518-16545825841621-16545825852083.png"
alt="image-20220607141623518" />
<figcaption aria-hidden="true">image-20220607141623518</figcaption>
</figure>
<p>Now, back to the wizard, refresh the page, and the account is
successfully changed.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607141929009.png"
alt="image-20220607141929009" />
<figcaption aria-hidden="true">image-20220607141929009</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607142141848.png"
alt="image-20220607142141848" />
<figcaption aria-hidden="true">image-20220607142141848</figcaption>
</figure>
<p>Note that the <code>Port</code> should be <strong>1433</strong> and
the <code>IP Address</code> should be an unused IP Address on the
network.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607142110076.png"
alt="image-20220607142110076" />
<figcaption aria-hidden="true">image-20220607142110076</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607142223919.png"
alt="image-20220607142223919" />
<figcaption aria-hidden="true">image-20220607142223919</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607142235554-16545829607005.png"
alt="image-20220607142235554" />
<figcaption aria-hidden="true">image-20220607142235554</figcaption>
</figure>
<p>If successfully installed, we can find an AG listener in the
<strong>Failover Cluster Manager</strong>.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607143200288.png"
alt="image-20220607143200288" />
<figcaption aria-hidden="true">image-20220607143200288</figcaption>
</figure>
<h2 id="configure-read-only-route">Configure Read-Only Route</h2>
<h3 id="configuration">Configuration</h3>
<p>In the <strong>Object Explorer</strong>, open the
<strong>Properties</strong> of the AG. Change
<code>Readable Secondary</code> in <strong>Availability
Replicas</strong> to <code>Read-intent Only</code>.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607154139066.png"
alt="image-20220607154139066" />
<figcaption aria-hidden="true">image-20220607154139066</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220607161723678.png"
alt="image-20220607161723678" />
<figcaption aria-hidden="true">image-20220607161723678</figcaption>
</figure>
<p>For the two stand-alone SQL servers, in the <strong>SQL Server
Configuration Manager</strong>, <strong>Protocols for SQL 1 --&gt;
TCP/IP --&gt; Properties --&gt; IP Addresses --&gt; TPC Dynamic
Ports</strong>, change the port to an unused one for both services. This
step ensures we can find the servers using a Read-only routing URL with
the same port.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608093558782.png"
alt="image-20220608093558782" />
<figcaption aria-hidden="true">image-20220608093558782</figcaption>
</figure>
<p>Fill in the <code>Read-Only Routing URL</code> with
<code>TCP://ComputerName.domain:port</code>. The <code>port</code> here
should be the number set in the previous step. Then, click on the first
instance, there will be two available replicas shown, add SQL2 and then
add SQL1. Then, click on the second instance, there will also be two
available replicas shown, add SQL1 and then add SQL2.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608101300076.png"
alt="image-20220608101300076" />
<figcaption aria-hidden="true">image-20220608101300076</figcaption>
</figure>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608101311244.png"
alt="image-20220608101311244" />
<figcaption aria-hidden="true">image-20220608101311244</figcaption>
</figure>
<p>Or, simply run the script.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">USE [master]<br> GO<br> <span class="hljs-keyword">ALTER</span> AVAILABILITY <span class="hljs-keyword">GROUP</span> [jiachengAG]<br> MODIFY REPLICA <span class="hljs-keyword">ON</span> N<span class="hljs-string">&#x27;TJXIEM405VM\SQL1&#x27;</span> <span class="hljs-keyword">WITH</span> (PRIMARY_ROLE(READ_ONLY_ROUTING_LIST <span class="hljs-operator">=</span> (N<span class="hljs-string">&#x27;TJXIEM406VM\SQL2&#x27;</span>,N<span class="hljs-string">&#x27;TJXIEM405VM\SQL1&#x27;</span>)))<br> GO<br> USE [master]<br> GO<br> <span class="hljs-keyword">ALTER</span> AVAILABILITY <span class="hljs-keyword">GROUP</span> [jiachengAG]<br> MODIFY REPLICA <span class="hljs-keyword">ON</span> N<span class="hljs-string">&#x27;TJXIEM406VM\SQL2&#x27;</span> <span class="hljs-keyword">WITH</span> (PRIMARY_ROLE(READ_ONLY_ROUTING_LIST <span class="hljs-operator">=</span> (N<span class="hljs-string">&#x27;TJXIEM405VM\SQL1&#x27;</span>,N<span class="hljs-string">&#x27;TJXIEM406VM\SQL2&#x27;</span>)))<br> GO<br></code></pre></td></tr></table></figure>
<h3 id="test">Test</h3>
<p>Connect the AG listener. Click <strong>Options</strong> to configure
the connection.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608093733764.png"
alt="image-20220608093733764" />
<figcaption aria-hidden="true">image-20220608093733764</figcaption>
</figure>
<p>Note that the connected database needs to be specified in
<code>Connection Properties</code></p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608093829901.png"
alt="image-20220608093829901" />
<figcaption aria-hidden="true">image-20220608093829901</figcaption>
</figure>
<p>Also, add <code>ApplicationIntent=ReadOnly</code> as connection
strings to enable Read-only routing.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608093924655.png"
alt="image-20220608093924655" />
<figcaption aria-hidden="true">image-20220608093924655</figcaption>
</figure>
<p>New a query, run the script, the Read-only routing works as I am
working in the primary replica while it routes read-only connections to
the secondary replica.</p>
<figure>
<img
src="/2022/06/08/Install%20AlwaysOn%202019%20For%20Failover%20Clusters/image-20220608094019762.png"
alt="image-20220608094019762" />
<figcaption aria-hidden="true">image-20220608094019762</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyinstaller Reduce Packed Program Size</title>
    <url>/2022/08/16/Pyinstaller%20Reduce%20Packed%20Program%20Size/</url>
    <content><![CDATA[<h1 id="pyinstaller-reduce-packed-program-size">Pyinstaller Reduce
Packed Program Size</h1>
<p>When I was packing <code>Xevent Reader</code> with
<code>pyinstaller</code>, I created a new conda virtual environment and
installed the necessary python packages. However, the size of the packed
program is very large, 200MB+, and runs very slow. This problem is
solved by using <code>pipenv</code> virtual environment.</p>
<h2 id="install-pipenv">Install pipenv</h2>
<p>Working environment: Anaconda Prompt</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pipenv<br></code></pre></td></tr></table></figure>
<p>Create a new folder for the virtual environment.</p>
<h2 id="setup-virtual-environment">Setup virtual environment</h2>
<p>Get into the folder created.</p>
<figure class="highlight dos"><table><tr><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">cd</span> &lt;<span class="hljs-built_in">Path</span> of your folder&gt;<br></code></pre></td></tr></table></figure>
<p>Setup the virtual environment.</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><code class="hljs cmake">pipenv <span class="hljs-keyword">install</span><br></code></pre></td></tr></table></figure>
<p>Activate the virtual environment.</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><code class="hljs dockerfile">pipenv <span class="hljs-keyword">shell</span><br></code></pre></td></tr></table></figure>
<h2 id="packing">Packing</h2>
<p>Install necessary packages for your program, including
<code>pyinstaller</code></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><code class="hljs gams"><span class="hljs-function"><span class="hljs-title">pip</span></span> install pyinstaller, ...<br></code></pre></td></tr></table></figure>
<p>You can try to run your python script first to test if it runs
correctly under this environment.</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">python</span> &lt;YourScript.<span class="hljs-keyword">py</span>&gt;<br></code></pre></td></tr></table></figure>
<p>Download <a href="https://upx.github.io/">UPX</a> to help further
reduce file size and avoid triggering security warnings when running the
program on other machines. Copy <code>upx.exe</code> to the location of
your script.</p>
<p>Packing. Make sure <code>INFO: UPX is available</code> is prompted in
the cmd window.</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><code class="hljs xml">pyinstaller -F <span class="hljs-tag">&lt;<span class="hljs-name">YourScript.py</span>&gt;</span><br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 Internal Note_Logging and recovery</title>
    <url>/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/</url>
    <content><![CDATA[<h1 id="sql-server-2012-internal-note_logging-and-recovery">SQL Server
2012 Internal Note_Logging and recovery</h1>
<h2 id="transaction-log-internals">Transaction log internals</h2>
<ol type="1">
<li><p>The transaction log</p>
<ol type="1">
<li><p>records changes made to the database and stores enough
information to allow SQL Server to recover the database</p></li>
<li><p>Physically, the transaction log is one or more files associated
with a database at the time the database is created or altered.</p></li>
<li><p>Each log record is labeled with a unique log sequence number
(LSN)</p></li>
<li><p>Transaction log is written before the changes to the database are
written (Buffer Manager)</p>
<ol type="1">
<li><p>Every time a page is changed, the LSN corresponding to the log
entry for that change is written into the header of the data page</p>
<p>Log records for a transaction are written to disk before the commit
acknowledgement is sent to the client process</p></li>
</ol></li>
</ol></li>
<li><p>Recovery is the process of reconciling the data files and the
log.</p></li>
<li><p>A restart recovery runs every time SQL Server is started</p>
<ol type="1">
<li>The process runs on each database because each database has its own
transaction log.</li>
</ol></li>
<li><p>A restore recovery (or media recovery), is run by request when a
restore operation is executed</p></li>
</ol>
<h3 id="phases-of-recovery">Phases of recovery</h3>
<p>During recovery, only changes that occurred or were in progress since
the last checkpoint are evaluated to determine whether they need to be
redone or undone</p>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220719155358320.png"
alt="The three phases of the SQL Server recovery process" />
<figcaption aria-hidden="true">The three phases of the SQL Server
recovery process</figcaption>
</figure>
<p><u>Phase 1: Analysis</u></p>
<ol type="1">
<li>Starting at the last checkpoint record in the transaction log</li>
<li>Constructs a dirty page table (DPT) consisting of pages that might
have been dirty at the time SQL Server stopped</li>
<li>Build an active transaction table that consists of uncommitted
transactions at the time SQL Server stopped</li>
</ol>
<p><u>Phase 2: Redo</u></p>
<ol type="1">
<li>This phase returns the database to the state it was in at the time
the SQL Server service stopped</li>
<li>If the SQL Server service stops after a transaction commits but
before the data is written out to the data pages, when SQL Server starts
and runs recovery, the transaction must be rolled forward</li>
</ol>
<p><u>Phase 3: Undo</u></p>
<ol type="1">
<li>It rolls each of these active transactions back individually.</li>
<li>Any uncommitted transaction at the time SQL Server stopped is undone
so that the database reflects none of the changes</li>
</ol>
<p>SQL Server uses multiple threads to process the recovery operations
on the different data bases simultaneously.</p>
<h3 id="page-lsns-and-recovery">Page LSNs and recovery</h3>
<p>Every database page has an LSN in the page header that reflects the
location in the transaction log of the last log entry that modified a
row on that page</p>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220720103706785.png"
alt="Comparing LSNs to decide whether to process the log entry during recovery" />
<figcaption aria-hidden="true">Comparing LSNs to decide whether to
process the log entry during recovery</figcaption>
</figure>
<p>A transaction log can’t be truncated before the point of the earliest
transaction that’s still open</p>
<p>If a transaction remains open, the log must be preserved because it’s
still not clear whether the transaction is done or ever will be done</p>
<h3 id="log-reading">Log reading</h3>
<p>The transaction log enables SQL Server to guarantee recoverability in
case of statement or system failure and to allow a system administrator
to take backups of the changes to a SQL Server database</p>
<h3 id="the-log-cache">The log cache</h3>
<p><u>SQL Server caches log records before they are physically
written</u></p>
<ol type="1">
<li>The log cache contains up to 128 entries on 64-bit systems or 32
entries on 32-bit systems</li>
<li>Each entry can maintain a buffer to store the log records before
they get written to disk as a single block (from 512 bytes to 60
KB)</li>
<li>As the log buffers are written to disk, SQL Server can reuse the
buffer</li>
</ol>
<p><u>Log pool</u></p>
<ol type="1">
<li>The log pool is a hash table hashed on the block ID and the database
ID</li>
<li>The log pool allows SQL Server to access sets of log records needed
for different technologies that need access to the log</li>
</ol>
<h2 id="changes-in-log-size">Changes in log size</h2>
<p>SQL Server always treats the log as one contiguous stream</p>
<h3 id="understanding-virtual-log-files">Understanding virtual log
files</h3>
<p>The transaction log for any database is managed as a set of virtual
log files (VLFs) whose size is determined internally by SQL Server based
on the total size of all log files and the growth increment used when
enlarging the log.</p>
<p>A log always grows in units of entire VLFs and can be shrunk only to
a VLF boundary</p>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220720151742031.png"
alt="Multiple VLFs that make up a physical log file" />
<figcaption aria-hidden="true">Multiple VLFs that make up a physical log
file</figcaption>
</figure>
<p><u>A VLF can be in one of four states</u></p>
<p><strong>Active</strong></p>
<p>The active portion of the log begins at the minimum LSN representing
an active transaction. The active portion of the log ends at the last
LSN written.</p>
<p><strong>Recoverable</strong></p>
<p>The portion of the log preceding the oldest active transaction is
needed only to maintain a sequence of log backups for restoring the
database to a former state</p>
<p><strong>Reusable</strong></p>
<p>If transaction log backups aren’t being maintained or you’ve already
backed up the log, VLFs before the oldest active transaction aren’t
needed and can be reused. Truncating or backing up the transaction log
changes recoverable VLFs into reusable VLFs.</p>
<p><strong>Unused</strong></p>
<p>One or more VLFs at the physical end of the log files might not have
been used yet if not enough logged activity has taken place</p>
<h3 id="observing-virtual-log-files">Observing virtual log files</h3>
<p><code>DBCC LOGINFO</code> to observe the key properties of virtual
log files.</p>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220720162036037.png"
alt="Viewing VLFs" />
<figcaption aria-hidden="true">Viewing VLFs</figcaption>
</figure>
<p><code>FileId</code>: indicates which of the log’s physical files
contains the VLF</p>
<p><code>FileSize</code> <code>StartOffset</code>in bytes</p>
<p><code>FSeqNo</code>: the use order (logical order), the FSeqNo values
don’t start at 0 or 1</p>
<p><code>Status</code>: indicates whether the VLF is reusable. 2: either
active or recoverable, 0: reusable or completely unused</p>
<p><code>CreateLSN</code>: lists the current LSN value at the time the
VLF was added to the transaction log, 0 means that the VLF was part of
the original log file created when the database was created</p>
<p>The first physical page of a log file contains header information,
not log records, so the VLF is considered to start on the second
page</p>
<p>If all the VLFs in the log have a status of 2, SQL Server needs to
add new VLFs to the log to record new transaction activity.</p>
<p>Try to keep your VLFs less than 1 GB in size; try to keep the number
of VLFs to no more than a few hundred, with possibly 1,000 as an upper
limit.</p>
<h3 id="using-multiple-log-files">Using multiple log files</h3>
<p>All VLFs in one physical file are used before any VLFs in the second
file are used.</p>
<p>If none of the VLFs in multiple physical log files is available for
reuse when a new VLF is needed, SQL Server adds new VLFs to each
physical log file in round-robin fashion</p>
<h3
id="understanding-automatic-truncation-of-virtual-log-files">Understanding
automatic truncation of virtual log files</h3>
<p>SQL Server assumes that you’re not maintaining a sequence of log
backups if any of the following is true (in autotruncate mode):</p>
<ol type="1">
<li>You have configured the database to truncate the log regularly by
setting the recovery model to SIMPLE.</li>
<li>You have never taken a full database backup</li>
<li>You haven’t taken a full database backup since switching the
database to FULL or BULK_ LOGGED recovery model from SIMPLE recovery
model.</li>
</ol>
<p><code>sys.database_recovery_status</code> column
<code>last_log_backup_lsn</code>, if <code>null</code>, then in
autotruncate mode.</p>
<p><u>Autotruncate mode</u></p>
<p>SQL Server truncates the database’s transaction log every time it
gets “full enough”</p>
<p>“Full enough” means that more log records exist than can be redone in
a reasonable amount of time during system startup—the recovery
interval</p>
<p>Truncation: all log records prior to the oldest active transaction
are invalidated and all VLFs not containing any part of the active log
are marked as reusable.</p>
<p><u>The checkpoint process</u></p>
<p>The thread checks the database and then truncates the inactive
portion of the log.</p>
<p>If the log is regularly truncated, SQL Server can reuse space in the
physical file by cycling back to an earlier VLF when it reaches the end
of the physical log file.</p>
<h3 id="maintaining-a-recoverable-log">Maintaining a recoverable
log</h3>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220721120550290.png"
alt="The active portion of the log cycling back to the beginning of the physical log file" />
<figcaption aria-hidden="true">The active portion of the log cycling
back to the beginning of the physical log file</figcaption>
</figure>
<p>If a log backup sequence is being maintained, the part of the log
before the minimum LSN can’t be overwritten until those log records have
actually been backed up. The VLF status stays at 2 until the log backup
occurs. After the log backup, the status changes to 0 and SQL Server can
cycle back to the beginning of the file.</p>
<h3 id="automatically-shrinking-the-log">Automatically shrinking the
log</h3>
<p>A database should be truncated so that it’s the most shrinkable, and
if the log is in autotruncate mode and the autoshrink option is set, the
log is physically shrunk at regular intervals.</p>
<p>Autotruncate means only that VLFs considered recoverable are marked
as reusable at regular intervals, but VLFs in an active state aren’t
affected.</p>
<h3 id="viewing-the-log-file-size">Viewing the log file size</h3>
<p><code>DBCC SQLPERF(‘logspace’)</code></p>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220721143841535.png"
alt="DBCC result" />
<figcaption aria-hidden="true">DBCC result</figcaption>
</figure>
<p><code>sys.dm_os_performance_counters</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> instance_name <span class="hljs-keyword">as</span> [Database],<br> cntr_value <span class="hljs-keyword">as</span> &quot;LogFullPct&quot;<br><span class="hljs-keyword">FROM</span> sys.dm_os_performance_counters<br><span class="hljs-keyword">WHERE</span> counter_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;Percent Log Used%&#x27;</span><br> <span class="hljs-keyword">AND</span> instance_name <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;_Total&#x27;</span>, <span class="hljs-string">&#x27;mssqlsystemresource&#x27;</span>)<br> <span class="hljs-keyword">AND</span> cntr_value <span class="hljs-operator">&gt;</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220721143923238.png"
alt="View result" />
<figcaption aria-hidden="true">View result</figcaption>
</figure>
<h2 id="database-backup-and-restore">Database backup and restore</h2>
<h3 id="understanding-the-types-of-backups">Understanding the types of
backups</h3>
<p><u>Full backup</u></p>
<p>Backup copies all the pages from a database onto a backup device</p>
<p><u>Differential backup</u></p>
<p>Backup copies only the extents that changed since the last full
backup was made.</p>
<p>Each time a full backup is made, all bits in the DIFF are cleared to
0. When any page in an extent is changed, the bit in the DIFF page
corresponding to that extent is changed to 1.</p>
<p><u>Log backup</u></p>
<p>Backup copies all log records that have been written to the
transaction log since the last log backup was made.</p>
<p><u>File and filegroup backup</u></p>
<p>SQL Server records the current log sequence number (LSN) at the time
the backup starts and again at the time the backup ends.</p>
<h3 id="understanding-recovery-models">Understanding recovery
models</h3>
<h4 id="minimally-logged-operations">Minimally logged operations</h4>
<p>Minimally logged operations are ones that don’t write every single
individual row because doing so modifies the transaction log. At a
minimum, enough information has to be logged when a minimally logged
operation is performed to allow SQL Server to rollback a transaction
that has failed. Even when SQL Server logs the changed data, it doesn’t
actually write it to the log in the sequence that it was changed. It’s a
feature that minimizes the amount of logging for the operations
configured.</p>
<h4 id="full-recovery-model">FULL recovery model</h4>
<ol type="1">
<li>the least risk of losing work</li>
<li>all operations are fully logged</li>
</ol>
<h4 id="bulk_logged-recovery-model">BULK_LOGGED recovery model</h4>
<p>When you execute one of these minimally logged operations in a
database in BULK_LOGGED recovery, SQL Server logs only that the
operation occurred and logs information about space allocations.</p>
<p>Because of the reduced logging for minimally logged operations, the
operations themselves can potentially be carried out much faster than in
the FULL recovery model.(the speed improvement isn’t guaranteed)</p>
<p>Minimally logged operations might actually be slower in BULK_LOGGED
recovery than in FULL recovery in certain cases</p>
<p>The BULK_LOGGED recovery model allows you to restore a database
completely in case of media failure and gives you the best performance
and least log space usage for certain minimally logged operations</p>
<p>The time it takes to restore a log backup made in the BULK_LOGGED
recovery model is similar to the time it takes to restore a log backup
made in the FULL recovery mode</p>
<h4 id="simple-recovery-model">SIMPLE recovery model</h4>
<p>the logging that takes place in SIMPLE recovery is exactly the same
as the logging in BULK_LOGGED recovery, but transaction log is truncated
whenever a checkpoint occurs, the only types of backups that can be made
are those that don’t require log backups</p>
<h3 id="switching-recovery-models">Switching recovery models</h3>
<p>When created, a database starts in whatever recovery model is used by
the model database on the instance</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-operator">&lt;</span>database_name<span class="hljs-operator">&gt;</span><br> <span class="hljs-keyword">SET</span> RECOVERY [<span class="hljs-keyword">FULL</span> <span class="hljs-operator">|</span> BULK_LOGGED <span class="hljs-operator">|</span> SIMPLE]<br></code></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">returns</span> the recovery model <span class="hljs-keyword">and</span> the state <span class="hljs-keyword">of</span> database<br><span class="hljs-keyword">SELECT</span> name, database_id, suser_sname(owner_sid) <span class="hljs-keyword">as</span> owner ,<br> state_desc, recovery_model_desc<br><span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AdventureWorks2008R2&#x27;</span><br></code></pre></td></tr></table></figure>
<h3 id="choosing-a-backup-type">Choosing a backup type</h3>
<p><u>A differential backup</u></p>
<ol type="1">
<li>Is faster if your environment includes many changes to the same
data. It backs up only the most recent change, whereas a log backup
captures every individual update</li>
<li>Captures the entire B-tree structures for new indexes, whereas a log
backup captures each individual step in building the index.</li>
<li>Is cumulative. When you recover from a media failure, only the most
recent differential backup needs to be restored because it contains all
the changes since the last full database backup</li>
</ol>
<p><u>A log backup</u></p>
<ol type="1">
<li>Allows you to restore to any point in time because it is a
sequential record of all changes.</li>
<li>This allows you to recover right up to the point of the
failure.</li>
<li>Is sequential and discrete, all log backups must be applied in the
order that they were made.</li>
</ol>
<h3 id="restoring-a-database">Restoring a database</h3>
<figure>
<img
src="/2022/07/10/SQL%20Server%202012%20Internal%20Note_Logging%20and%20recovery/image-20220721153220762.png"
alt="The combined use of log and differential backups, which reduces total restore time" />
<figcaption aria-hidden="true">The combined use of log and differential
backups, which reduces total restore time</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 Internal Note_Databases and database file</title>
    <url>/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/</url>
    <content><![CDATA[<h1 id="sql-server-2012-internal-note_databases-and-database-file">SQL
Server 2012 Internal Note_Databases and database file</h1>
<p>A Microsoft SQL Server database is a collection of objects that hold
and manipulate data.</p>
<ul>
<li>It’s a collection of many objects (tables, views, stored procedures,
functions, and constraints)</li>
<li>It’s owned by a single SQL Server login account</li>
<li>It maintains a set of user accounts, roles, schemas, and
security</li>
<li>It has a set of system tables</li>
<li>It’s the primary unit of recovery and maintains logical consistency
among objects within it</li>
<li>It has and manages its transaction logs</li>
<li>It can span multiple disk drives and operating system files</li>
<li>It can range in size from 2 MB to a technical limit of 1524,272
TB.</li>
<li>It can grow and shrink automatically or manually</li>
<li>It can have specific properties enabled or disabled</li>
</ul>
<h2 id="understanding-database-files">Understanding database files</h2>
<p>A database file is an operating system file</p>
<p>A database spans at least two (one for data one for the transaction
log) or more database files, and the files are specified when a database
is created or altered.</p>
<p><strong>Three types of database files:</strong></p>
<ol type="1">
<li>Primary data files
<ol type="1">
<li><p>One for each database</p></li>
<li><p>Keeps track of all the rest of the files and stores data</p></li>
<li><p><code>.mdf</code></p></li>
<li><p>Has pointers into a table in the master database that contains
information about all the files belonging to the database</p>
<ol type="1">
<li><p>Use <code>SELECT * FROM sys.database_files</code> to see the
table</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621124602041.png"
alt="Files belong to Archive database" />
<figcaption aria-hidden="true">Files belong to Archive
database</figcaption>
</figure></li>
</ol></li>
</ol></li>
<li>Secondary data files
<ol type="1">
<li>Zero or more for each data files</li>
<li><code>.ndf</code></li>
</ol></li>
<li>Log files
<ol type="1">
<li>At least one for each database</li>
<li>Contains the information necessary to recover all transactions in a
database</li>
<li><code>.ldf</code></li>
</ol></li>
</ol>
<p><strong>Five properties of each database file:</strong></p>
<ol type="1">
<li>a logical filename</li>
<li>a physical filename</li>
<li>an initial size</li>
<li>a maximum size</li>
<li>a growth increment</li>
</ol>
<p>Information on database files can be seen in
<code>sys.database_files</code> view.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.database_files<br></code></pre></td></tr></table></figure>
<h3 id="creating-a-database">Creating a database</h3>
<p>Use <strong>Object Explorer</strong> in Management Studio or
<code>CREATE DATABASE</code>.</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621093314483.png"
alt="Create Database" />
<figcaption aria-hidden="true">Create Database</figcaption>
</figure>
<p><u><code>CREATE DATABASE newdb</code></u></p>
<ol type="1">
<li>Create a <code>newdb</code> database with default values, with
default size, on two files with logical names <code>newdb</code> and
<code>newdb_log</code> and corresponding physical files,
<code>newdb.mdf</code> and <code>newdb_log.ldf</code> are created in the
default data directory</li>
<li>Permission (who can create a database):
<ol type="1">
<li>Anyone in the sysadmin role</li>
<li>Anyone has CONTROL or ALTER permission on the server</li>
<li>Anyone has CREATE DATABASE permission</li>
</ol></li>
<li>This command is case-insensitive</li>
<li>Default size
<ol type="1">
<li>Data file: 3 MB (size of the primary data file of the model
database)</li>
<li>Log file: 0.75 MB</li>
</ol></li>
<li>Database owner
<ol type="1">
<li>The login account that created the database</li>
<li>A database can have only one actual owner</li>
<li>When the owner uses the database, the user name would be
<code>dbo</code></li>
</ol></li>
</ol>
<p><u>The model database</u></p>
<ol type="1">
<li>SQL Server copies the model database when creating a new
database</li>
<li>Objects and database options are copied in all subsequently created
databases</li>
<li>Use <code>SELECT * FROM sys.objects</code> to see objects in the
model database</li>
</ol>
<h3 id="using-create-database-an-example">Using CREATE DATABASE: an
example</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE Archive<br><span class="hljs-keyword">ON</span><br><span class="hljs-keyword">PRIMARY</span><br>( NAME <span class="hljs-operator">=</span> Arch1,<br>FILENAME <span class="hljs-operator">=</span><br>    <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\archdat1.mdf&#x27;</span>,<br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">100</span>MB,<br>MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">200</span>MB,<br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">20</span>MB),<br>( NAME <span class="hljs-operator">=</span> Arch2,<br>FILENAME <span class="hljs-operator">=</span><br>    <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\archdat2.ndf&#x27;</span>,<br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">10</span>GB,<br>MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">50</span>GB,<br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">250</span>MB) # file expansion size<br>LOG <span class="hljs-keyword">ON</span><br>( NAME <span class="hljs-operator">=</span> Archlog1,<br>FILENAME <span class="hljs-operator">=</span><br>    <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\DATA\archlog1.ldf&#x27;</span>,<br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">2</span>GB,<br>MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">10</span>GB,<br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">100</span>MB);<br></code></pre></td></tr></table></figure>
<p>If you find that by executing the query there is error message:</p>
<p><code>Could not obtain exclusive lock on database 'model'. Retry the operation later.</code></p>
<p>Use this to see which session is occupying the model database:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> request_session_id<br><span class="hljs-keyword">from</span> sys.dm_tran_locks<br><span class="hljs-keyword">where</span> resource_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;database&#x27;</span> <span class="hljs-keyword">and</span><br>      resource_database_id <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-keyword">and</span><br>      request_type <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;LOCK&#x27;</span> <span class="hljs-keyword">and</span><br>      request_status <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;GRANT&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>Then just <code>KILL</code> the session.</p>
<h2 id="expanding-or-shrinking-a-database">Expanding or shrinking a
database</h2>
<h3 id="automatic-file-expansion">Automatic file expansion</h3>
<p><code>FILEGROWTH</code> property determines how the file expands with
suffix TB, GB, MB, KB, or %.</p>
<p><code>MAXSIZE</code> property sets an upper limit on the file
size</p>
<p>Enabling autogrow might prevent some failures due to unexpected
increases in data volume.</p>
<p>Shortcomings:</p>
<ol type="1">
<li>Time-consuming if fast file initialization is not activated</li>
<li>Result in physical fragmentation</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">Returns</span> a list <span class="hljs-keyword">of</span> the amount <span class="hljs-keyword">of</span> <span class="hljs-keyword">free</span> disk space <span class="hljs-keyword">on</span> <span class="hljs-keyword">each</span> <span class="hljs-keyword">of</span> your <span class="hljs-keyword">local</span> volumes<br><span class="hljs-keyword">exec</span> xp_fixeddrives<br></code></pre></td></tr></table></figure>
<h3 id="manual-file-expansion">Manual file expansion</h3>
<p>Use <code>ALTER DATABASE</code> command with <code>MODIFY FILE</code>
option to change the <code>SIZE</code> property of the files.</p>
<p>Note that the new file size must be larger than the current size.</p>
<h3 id="fast-file-initialization">Fast file initialization</h3>
<p>Instant file initialization adds space to the data file (not log
files) without filling the newly added space with zeros (If want files
are zeroed out, use <code>tracefalge 1806</code> or deny
<code>SE_MANAGE_VOLUME_NAME</code> rights of your account), the disk is
overwritten when the new data is written to the files.</p>
<h3 id="automatic-shrinkage">Automatic shrinkage</h3>
<p>Never recommended (resource-intensive)</p>
<p>Database property <code>autoshrink</code> controls the option, and
has the same effect as running
<code>DBCC SHRINKDATABASE (dbname, 25)</code>.</p>
<h3 id="manual-shrinkage">Manual shrinkage</h3>
<h4 id="dbcc-shrinkfile">DBCC SHRINKFILE</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># Attemps <span class="hljs-keyword">to</span> shrink the file <span class="hljs-keyword">to</span> target size <span class="hljs-keyword">in</span> the <span class="hljs-keyword">current</span> database<br>DBCC SHRINKFILE ( &#123;file_name <span class="hljs-operator">|</span> file_id &#125;<br>[, target_size][, &#123;EMPTYFILE <span class="hljs-operator">|</span> NOTRUNCATE <span class="hljs-operator">|</span> TRUNCATEONLY&#125; ] )<br></code></pre></td></tr></table></figure>
<h4 id="dbcc-shrinkdatabase">DBCC SHRINKDATABASE</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># Shrinks <span class="hljs-keyword">all</span> files <span class="hljs-keyword">in</span> a database (larger than its minimum size)<br># target_percent <span class="hljs-keyword">is</span> a percentage <span class="hljs-keyword">of</span> <span class="hljs-keyword">free</span> space <span class="hljs-keyword">to</span> leave <span class="hljs-keyword">in</span> <span class="hljs-keyword">each</span> file <span class="hljs-keyword">of</span> the database<br>DBCC SHRINKDATABASE (database_name [, target_percent]<br>[, &#123;NOTRUNCATE <span class="hljs-operator">|</span> TRUNCATEONLY&#125; ] )<br></code></pre></td></tr></table></figure>
<h2 id="using-database-filegroups">Using database filegroups</h2>
<p>Filegroups are data files in a database grouped for allocation and
administration purposes.</p>
<p><u>Primary filegroup</u></p>
<ol type="1">
<li>The filegroup containing the primary data file</li>
<li>Only one primary filegroup exists</li>
<li>By default, the primary filegroup is the default filegroup</li>
</ol>
<p><u>Create filegroups</u></p>
<p>Use <code>FILEGROUP</code> keyword in the
<code>CREATE DATABASE</code> or <code>ALTER DATABASE</code>
statement.</p>
<h3 id="the-default-filegroup">The default filegroup</h3>
<p>One filegroup always has the <strong>property</strong> of
DEFAULT.</p>
<p>One default filegroup for each database.</p>
<p>Change the default filegroup by using <code>ALTER DATABASE</code></p>
<p>When an object (table or index) is created, it’s created in the
default filegroup if no specific filegroup is specified.</p>
<p><u>Proportional fill</u></p>
<ol type="1">
<li>Data is stored in a proportional fill manner in the file group</li>
<li>Creating all your files to be the same size is recommended to avoid
the issues of proportional fill</li>
</ol>
<p><u>Why use multiple files</u></p>
<ol type="1">
<li>Partial restore</li>
<li>The flexibility of easily moving the database onto separate
drives</li>
</ol>
<p><u>Partial restore using filegroups</u></p>
<ol type="1">
<li>Partial restore and backup (objects created on the restored
filegroups are available)</li>
<li>The database goes online as soon as the primary filegroup is
restored</li>
<li>For large databases and a failure of a subset of the disks</li>
</ol>
<h3 id="a-filegroup-creation-example">A FILEGROUP CREATION example</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE Sales <br><span class="hljs-keyword">ON</span> <span class="hljs-keyword">PRIMARY</span> <br>( NAME <span class="hljs-operator">=</span> salesPrimary1, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesPrimary1.</span><br><span class="hljs-string">mdf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> ), <br>( NAME <span class="hljs-operator">=</span> salesPrimary2, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesPrimary2.</span><br><span class="hljs-string">ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">1000</span> ), <br>FILEGROUP SalesGroup1 <br>( NAME <span class="hljs-operator">=</span> salesGrp1Fi1e1, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesGrp1Fi1e1.</span><br><span class="hljs-string">ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">500</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">3000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">500</span> ), <br>( NAME <span class="hljs-operator">=</span> salesGrp1Fi1e2, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesGrp1Fi1e2.</span><br><span class="hljs-string">ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">500</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">3000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">500</span> ), <br>FILEGROUP SalesGroup2 <br>( NAME <span class="hljs-operator">=</span> salesGrp2Fi1e1, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesGrp2Fi1e1.</span><br><span class="hljs-string">ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">50000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">5000</span> ), <br>( NAME <span class="hljs-operator">=</span> salesGrp2Fi1e2, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\salesGrp2Fi1e2.</span><br><span class="hljs-string">ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">50000</span>, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">500</span> ) <br>LOG <span class="hljs-keyword">ON</span> <br>( NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sales_log&#x27;</span>, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\saleslog.ldf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">500</span>MB, MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">2500</span>MB, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">500</span>MB );<br></code></pre></td></tr></table></figure>
<h3 id="filestream-filegroups">Filestream filegroups</h3>
<p><u>Filestream filegroups</u></p>
<ol type="1">
<li>Contain one file reference, and the file is specified as an
operating system folder</li>
<li>The path up to the last folder must exist, and the last folder must
not exist</li>
<li>No space is preallocated to the filegroup
<ol type="1">
<li>The file and filegroup grow as data is added to tables that are
created with filestream columns</li>
</ol></li>
<li>Note that you can’t move a file from one filegroup to another.</li>
</ol>
<p><u>Create filestream filegroups</u></p>
<p>Before creating it, we need to enable the feature.</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621134152163.png"
alt="Enable filestream" />
<figcaption aria-hidden="true">Enable filestream</figcaption>
</figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE MyMovieReviews # <span class="hljs-keyword">or</span> <span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-keyword">for</span> existing databases<br><span class="hljs-keyword">ON</span><br><span class="hljs-keyword">PRIMARY</span> <br> ( NAME <span class="hljs-operator">=</span> Reviews_data,<br> FILENAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\data\Reviews_data.mdf&#x27;</span>),<br>FILEGROUP MovieReviewsFSGroup1 <span class="hljs-keyword">CONTAINS</span> FILESTREAM<br> ( NAME <span class="hljs-operator">=</span> Reviews_FS,<br> FILENAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\data\Reviews_FS&#x27;</span>) # the path C:\Data must exist, but <br>								  # the Reviews_FS subfolder can’t exist<br>LOG <span class="hljs-keyword">ON</span> ( NAME <span class="hljs-operator">=</span> Reviews_log,<br> FILENAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;c:\data\Reviews_log.ldf&#x27;</span>);<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621134333252.png"
alt="File structure" />
<figcaption aria-hidden="true">File structure</figcaption>
</figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621134512226.png"
alt="File structure" />
<figcaption aria-hidden="true">File structure</figcaption>
</figure>
<p><code>filestream.hdr</code> file is a FILESTREAM container header
file, which shouldn’t be modified or removed.</p>
<p>When filestream with a filestream filegroup is enabled, we can manage
file data using Windows applications.</p>
<h2 id="altering-a-database">Altering a database</h2>
<p>The <code>ALTER DATABASE</code> statement can only make changes each
time it is executed.</p>
<h3 id="alter-database-examples">ALTER DATABASE examples</h3>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># Increases the size <span class="hljs-keyword">of</span> a database file<br>USE master <br>GO <br><span class="hljs-keyword">ALTER</span> DATABASE Test1<br>MODIFY FILE <br>( NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test1dat3&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">2000</span>MB);<br></code></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># <span class="hljs-keyword">create</span> a <span class="hljs-keyword">new</span> filegroup <span class="hljs-keyword">in</span> a database<br># <span class="hljs-keyword">add</span> two <span class="hljs-number">500</span> MB files <span class="hljs-keyword">to</span> the filegroup<br># make the <span class="hljs-keyword">new</span> filegroup the <span class="hljs-keyword">default</span><br><span class="hljs-keyword">ALTER</span> DATABASE Test1 <br><span class="hljs-keyword">ADD</span> FILEGROUP Test1FG1; <br>GO <br><span class="hljs-keyword">ALTER</span> DATABASE Test1 <br><span class="hljs-keyword">ADD</span> FILE <br>( NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test1dat4&#x27;</span>, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\t1dat4.ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">500</span>MB, <br>MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>MB, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">50</span>MB), <br>( NAME <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;test1dat5&#x27;</span>, <br>FILENAME <span class="hljs-operator">=</span> <br> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL11.MSSQLSERVER\MSSQL\DATA\t1dat5.ndf&#x27;</span>, <br>SIZE <span class="hljs-operator">=</span> <span class="hljs-number">500</span>MB, <br>MAXSIZE <span class="hljs-operator">=</span> <span class="hljs-number">1000</span>MB, <br>FILEGROWTH <span class="hljs-operator">=</span> <span class="hljs-number">50</span>MB) <br><span class="hljs-keyword">TO</span> FILEGROUP Test1FG1; <br>GO <br><span class="hljs-keyword">ALTER</span> DATABASE Test1 <br>MODIFY FILEGROUP Test1FG1 <span class="hljs-keyword">DEFAULT</span>; <br>GO<br></code></pre></td></tr></table></figure>
<h3 id="databases-under-the-hood">Databases under the hood</h3>
<p>A database consists of user-defined space (allocated in one or more
operating system files) for the permanent storage of user objects such
as tables and indexes.</p>
<p>Databases are divided into logical pages (of 8 KB each), numbered
contiguously from 0 to N.</p>
<p><u>Enlarge/Shrink a file</u></p>
<ol type="1">
<li>new space is added to the end of the file</li>
<li>pages are removed starting at the end of the pages</li>
</ol>
<p><u>New a database</u></p>
<ol type="1">
<li><p>A unique database ID created</p></li>
<li><p>View <code>sys.databases</code> shows basic information about
each database</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621141438184.png"
alt="sys.databases results" />
<figcaption aria-hidden="true">sys.databases results</figcaption>
</figure></li>
</ol>
<h3 id="space-allocation">Space allocation</h3>
<p><u>Extents</u></p>
<ol type="1">
<li>eight logically contiguous pages (or 64 KB of space)</li>
<li>Types
<ol type="1">
<li>Uniform extents
<ol type="1">
<li>All eight pages owned by a single object</li>
</ol></li>
<li>Mixed extents
<ol type="1">
<li>shared by up to eight objects</li>
</ol></li>
</ol></li>
<li>Allocation
<ol type="1">
<li>For a new table or index, allocates mixed extents</li>
<li>When the table or index grows to eight pages, all future allocations
use uniform extents</li>
</ol></li>
</ol>
<p><u>GAM pages</u></p>
<ol type="1">
<li>record which extents have been allocated for any type of use.</li>
<li>On page 2, another GAM appears every 511,230 pages after the first
GAM on page 2</li>
<li>Each GAM covers about 64,000 extents, or almost 4 GB of data</li>
</ol>
<p><u>SGAM pages</u></p>
<ol type="1">
<li>record which extents are now used as mixed extents and have at least
one unused page</li>
<li>On page 3, another SGAM appears every 511,230 pages after the first
SGAM on page 3</li>
<li>each SGAM covers about 64,000 extents, or almost 4 GB of data</li>
</ol>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621170801666.png"
alt="Bit settings in GAM and SGAM pages" />
<figcaption aria-hidden="true">Bit settings in GAM and SGAM
pages</figcaption>
</figure>
<h2 id="setting-database-options">Setting database options</h2>
<p>By default, all the options that require ON or OFF have an initial
value of OFF unless the option was set to ON in the model database.</p>
<p>All databases created after an option is changed in the model have
the same values as the model.</p>
<p><code>sys.databases</code> lists the current values of all the
options.</p>
<h3 id="state-options">State options</h3>
<p>State options control who can use the database and for what
operations:</p>
<ol type="1">
<li><strong>User access state</strong> determines which users can use
the database.</li>
<li><strong>Status state</strong> determines whether the database is
available to anybody for use</li>
<li><strong>Updateability state</strong> determines what operations can
be performed on the database</li>
</ol>
<h4 id="single_user-restricted_user-multi_user">SINGLE_USER |
RESTRICTED_USER | MULTI_USER</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE AdventureWorks <span class="hljs-keyword">SET</span> SINGLE_USER;<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>Describe the user access property of a database</p></li>
<li><p>Mutually exclusive</p></li>
<li><p>SINGLE_USER</p>
<ol type="1">
<li>Allow only one connection at a time</li>
</ol></li>
<li><p>RESTRICTED_USER</p>
<ol type="1">
<li>Allow qualified connections</li>
<li>Qualified: dbcreator, sysadmin server role, db_owner role</li>
</ol></li>
<li><p>MULTI_USER (default)</p>
<ol type="1">
<li>Allow connections with a valid user name</li>
</ol></li>
<li><p>Check current option</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> USER_ACCESS_DESC <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&lt;name of database&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220621172739994.png"
alt="Current access option" />
<figcaption aria-hidden="true">Current access option</figcaption>
</figure></li>
</ol>
<h4 id="offline-online-emergency">OFFLINE | ONLINE | EMERGENCY</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE AdventureWorks <span class="hljs-keyword">SET</span> OFFLINE;<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>Describe the status of a database</p></li>
<li><p>Mutually exclusive</p></li>
<li><p>ONLINE (default)</p></li>
<li><p>OFFLINE</p>
<ol type="1">
<li>it’s closed and shut down cleanly and marked as offline</li>
<li>cannot be modified</li>
</ol></li>
<li><p>EMERGENCY</p>
<ol type="1">
<li>allows you to access the data while you copy it to a new
location.</li>
</ol></li>
<li><p>Check current status</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> state_desc <span class="hljs-keyword">from</span> sys.databases <br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AdventureWorks&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>Can have another status:</p>
<ol type="1">
<li>RESTORING</li>
<li>RECOVERING</li>
<li>RECOVERY_PENDING</li>
</ol></li>
</ol>
<h4 id="read_only-read_write">READ_ONLY | READ_WRITE</h4>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE AdventureWorks <span class="hljs-keyword">SET</span> READ_ONLY;<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>describe a database’s ability to be updated</p></li>
<li><p>mutually exclusive</p></li>
<li><p>READ_WRITE (default)</p>
<ol type="1">
<li>any user with the appropriate permissions can carry out data
modification operations</li>
</ol></li>
<li><p>READ_ONLY</p>
<ol type="1">
<li>no INSERT, UPDATE, or DELETE operations can be executed</li>
<li>automatic recovery will not run when the SQL server is
restarted</li>
<li>no locks are needed for SELECT</li>
<li>Cannot shrink databases</li>
<li>Cannot set to READ_ONLY if any connections are made to the
database</li>
</ol></li>
<li><p>Check</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, is_read_only <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AdventureWorks&#x27;</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622094135221.png"
alt="Updatability status" />
<figcaption aria-hidden="true">Updatability status</figcaption>
</figure>
<p>1 for READ_ONLY, 0 for READ_WRITE</p></li>
</ol>
<h3 id="termination-options">Termination options</h3>
<p>Termination options determine the behavior of the SQL Server when
several state options cannot be set.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE AdventureWorks <span class="hljs-keyword">SET</span> SINGLE_USER <span class="hljs-keyword">WITH</span> NO_WAIT; <br></code></pre></td></tr></table></figure>
<p>Wait is the default option</p>
<h4 id="rollback-after-integer-seconds">ROLLBACK AFTER integer
[SECONDS]</h4>
<ol type="1">
<li>wait for the specified number of seconds and then break unqualified
connections.</li>
<li>Incomplete transactions are rolled back.</li>
</ol>
<h4 id="rollback-immediate">ROLLBACK IMMEDIATE</h4>
<ol type="1">
<li>breaks unqualified connections immediately</li>
<li>All incomplete transactions are rolled back</li>
</ol>
<h4 id="no_wait">NO_WAIT</h4>
<ol type="1">
<li>check for connections before attempting to change the database state
and causes the ALTER DATABASE statement to fail if certain connections
exist (generates an error)</li>
</ol>
<h3 id="cursor-options">Cursor options</h3>
<p>The cursor options control the behavior of server-side cursors
defined using one of the following T-SQL commands for defining and
manipulating cursors: DECLARE, OPEN, FETCH, CLOSE, and DEALLOCAT</p>
<h4 id="cursor_close_on_commit-on-off">CURSOR_CLOSE_ON_COMMIT {ON |
OFF}</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>any open cursors are closed when a transaction is committed or
rolled back</li>
</ol></li>
<li>OFF (default)
<ol type="1">
<li>cursors remain open after a transaction is committed</li>
</ol></li>
</ol>
<h4 id="cursor_default-local-global">CURSOR_DEFAULT {LOCAL |
GLOBAL}</h4>
<ol type="1">
<li>LOCAL and cursors aren’t specified as GLOBAL when they are
created</li>
<li>The cursor name is valid only within this batch</li>
<li>GLOBAL and cursors aren’t specified as LOCAL when they are created
<ol type="1">
<li>The cursor name can be referenced in any stored procedure or batch
executed by the connection.</li>
</ol></li>
</ol>
<h3 id="auto-options">Auto options</h3>
<p>Affect actions that SQL Server might take automatically</p>
<h4 id="auto_close">AUTO_CLOSE</h4>
<ol type="1">
<li>On
<ol type="1">
<li>the database is closed and shut down cleanly when the last user of
the database exits</li>
</ol></li>
</ol>
<h4 id="auto_shrink">AUTO_SHRINK</h4>
<ol type="1">
<li>On
<ol type="1">
<li>all of a database’s files are candidates for periodic shrinking</li>
<li>never recommended</li>
</ol></li>
</ol>
<h4 id="auto_create_statistics">AUTO_CREATE_STATISTICS</h4>
<ol type="1">
<li>On (default)
<ol type="1">
<li>the SQL Server Query Optimizer creates statistics on columns
referenced in a query’s WHERE, ON, GROUP BY, or DISTINCT clauses.</li>
</ol></li>
</ol>
<h4 id="auto_update_statistics">AUTO_UPDATE_STATISTICS</h4>
<ol type="1">
<li>On (default)
<ol type="1">
<li>existing statistics are updated if the data in the tables has
changed</li>
</ol></li>
</ol>
<h3 id="sql-options">SQL options</h3>
<p>The SQL options control how various SQL statements are
interpreted.</p>
<p>Default is OFF for all.</p>
<h4 id="ansi_null_default">ANSI_NULL_DEFAULT</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>if you don’t specifically indicate whether a column in a table
allows NULL values, NULLs are allowed</li>
</ol></li>
<li>OFF
<ol type="1">
<li>newly created columns don’t allow NULLs if no nullability constraint
is specified</li>
</ol></li>
</ol>
<h4 id="ansi_nulls">ANSI_NULLS</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>any comparisons with a NULL value result in UNKNOWN</li>
</ol></li>
<li>OFF
<ol type="1">
<li>comparisons of non-Unicode values to NULL result in a value of TRUE
if both values being compared are NULL</li>
</ol></li>
</ol>
<h4 id="ansi_padding">ANSI_PADDING</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>strings being compared with each other are set to the same length
before the comparison takes place</li>
</ol></li>
<li>OFF
<ol type="1">
<li>No padding</li>
</ol></li>
</ol>
<h4 id="ansi_warnings">ANSI_WARNINGS</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>errors or warnings are issued when conditions such as
division-by-zero or arithmetic overflow occur</li>
</ol></li>
</ol>
<h4 id="arithabort">ARITHABORT</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>a query is terminated when an arithmetic overflow or
division-by-zero error is encountered during the execution of a
query</li>
</ol></li>
<li>OFF
<ol type="1">
<li>the query returns NULL as the result of the operation</li>
</ol></li>
</ol>
<h4 id="concat_null_yields_null">CONCAT_NULL_YIELDS_NULL</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>concatenating two strings results in a NULL string if either string
is NULL</li>
</ol></li>
<li>OFF
<ol type="1">
<li>a NULL string is treated as an empty (zero-length) string for
concatenation</li>
</ol></li>
</ol>
<h4 id="numeric_roundabort">NUMERIC_ROUNDABORT</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>an error is generated if an expression results in a loss of
precision</li>
</ol></li>
<li>OFF
<ol type="1">
<li>the result is simply rounded</li>
</ol></li>
</ol>
<h4 id="quoted_identifier">QUOTED_IDENTIFIER</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>identifiers such as table and column names can be delimited by
double quotation marks, and literals must then be delimited by single
quotation marks</li>
</ol></li>
<li>OFF
<ol type="1">
<li>identifiers can’t be in quotation marks and must follow all T-SQL
rules for identifiers</li>
</ol></li>
</ol>
<h4 id="recursive_triggers">RECURSIVE_TRIGGERS</h4>
<ol type="1">
<li>ON
<ol type="1">
<li>triggers can fire recursively, either directly or indirectly</li>
</ol></li>
<li>OFF
<ol type="1">
<li>triggers can’t be fired recursively.</li>
</ol></li>
</ol>
<h3 id="database-recovery-options">Database recovery options</h3>
<h4 id="recovery-full-bulk_logged-or-simple">RECOVERY (FULL,
BULK_LOGGED, or SIMPLE)</h4>
<ol type="1">
<li>determines how much recovery can be done on a SQL Server
database</li>
<li>controls how much information is logged and how much of the log is
available for backups</li>
</ol>
<h4 id="page_verify">PAGE_VERIFY</h4>
<p>Discover damaged database pages caused by disk I/O path errors, which
can cause database corruption problems.</p>
<ol type="1">
<li>CHECKSUM
<ol type="1">
<li>SQL Server calculates a checksum over the contents of each page and
stores the value in the page header when a page is written to the
disk</li>
<li>When reading the page, a checksum is calculated and compared with
the stored one, if not match, error message 824</li>
<li>run <code>DBCC CHECKDB</code> to determine the type of database page
or pages affected</li>
</ol></li>
<li>TORN_PAGE_DETECTION
<ol type="1">
<li>allows SQL Server to detect incomplete I/O operations caused by
power failures or other system outages</li>
</ol></li>
<li>NONE</li>
</ol>
<h2 id="understanding-database-security">Understanding database
security</h2>
<p><u>Authentication</u></p>
<p>SQL Server validates and establishes the identity of an individual
who wants to access a resource</p>
<p><u>Authorization</u></p>
<p>SQL Server decides whether a given identity is allowed to access a
resource</p>
<p><u>Securable</u></p>
<ol type="1">
<li>This is an entity on which permissions can be granted.</li>
<li>Securable include databases, schemas, and objects.</li>
</ol>
<p><u>Principal</u></p>
<ol type="1">
<li>This entity can access securable</li>
<li>A primary principal represents a single user</li>
<li>A secondary principal represents multiple users</li>
</ol>
<h3 id="database-access">Database access</h3>
<p><u>Authentication logins</u></p>
<ol type="1">
<li><p>Windows authentication</p>
<ol type="1">
<li>SQL Server login security is integrated directly with Windows
security to authenticate SQL Server users</li>
<li>The SID is the same as the OS</li>
</ol></li>
<li><p>SQL Server authentication</p>
<ol type="1">
<li>An administrator creates SQL Server login accounts within SQL
Server</li>
</ol></li>
<li><p>Login names</p>
<ol type="1">
<li><p>Check login names in <code>sys.server_principals</code> view</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622134755663.png"
alt="sys.server_principals view" />
<figcaption aria-hidden="true">sys.server_principals view</figcaption>
</figure></li>
</ol></li>
</ol>
<p><u>Security modes</u></p>
<ol type="1">
<li><p>Windows authentication mode</p>
<ol type="1">
<li>Use only Windows authentication</li>
<li>The default SQL Server sa login is disabled</li>
</ol></li>
<li><p>Mixed mode</p>
<ol type="1">
<li>Use both Windows authentication and SQL Server authentication</li>
<li>The sa login can be enabled using the <code>ALTER LOGIN</code>
command</li>
</ol></li>
<li><p>Change mode</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622134603728.png"
alt="Choosing an authentication mode for your SQL Server instance in the Server Properties sheet" />
<figcaption aria-hidden="true">Choosing an authentication mode for your
SQL Server instance in the Server Properties sheet</figcaption>
</figure></li>
</ol>
<h3 id="database-security">Database security</h3>
<p>Databases are owned by login names.</p>
<p>Most objects within a database are owned by database principals.</p>
<p>The SID used by a principal determines which databases that principal
has access to.</p>
<p><code>sys.database_principals</code> is a mapping table that maps
login names to users in that particular database</p>
<p><u>Database user types</u></p>
<ol type="1">
<li>a user that maps to a SQL Server login</li>
<li>a user that maps to a Windows login</li>
<li>a user who doesn’t map to any login
<ol type="1">
<li>have a user to be the owner of objects, who never actually uses the
database</li>
</ol></li>
<li>a user without a login
<ol type="1">
<li>have access to only that database.</li>
</ol></li>
<li>Within a database, users own objects and are granted
permissions</li>
</ol>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># Shows the mapping <span class="hljs-keyword">of</span> users <span class="hljs-keyword">in</span> the database <span class="hljs-keyword">to</span> login names<br><span class="hljs-keyword">SELECT</span> s.name <span class="hljs-keyword">as</span> [Login Name], d.name <span class="hljs-keyword">as</span> [<span class="hljs-keyword">User</span> Name],<br>     default_schema_name <span class="hljs-keyword">as</span> [<span class="hljs-keyword">Default</span> Schema] <br>   <span class="hljs-keyword">FROM</span> sys.database_principals d  <br>      <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> sys.server_principals s <br>   <span class="hljs-keyword">ON</span> s.sid <span class="hljs-operator">=</span> d.sid<br> <span class="hljs-keyword">WHERE</span> d.type_desc <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SQL_USER&#x27;</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622142154463.png"
alt="Mapping of users" />
<figcaption aria-hidden="true">Mapping of users</figcaption>
</figure>
<h3 id="databases-vs.-schemas">Databases vs. schemas</h3>
<p><u>Schemas</u></p>
<p>A schema is defined as a collection of database objects that are
owned by a single user and form a single namespace (a container of
objects)</p>
<p>No two tables in the same schema can have the same name.</p>
<p><u>Namespace</u></p>
<p>A namespace is a set of objects that can’t have duplicate names</p>
<h3 id="principals-and-schemas">Principals and schemas</h3>
<p>Users and schemas are two separate things</p>
<p>Permissions are granted to users, but objects are placed in
schemas.</p>
<p>Schemas contain objects, not users</p>
<blockquote>
<p>The statement <code>GRANT CREATE TABLE</code> TO sue refers to the
user sue.</p>
<p>Then sue creates a table</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> mytable (col1 <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>));<br></code></pre></td></tr></table></figure>
<p>Then the table is placed in sue's default schema, maybe the schema
sue.</p>
<p>If another user wants to select from this table, then</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> col1 <span class="hljs-keyword">FROM</span> sue.mytable;<br></code></pre></td></tr></table></figure>
<p>Here, sue refers to the schema that contains the table</p>
</blockquote>
<p>An object is referenced by the schema n which it is contained</p>
<p>In most cases, the owner of the schema is the same as the owner of
all objects within the schema</p>
<p>The column <code>pricipal_id</code> in the view
<code>sys.objects</code> contains the user_id of an object’s owner if it
isn’t the same as the owner of the object’s schema.</p>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622144848733.png"
alt="sys.objects view" />
<figcaption aria-hidden="true">sys.objects view</figcaption>
</figure>
<p>The default for the default schema is the dbo schema.</p>
<h3 id="default-schemas">Default schemas</h3>
<p>Every database also has a schema called sys, which provides a way to
access all the system tables and views.</p>
<p>A user can have at most one default schema at any time</p>
<p>A user’s default schema is used for name resolution during object
creation or object reference</p>
<p>You should always specify the schema name for all object access as
well as object management</p>
<p><u>To create an object in a schema</u></p>
<ol type="1">
<li>The schema must exist</li>
<li>The user creating the object must have permission to create the
object</li>
<li>The user creating the object must have permission to alter the
schema</li>
</ol>
<h2 id="moving-or-copying-a-database">Moving or copying a database</h2>
<h3 id="detaching-and-reattaching-a-database">Detaching and reattaching
a database</h3>
<p><u>Detach</u></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_detach_db <span class="hljs-operator">&lt;</span>name <span class="hljs-keyword">of</span> database<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure>
<ol type="1">
<li>Requires that no one is using the database.
<ol type="1">
<li>User <code>ALTER DATABASE</code> to <code>SINGLE_USER</code> mode to
break connections</li>
</ol></li>
<li>Ensure no incomplete transactions and no dirty pages exist</li>
<li>The database is removed from the <code>sys.databases</code> view and
underlying system tables</li>
</ol>
<p><u>DROP DATABASE</u></p>
<ol type="1">
<li>Doesn’t check for dirty pages or open transactions</li>
<li>Will remove the physical files</li>
</ol>
<p><u>Reattach</u></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE database_name  <br>    <span class="hljs-keyword">ON</span> <span class="hljs-operator">&lt;</span>filespec<span class="hljs-operator">&gt;</span> [ ,...n ]  <br>    <span class="hljs-keyword">FOR</span> &#123; ATTACH  <br>        <span class="hljs-operator">|</span> ATTACH_REBUILD_LOG &#125;<br></code></pre></td></tr></table></figure>
<ol type="1">
<li>The primary file is required to have a entry</li>
<li>The <code>FOR ATTACH_REBUILD_LOG</code> option is limited to
read/write databases</li>
<li>When attaching a read-only database, you must specify the log file
or files in the FOR ATTACH clause</li>
</ol>
<h3 id="backing-up-and-restoring-a-database">Backing up and restoring a
database</h3>
<p>The database doesn’t need to come offline at all because the backup
is a completely online operation</p>
<h2 id="understanding-compatibility-levels">Understanding compatibility
levels</h2>
<p><u>Compatibility levels</u></p>
<p>110 (for SQL Server 2012), 100 (for SQL Server 2008), or 90 (for SQL
Server 2005)</p>
<p><u>Check compatibility level</u></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> compatibility_level <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;&lt;database name&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/25/SQL%20Server%202012%20Internal%20Note_Databases%20and%20database%20file/image-20220622155851528.png"
alt="Compatibility levels" />
<figcaption aria-hidden="true">Compatibility levels</figcaption>
</figure>
<p><u>Change compatibility level</u></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> DATABASE <span class="hljs-operator">&lt;</span>database name<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">SET</span> COMPATIBILITY_LEVEL <span class="hljs-operator">=</span> <span class="hljs-operator">&lt;</span>compatibility<span class="hljs-operator">-</span>level<span class="hljs-operator">&gt;</span>;<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 Internal Note_SQL Server Architecture and Configuration</title>
    <url>/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/</url>
    <content><![CDATA[<h2
id="sql-server-2012-internal-note_sql-server-architecture-and-configuration">SQL
Server 2012 Internal Note_SQL Server Architecture and Configuration</h2>
<h3 id="sql-server-editions">SQL Server Editions</h3>
<p><strong>Verify what edition you are running</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> SERVERPROPERTY(<span class="hljs-string">&#x27;Edition&#x27;</span>);<br><span class="hljs-keyword">SELECT</span> SERVERPROPERTY(<span class="hljs-string">&#x27;EngineEdition&#x27;</span>);<br><span class="hljs-comment">-- EngineEdition = 3, Enterprise, Enterprise Evaluation, or Developer</span><br><span class="hljs-comment">-- EngineEdition = 2, Standard, Web, or Business Intelligence, and fewer features are available</span><br><span class="hljs-comment">-- EngineEdition = 4, Express</span><br><span class="hljs-comment">-- EngineEdition = 5, SQL Azure</span><br></code></pre></td></tr></table></figure>
<h3 id="sql-tools">SQL Tools</h3>
<ol type="1">
<li>For graphical system, use client tool as SQL Server Management
Studio.</li>
<li>For non-graphical system, use commend line tools as SQLCMD in SQL
PowerShell.</li>
</ol>
<h2 id="sql-server-metadata">SQL Server Metadata</h2>
<h3 id="system-base-tables">System base tables</h3>
<p>System base tables store information about the SQL server, and are
used for internal purposes within the Databased Engine.</p>
<p><strong>View names of all system tables as an admin</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">USE master;<br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sys.objects<br><span class="hljs-keyword">WHERE</span> type_desc <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SYSTEM_TABLE&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>The <strong>only</strong> way to see the data in the system base
table is to make connection using DAC (dedicated administrator
connection).</p>
<p>In SQL Server 2012, three types of system metadata objects are
intended for general use: Compatibility Views, Catalog Views, and
Dynamic Management Objects.</p>
<h3 id="compatibility-views">Compatibility Views</h3>
<p>Compatibility views provides the access to a subset of the SQL Server
2000 system tables and are accessible from any database, backward
compatibility only (no metadata related to added features)</p>
<h3 id="catalog-views">Catalog Views</h3>
<p>SQL Server 2005 introduced a set of catalog views as a general
interface to the persisted system metadata.</p>
<p>All catalog views (as well as the Dynamic Management Objects and
compatibility views) are in the <code>sys</code> schema, which you must
reference by name when you access the objects.</p>
<p><strong>Reference a catalog view called
<code>objects</code></strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.objects;<br></code></pre></td></tr></table></figure>
<p><strong>Columns displayed for catalog views vs compatibility
views</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.databases;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sysdatabases; <br><span class="hljs-comment">/* Interchangable</span><br><span class="hljs-comment">SELECT * FROM sys.sysdatabases;</span><br><span class="hljs-comment">SELECT * FROM sysdatabases;</span><br><span class="hljs-comment">SELECT * FROM dbo.sysdatabases;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>
<p>There are more columns for <code>SELECT * FROM sys.databases</code>,
each possible database property has its own column in
<code>sys.databases</code>.</p>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220601111344995.png"
alt="image-20220601111344995" />
<figcaption aria-hidden="true">image-20220601111344995</figcaption>
</figure>
<p>As a view, <code>sys.databases</code> can be queried and
filtered:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Find databases are in the simple recovery model</span><br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> recovery_model_desc <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;SIMPLE&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p><strong>Inheritance model of catalog views</strong></p>
<p>The base views contain a subset of columns and a superset of rows,
and the derived views contain a superset of columns and a subset of
rows.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.objects;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.tables;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.views;<br></code></pre></td></tr></table></figure>
<p><code>sys.objects</code> contains all the columns for attributes
common to all types of objects and shows metadata for procedures and
views in addition to that for tables.</p>
<p><code>sys.tables</code> contains all the columns in
<code>sys.object</code> and additional columns that are meaningful for
tables, and shows only rows for tables.</p>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220601121558169.png"
alt="image-20220601121558169" />
<figcaption aria-hidden="true">image-20220601121558169</figcaption>
</figure>
<blockquote>
<p>Note that metadata appearing only in the <code>msdb</code> database
isn’t available through catalog views but is still available in system
tables, in the schema <code>dbo</code>.</p>
</blockquote>
<p><strong>See definition of views</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- See the definition of sys.tables</span><br><span class="hljs-comment">-- Method 1</span><br><span class="hljs-keyword">SELECT</span> object_definition (object_id(<span class="hljs-string">&#x27;sys.tables&#x27;</span>));<br><span class="hljs-comment">-- Method 2</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.system_sql_modules<br><span class="hljs-keyword">WHERE</span> object_id <span class="hljs-operator">=</span> object_id(<span class="hljs-string">&#x27;sys.tables&#x27;</span>);<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220601122525275.png"
alt="image-20220601122525275" />
<figcaption aria-hidden="true">image-20220601122525275</figcaption>
</figure>
<h3 id="dynamic-management-objects">Dynamic Management Objects</h3>
<p>DMV, Dynamic Management Objects include both views and functions,
provides internal behavior of SQL Server, some of them allow tracking of
detailed resource history, they are all in <code>sys</code> schema and
have a name that starts with <code>dm_</code>.</p>
<p>The DMVs aren’t based on real tables stored in database files but are
based on internal server structures</p>
<p><strong>Main categories of DMVs</strong></p>
<table>

<thead>
<tr class="header">
<th>Category</th>
<th>Contains</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><code>dm_exec_*</code></td>
<td>Information about user execution code and connections</td>
<td><code>sys.dm_exec_sessions</code></td>
</tr>
<tr class="even">
<td><code>dm_os_*</code></td>
<td>Low-level system information such as memory and scheduling</td>
<td><code>sys.dm_os_schedulers</code></td>
</tr>
<tr class="odd">
<td><code>dm_tran_*</code></td>
<td>Information about current transactions</td>
<td><code>sys.dm_tran_locks</code></td>
</tr>
<tr class="even">
<td><code>dm_logpool*</code></td>
<td>Details about log pools used to manage SQL Server 2012’s log
cache</td>
<td></td>
</tr>
<tr class="odd">
<td><code>dm_io_*</code></td>
<td>Keeps track of input/output activity on network and disks</td>
<td><code>sys.dm_io_virtual_file_stats</code></td>
</tr>
<tr class="even">
<td><code>dm_db_*</code></td>
<td>Details about databases and database objects such as indexes</td>
<td><code>sys.dm_db_index_operational_stats</code></td>
</tr>
</tbody>
</table>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Return statistics for the log file in the AdventureWorks2019 database</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.dm_io_virtual_file_stats(DB_ID(N<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>), <span class="hljs-number">2</span>);  <br>GO<br><span class="hljs-comment">-- Returns information for all tables and indexes within the instance of SQL Server</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.dm_db_index_operational_stats( <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>, <span class="hljs-keyword">NULL</span>);    <br>GO<br></code></pre></td></tr></table></figure>
<h3 id="other-metadata">Other Metadata</h3>
<h4 id="information-schema-views">Information Schema Views</h4>
<p>Information schema views, introduced in SQL Server 7.0, were the
original system table-independent view of the SQL Server metadata. The
information schema views show only objects compatible with the SQL-92
standard.</p>
<h4 id="system-functions">System Functions</h4>
<p><strong>Property function</strong></p>
<p>Property functions provide individual values for many SQL Server
objects as well as for SQL Server databases and the SQL Server instance
itself.</p>
<p>Return values are <strong>scalars</strong>, they can be used as
values returned by SELECT statements and as values to populate columns
in tables.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- View the recovery model of a single database</span><br><span class="hljs-keyword">SELECT</span> DATABASEPROPERTYEX(<span class="hljs-string">&#x27;msdb&#x27;</span>, <span class="hljs-string">&#x27;Recovery&#x27;</span>);<br><span class="hljs-comment">-- View the recovery model of all databases</span><br><span class="hljs-comment">-- _desc are &quot;friendly name&quot; columns</span><br><span class="hljs-keyword">SELECT</span> name, recovery_model, recovery_model_desc<br><span class="hljs-keyword">FROM</span> sys.databases;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220601155752867.png"
alt="image-20220601155752867" />
<figcaption aria-hidden="true">image-20220601155752867</figcaption>
</figure>
<p><strong>Short-cuts for catalog view access</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- Find the database ID for the AdventrureWorks2019</span><br><span class="hljs-comment">-- 1</span><br><span class="hljs-keyword">SELECT</span> database_id<br><span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>;<br><span class="hljs-comment">-- 2</span><br><span class="hljs-keyword">SELECT</span> DB_ID(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>);<br></code></pre></td></tr></table></figure>
<h4 id="system-stored-procedures">System Stored Procedures</h4>
<p>System stored procedures are the original metadata access tool.</p>
<p>Most of the system stored procedures introduced in the very first
version of SQL Server are still available.</p>
<p>With the system stored procedures, you have to accept the data that
it returns.</p>
<p>Better to use catalog views: <figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- See databases that the login sue owns</span><br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> suser_sname(owner_sid) <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;sue&#x27;</span>;<br><span class="hljs-comment">-- See databases that are in a lower compatibility level</span><br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> sys.databases<br><span class="hljs-keyword">WHERE</span> compatibility_level <span class="hljs-operator">&lt;</span> <span class="hljs-number">150</span>;<br></code></pre></td></tr></table></figure></p>
<h3 id="layers-of-metadata">Layers Of Metadata</h3>
<p>“Other Metadata” refers to system information not contained in system
tables.</p>
<p>Preferred interfaces to the system metadata are the <strong>catalog
views</strong> and system functions.</p>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220601165008965.png"
alt="image-20220601165008965" />
<figcaption aria-hidden="true">image-20220601165008965</figcaption>
</figure>
<h2 id="components-of-the-sql-server-engine">Components of the SQL
Server engine</h2>
<figure>
<img
src="/2022/06/29/SQL%20Server%202012%20Internal%20Note_SQL%20Server%20Architecture%20and%20Configuration/image-20220609144911920.png"
alt="The major components of the SQL Server Database Engine." />
<figcaption aria-hidden="true">The major components of the SQL Server
Database Engine.</figcaption>
</figure>
<h3 id="protocols">Protocols</h3>
<p>Translate client requests for relational engine, translate results
for clients.</p>
<p>The SQL Server Network Interface (SNI) protocol layer on both the
server and client computers encapsulates the TDS (tabular data stream)
packet inside a standard communication protocol, such as TCP/IP or Named
Pipes.</p>
<p>SQL Server can support multiple protocols; each client connects to
SQL Server with a single protocol.</p>
<p><strong>Available protocols:</strong></p>
<ul>
<li>Shared Memory
<ul>
<li>The simplest protocol</li>
<li>Clients using this protocol can connect to only a SQL Server
instance running on the same computer</li>
<li>Use this protocol for trouble-shooting when you suspect that the
other protocols are configured incorrectly.</li>
</ul></li>
<li>Named Pipes
<ul>
<li>For local area network (LANs)</li>
<li>A portion of memory is used by one process (output) to pass
information (input) to another process (local or remote computer)</li>
</ul></li>
<li>TCP/IP
<ul>
<li>Most widely used</li>
<li>Communicate across interconnected computer networks with diverse
hardware architectures and operating systems</li>
<li>Includes standards for routing network traffic and offers advanced
security features.</li>
</ul></li>
</ul>
<h3 id="query-processor-relational-engine">Query processor (Relational
engine)</h3>
<p>Determine exactly what your query needs to do and the best way to do
it.</p>
<h4 id="parsing-and-binding-components">Parsing and binding
components</h4>
<p>Process queries into <em>query trees</em>, raise syntax or name
resolution error and identify where the error occurs.</p>
<p>Parsing component:</p>
<ol type="1">
<li>Check proper syntax and spelling of keywords</li>
</ol>
<p>Binding component:</p>
<ol type="1">
<li>Resolve object names into unique object ID</li>
</ol>
<p>After parsing and binding, convert queries into <em>query
trees</em></p>
<h4 id="the-query-optimizer">The Query Optimizer</h4>
<p>Takes the <em>query tree</em>, compile entire command batch and
optimize optimizable queries, result in an <em>execution plan</em>.</p>
<p>Non-optimizable statements:</p>
<ol type="1">
<li>Compile into an internal form</li>
<li>Such as flow-of-control and Data Definition Language (DDL)
commands</li>
</ol>
<p>Optimizable statements:</p>
<ol type="1">
<li>Pass to Query Optimizer</li>
<li>Such as Data Manipulation Language (DML) statements SELECT, INSERT,
UPDATE, DELETE, and MERGE</li>
</ol>
<p>Steps:</p>
<ol type="1">
<li>Normalization
<ol type="1">
<li>breaks down a single query into multiple, fine-grained queries</li>
</ol></li>
<li>Optimization
<ol type="1">
<li>Determine the most cost-effective execution plan based on internal
metrics that include estimated memory requirements, CPU utilization, and
number of required I/Os involving sampling data (<em>distribution
statistics</em>).</li>
<li>Avoid exhaustive optimization to ensure the time for optimizing is
less than executing any plan.</li>
</ol></li>
<li>Compilation
<ol type="1">
<li>Compile <em>normalized tree</em> into <em>execution plan</em> (a
data structure)</li>
</ol></li>
</ol>
<p>The execution plan:</p>
<ul>
<li>A data structure</li>
<li>Includes actual commands, steps for checking constraints</li>
<li>Steps for calling a trigger are not compiled into the execution
plan, the existence of a trigger can cause many more steps to be
executed.</li>
</ul>
<h4 id="the-query-executor">The query executor</h4>
<p>Run the execution plan, dispatch all commands in the plan.</p>
<p>Most commands require interaction with the storage engine to modify
or retrieve data and to manage transactions and locking. (Object Linking
and Embedding (OLE) DB rowsets involved)</p>
<h3 id="storage-engine">Storage engine</h3>
<p>Include components responsible for accessing and managing data in the
database.</p>
<h4 id="access-methods">Access methods</h4>
<p>Contains components to open a table, retrieve qualified data, and
update data.</p>
<p>Used for any data modification operations that need to modify index
entries (SELECT, UPDATE, DELETE)</p>
<h5 id="row-and-index-operations">Row and index operations</h5>
<p>Row operation:</p>
<ul>
<li>Manipulated on data.</li>
<li>Retrieves, modifies, and performs operations on individual
rows.</li>
<li>Can handle large object type (LOB)—text, image, or ntext</li>
</ul>
<p>Index operation:</p>
<ul>
<li>Manipulated on index pages</li>
<li>Maintains and supports searches on B-trees</li>
<li>An index is structured as a tree, with a root page and
intermediate-level and lower level pages</li>
</ul>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 实施与管理实战指南Note：数据库备份与恢复</title>
    <url>/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h1 id="sql-server-2012-实施与管理实战指南note数据库备份与恢复">SQL
Server 2012 实施与管理实战指南Note：数据库备份与恢复</h1>
<h2 id="备份类型">备份类型</h2>
<p>SQL Server提供的11种主要备份方法:</p>
<table>

<thead>
<tr class="header">
<th>分　　级</th>
<th>数据备份</th>
<th></th>
<th></th>
<th>日志备份</th>
<th></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据库级</td>
<td>完整数据库备份</td>
<td>仅复制完整数据库备份</td>
<td>差异数据库备份</td>
<td>（一般） 日志备份</td>
<td>仅复制 日志备份</td>
</tr>
<tr class="even">
<td>文件级</td>
<td>完整文件备份</td>
<td>仅复制完整文件备份</td>
<td>差异文件备份</td>
<td></td>
<td></td>
</tr>
<tr class="odd">
<td>部分</td>
<td>完整部分备份</td>
<td>仅复制完整部分备份</td>
<td>差异部分备份</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>最常用的备份方法:</p>
<table>
<thead>
<tr class="header">
<th>分　　级</th>
<th>数据备份</th>
<th></th>
<th>日志备份</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据库级</td>
<td>完整数据库备份</td>
<td>差异数据库备份</td>
<td>（一般）日志备份</td>
</tr>
<tr class="even">
<td>文件级</td>
<td>完整文件备份</td>
<td>差异文件备份</td>
<td></td>
</tr>
</tbody>
</table>
<h3 id="完整数据库备份">完整数据库备份</h3>
<ol type="1">
<li>拷贝下数据库里的所有信息</li>
<li>数据库在这段时间里还会发生变化，完整数据库备份还要对部分事务日志进行备份</li>
</ol>
<h3 id="文件备份">文件备份</h3>
<ol type="1">
<li>备份一个或多个文件或文件组中的所有数据</li>
<li>在完整恢复模式下，一整套完整文件备份+跨所有文件备份的日志备份=完整数据库备份</li>
<li>能够指定还原损坏的文件，以加快恢复速度</li>
</ol>
<h3 id="部分备份">部分备份</h3>
<ol type="1">
<li>默认只备份数据库的可读写部分</li>
</ol>
<h3 id="差异备份">差异备份</h3>
<ol type="1">
<li>要求数据库之前做过一次完整备份（基准）</li>
<li>捕获自基准以来发生改变的数据</li>
<li>便于执行频繁备份，从而降低了数据丢失的风险</li>
</ol>
<h3 id="事务日志备份">事务日志备份</h3>
<ol type="1">
<li>每个日志备份都包括创建备份时处于活动状态的部分事务日志，以及先前日志备份中未备份的所有日志记录</li>
<li>不间断的日志备份序列包含数据库的完整（即连续不断的）日志链</li>
</ol>
<h3 id="仅复制备份">仅复制备份</h3>
<p>防止将要做的备份会破坏现有的备份，维护日志链</p>
<h4 id="仅复制完整备份">仅复制完整备份</h4>
<ol type="1">
<li>备份整个数据库内容</li>
<li>但不改变差异备份的基准，不影响差异备份序列</li>
</ol>
<h4 id="仅复制日志备份">仅复制日志备份</h4>
<ol type="1">
<li>备份当前日志文件里现有的内容</li>
<li>但不会清空日志文件里备份下的日志，不影响常规日志备份的序列</li>
</ol>
<h2 id="选择备份策略和恢复模式">选择备份策略和恢复模式</h2>
<h3 id="简单恢复模式下的备份">简单恢复模式下的备份</h3>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/clip_image002.jpg"
alt="简单模式下的备份和还原策略" />
<figcaption aria-hidden="true">简单模式下的备份和还原策略</figcaption>
</figure>
<ol type="1">
<li><p>不能做日志备份</p></li>
<li><p>只能将数据库恢复到最后一次备份的结尾</p></li>
<li><p>工作损失风险会随时间增长而增加</p></li>
<li><p>可加入差异备份</p>
<ol type="1">
<li><p>建立数据库备份后，后续建立差异备份</p></li>
<li><p>可以使用在数据量稍大，能够容忍较长时间数据丢失的数据库上</p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/clip_image002-16563991129832.jpg"
alt="使用差异数据库备份补充数据库完整备份" />
<figcaption
aria-hidden="true">使用差异数据库备份补充数据库完整备份</figcaption>
</figure></li>
<li><p>无法满足较大数据库，或不允许较长时间数据丢失的情况</p></li>
</ol></li>
</ol>
<h3 id="完整恢复模式下的备份">完整恢复模式下的备份</h3>
<p>使用日志备份</p>
<ol type="1">
<li><p>日志备份只拷贝上次日志备份以来的所有日志记录，开销小</p></li>
<li><p>可以将数据库还原到日志备份内包含的任何时点</p></li>
<li><p>缺点：</p>
<ol type="1">
<li>数量多</li>
<li>需要严格按照备份产生的顺序进行恢复，管理复杂</li>
</ol></li>
<li><p>备份策略</p>
<ol type="1">
<li><p>基本</p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/clip_image002-16564066494734.jpg"
alt="完整恢复模式下的最简单备份策略" />
<figcaption
aria-hidden="true">完整恢复模式下的最简单备份策略</figcaption>
</figure>
<p>在还原这3个备份前，数据库管理员必须备份活动日志（日志尾部，即尚未备份的日志）。然后还原Db_1、Log_1和Log_2，并且不恢复数据库。接着，数据库管理员还原并恢复尾（Tail）日志备份。这一步将可以把数据库恢复到故障点，从而恢复所有数据。如果灾难毁坏的是日志文件，使得尾日志不能成功备份和恢复，那这次灾难造成的数据丢失就是从Log_2以后的所有修改。</p></li>
<li><p>加上差异备份</p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/clip_image002-16564069300966.jpg"
alt="使用差异数据库备份及日志备份来补充完整数据库备份" />
<figcaption
aria-hidden="true">使用差异数据库备份及日志备份来补充完整数据库备份</figcaption>
</figure>
<p>在第一个数据库备份完成后，每天会做一个差异数据库备份，而在工作时间进行若干日志备份。例行日志备份将工作丢失的风险降为丢失自最近日志备份之后所做的更改。</p></li>
</ol></li>
</ol>
<h3
id="案例完整恢复模式下的数据库备份">案例：完整恢复模式下的数据库备份</h3>
<p>对于数据库<code>Archive</code></p>
<ol type="1">
<li><p>全备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">BACKUP DATABASE [Archive] <span class="hljs-keyword">TO</span> DISK<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Backup\AdvFull1.bak&#x27;</span><br></code></pre></td></tr></table></figure></li>
<li><p>查询历史上的备份信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> s.first_lsn, s.last_lsn, <br>				s.database_backup_lsn, s.backup_finish_date,<br>				s.type, y.physical_device_name  <br><span class="hljs-keyword">FROM</span> msdb..backupset <span class="hljs-keyword">AS</span> s <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>msdb..backupfile <span class="hljs-keyword">AS</span> f <span class="hljs-keyword">ON</span> f.backup_set_id <span class="hljs-operator">=</span> s.backup_set_id <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>msdb..backupmediaset <span class="hljs-keyword">AS</span> m <span class="hljs-keyword">ON</span> s.media_set_id <span class="hljs-operator">=</span> m.media_set_id <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span><br>msdb..backupmediafamily <span class="hljs-keyword">AS</span> y <span class="hljs-keyword">ON</span> m.media_set_id <span class="hljs-operator">=</span> y.media_set_id<br><span class="hljs-keyword">WHERE</span>  (s.database_name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Archive&#x27;</span>) <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span>  s.backup_finish_date <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220628175642522.png"
alt="查询数据库的历史备份记录，显示一个全备份" />
<figcaption
aria-hidden="true">查询数据库的历史备份记录，显示一个全备份</figcaption>
</figure>
<ol type="1">
<li><code>first_lsn</code>备份集中第一个日志记录的日志序列号</li>
<li><code>last_lsn</code>备份集之后的下一条日志记录的日志序列号</li>
<li><code>(first_lsn, last_lsn-1)</code>
这个日志备份所包含的所有日志序列
<ol type="1">
<li><code>last_lsn-1</code>
表示前面一条日志序列号，序列号不一定以1递减</li>
</ol></li>
<li><code>(first_lsn, last_lsn)</code>表示做数据恢复时，在做roll
forward（前滚）动作时，一定要遍历的LSN</li>
<li><code>database_backup_lsn</code>
标识上一次数据库做全备份的起始LSN</li>
<li><code>Type</code>标识数据库备份的类型
<ol type="1">
<li>D(数据库)， L(日志)， I(差异数据库)，F(文件或文件组)</li>
</ol></li>
</ol></li>
<li><p>进行一个操作之后，做日志备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> TESTTABLE<br>(number <span class="hljs-type">int</span>,<br> name nvarchar(<span class="hljs-number">50</span>)<br>)<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> TESTTABLE <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>)<br>GO<br>BACKUP LOG Archive <span class="hljs-keyword">TO</span> DISK<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Backup\AdvLog2.bak&#x27;</span><br></code></pre></td></tr></table></figure>
<p>再次查询备份记录，可以看到</p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220629094538203.png"
alt="查询数据库的历史备份记录，显示一个新的日志备份" />
<figcaption
aria-hidden="true">查询数据库的历史备份记录，显示一个新的日志备份</figcaption>
</figure>
<p>新增的日志记录，而且下一次日志备份的first_lsn总是等于上一次日志备份的last_lsn，保证了连续性</p></li>
<li><p>进行一个操作，然后进行差异备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> TESTTABLE <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">3</span>, <span class="hljs-string">&#x27;cccc&#x27;</span>)<br>GO<br>BACKUP DATABASE Archive <span class="hljs-keyword">TO</span> DISK<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Backup\AdvDiff4.bak&#x27;</span> <span class="hljs-keyword">WITH</span> DIFFERENTIAL<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220629095933722.png"
alt="查询数据库的历史备份记录，显示一个差异备份" />
<figcaption
aria-hidden="true">查询数据库的历史备份记录，显示一个差异备份</figcaption>
</figure>
<p>可以看到新增了差异备份</p></li>
<li><p>在查询结果中，我们可以发现</p>
<ol type="1">
<li>不管是全备份还是差异备份，都不会影响LSN的序列
<ol type="1">
<li>只要有全备份和该全备份之后的所有日志备份，即可恢复</li>
</ol></li>
<li>日志备份的LSN是连续的</li>
</ol></li>
</ol>
<h3 id="文件或文件组备份">文件或文件组备份</h3>
<p><u>完整文件备份</u></p>
<ol type="1">
<li>备份一个或多个文件或文件组中的所有数据</li>
<li>在完整恢复模式下，一整套完整文件备份和跨所有文件备份的日志备份合起来，等同于一个完整数据库备份</li>
<li>文件备份能够只还原损坏的文件，加快恢复速度</li>
<li>文件备份在默认情况下包含足够的日志记录，可以将文件前滚至备份操作的末尾（简单模式下必须一起备份所有读/写文件）</li>
</ol>
<p><u>文件备份的优点</u></p>
<ol type="1">
<li>更快从故障恢复</li>
<li>增加了计划和媒体处理的灵活性</li>
<li>适用于超大型数据库</li>
</ol>
<p><u>文件备份的缺点</u></p>
<ol type="1">
<li>管理较复杂</li>
<li>必须维护一组完整的文件备份，否则无法恢复整个数据库</li>
<li>对于完整/大容量日志恢复模式，必须维护一个或多个日志备份，这些日志备份至少涵盖第一个完整文件备份和最后一个完整备份之间的时间间隔</li>
<li>在完整恢复模式下，恢复一个文件组备份，需要恢复文件组备份本身，并需要依次恢复从上一次完整数据库备份后，到恢复的目标时间点为止的所有日志备份以保证同步（需要恢复的事务日志备份数量庞大）</li>
</ol>
<p><u>文件备份策略</u></p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/clip_image002-16570809862958.jpg"
alt="文件组备份" />
<figcaption aria-hidden="true">文件组备份</figcaption>
</figure>
<ol type="1">
<li>最好执行完整数据库备份并在第一个文件备份开始之前开始日志备份</li>
<li>图中可看到，在创建数据库（在t0时间）之后立即执行完整数据库备份（在t1时间），事务日志备份按照设置的适合数据库业务要求的间隔执行。</li>
</ol>
<h2 id="选择数据库还原方案">选择数据库还原方案</h2>
<p>无论以何种方式还原数据，在恢复数据库前，SQL
Server数据库引擎都会保证整个数据库在逻辑上的一致性。例如，还原一个文件以后，必须恢复完整的一套日志文件备份，以便将该文件里的事务前滚足够长度，与数据库保持一致，才能恢复该文件并使其在线。</p>
<p><u>不同恢复模式所支持的各种还原方案</u></p>
<table>

<thead>
<tr class="header">
<th>还原方案</th>
<th>在简单恢复模式下</th>
<th>在完整/大容量日志恢复模式下</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据库 完整还原</td>
<td>这是基本的还原策略。
　数据库完整还原可能涉及完整数据库备份的简单还原和恢复。另外，完整的数据库还原还可能涉及还原完整数据库备份，以及还原和恢复差异备份</td>
<td>这是基本的还原策略。数据库完整还原涉及还原完整数据库备份或差异备份（如果有），以及还原所有后续日志备份（按顺序）。通过恢复并还原上一次日志备份(RESTORE
WITH RECOVERY)，完成数据库完整还原,过程中数据库处于离线状态</td>
</tr>
<tr class="even">
<td>文件还原</td>
<td>只能还原损坏的只读文件，但不还原整个数据库。所以实用性不是很强</td>
<td>能够还原一个或多个文件，而不还原整个数据库。可以在数据库处于离线状态或数据库保持在线状态（对于SQL
Server
2005的某些版本）时执行文件还原。在文件还原过程中，包含正在还原的文件的文件组一直处于离线状态。其他文件组有可能被访问</td>
</tr>
<tr class="odd">
<td>页面还原</td>
<td>不适用</td>
<td>还原损坏的页面。可以在数据库处于离线状态或数据库保持在线状态（对于SQL
Server
的企业版）时执行页面还原。在页面还原过程中，正在还原的页面一直处于离线状态。
　必须具有完整的日志备份链（包含当前日志文件），并且必须恢复所有这些日志备份，以使页面与当前日志文件保持一致</td>
</tr>
<tr class="even">
<td>段落还原</td>
<td>按文件组级别并从主文件组和所有读写辅助文件组开始，分阶段还原和恢复数据库</td>
<td>按文件组级别并从主文件组开始，分阶段还原和恢复数据库</td>
</tr>
</tbody>
</table>
<p><u>每种恢复模式支持的还原方案以及适用范围</u></p>
<table>

<thead>
<tr class="header">
<th>还原操作</th>
<th>完整恢复模式</th>
<th>大容量日志恢复模式</th>
<th>简单恢复模式</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>数据还原</td>
<td>完整还原（如果日志可用）</td>
<td>某些数据将丢失</td>
<td>自上次完整备份或差异备份后的任何数据将丢失</td>
</tr>
<tr class="even">
<td>时点还原</td>
<td>日志备份所涵盖的任何时间</td>
<td>日志备份包含任何大容量日志更改时不允许</td>
<td>不支持</td>
</tr>
<tr class="odd">
<td>文件还原*</td>
<td>完全支持</td>
<td>不完全支持</td>
<td>仅对只读辅助文件可用</td>
</tr>
<tr class="even">
<td>页面还原*</td>
<td>完全支持</td>
<td>不完全支持</td>
<td>无</td>
</tr>
<tr class="odd">
<td>段落还原*</td>
<td>完全支持</td>
<td>不完全支持</td>
<td>仅对只读辅助文件可用</td>
</tr>
</tbody>
</table>
<p>* 仅适用于SQL Server企业版</p>
<h3 id="数据库完整还原">数据库完整还原</h3>
<p>将一个数据库从无到有，完整地还原出来，是最常使用的还原操作。在简单情况下，还原操作只需要一个完整数据库备份、一个差异数据库备份和后续日志备份。</p>
<p><u>数据库恢复到故障点的基本步骤</u></p>
<p>数据库需满足：</p>
<ol type="1">
<li>恢复模式必须是完整恢复模式
<ol type="1">
<li>如果源数据库是简单模式，则没有相应的日志备份</li>
</ol></li>
<li>灾难发生前，数据库曾经做过一个完整数据库备份（或有一套完整的文件备份）。</li>
<li>在上次完整数据库备份后，做过的任何日志备份每个都能找到</li>
</ol>
<p>步骤：</p>
<ol type="1">
<li><p>备份活动事务日志（也称为日志尾部）。</p></li>
<li><p>还原最新完整数据库备份，而且不做事务恢复<code>RESTORE DATABASE *database_name* FROM *backup_device* WITH NORECOVERY</code></p></li>
<li><p>如果存在差异备份，则还原最新的差异备份，而不做事务恢复<code>WITH NORECOVERY</code></p></li>
<li><p>从还原备份后创建的第一个事务日志备份开始，使用<code>NORECOVERY</code>依次还原日志</p></li>
<li><p>恢复数据库到某个时间点<code>RESTORE DATABASE *database_name* WITH STOPAT='????????', RECOVERY</code>。此步骤也可以与还原上一次日志备份结合使用</p></li>
</ol>
<p>实例：
恢复AdventureWorks数据库，在此示例之前，数据库已经做过一个数据库完整备份和一个日志备份。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">--灾难发生后，试图创建一个尾日志备份</span><br>BACKUP LOG AdventureWorks <br><span class="hljs-keyword">TO</span> DISK <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z:\SQLServerBackups\AdventureWorks.bak&#x27;</span><br>   <span class="hljs-keyword">WITH</span> NORECOVERY; <br>GO<br><span class="hljs-comment">--从备份恢复一个全备份</span><br>RESTORE DATABASE AdventureWorks <br>  <span class="hljs-keyword">FROM</span> DISK <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z:\SQLServerBackups\AdventureWorks.bak&#x27;</span> <br>  <span class="hljs-keyword">WITH</span> FILE<span class="hljs-operator">=</span><span class="hljs-number">1</span>, <br>    NORECOVERY;<br><br><span class="hljs-comment">--从备份中恢复一个正常的日志备份</span><br>RESTORE LOG AdventureWorks <br>  <span class="hljs-keyword">FROM</span> DISK <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z:\SQLServerBackups\AdventureWorks.bak&#x27;</span> <br>  <span class="hljs-keyword">WITH</span> FILE<span class="hljs-operator">=</span><span class="hljs-number">2</span>, <br>    NORECOVERY;<br><br><span class="hljs-comment">--用STOPAT恢复尾日志备份</span><br>RESTORE LOG AdventureWorks <br>  <span class="hljs-keyword">FROM</span> DISK <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Z:\SQLServerBackups\AdventureWorks.bak&#x27;</span><br>  <span class="hljs-keyword">WITH</span> FILE<span class="hljs-operator">=</span><span class="hljs-number">3</span>, STOPAT<span class="hljs-operator">=</span><span class="hljs-string">&#x27;XXXX xx:xx:xx&#x27;</span>,<br>   RECOVERY;<br>GO<br></code></pre></td></tr></table></figure>
<p><u>完整还原优点</u></p>
<ol type="1">
<li>管理和执行都比较简单</li>
<li>是最广泛使用的还原方案</li>
</ol>
<p><u>完整还原缺点</u></p>
<ol type="1">
<li>数据库的完整备份恢复耗时太长</li>
<li>完整备份大小占空间</li>
</ol>
<h3 id="文件还原">文件还原</h3>
<p><u>从文件备份和差异文件备份中还原一个或多个受损文件的基本步骤</u></p>
<ol type="1">
<li>创建活动事务日志的尾日志备份
<ol type="1">
<li>对于离线文件还原，在文件还原之前必须先进行一次尾日志备份</li>
<li>对于在线文件还原，在文件还原之后必须先进行一次日志备份</li>
</ol></li>
<li>从每个损坏的文件的最新文件备份还原相应文件</li>
<li>针对每个还原的文件，还原最近的差异文件备份（如果有）。</li>
<li>按顺序还原事务日志备份，从覆盖最早还原文件的备份开始，到在步骤1中创建的尾日志备份结束。</li>
</ol>
<p><u>示例</u></p>
<p>数据库abc（完整恢复模式）包含三个文件组，文件组A为读/写文件组，而文件组B和C是只读的。最初，所有文件组都处于在线状态。现在文件组A中的文件a1已损坏，数据库管理员决定在数据库处于在线状态时还原该文件。</p>
<ol type="1">
<li><p>在线还原文件a1</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE adb FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;a1&#x27;</span> <span class="hljs-keyword">FROM</span> backup <span class="hljs-keyword">WITH</span> NORECOVERY<br></code></pre></td></tr></table></figure>
<p>文件a1处于RESTORING状态，文件组A处于离线状态</p></li>
<li><p>进行新的日志备份以确保捕获到该文件离线时的点</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 之前曾经做过两次日志备份</span><br>BACKUP LOG adb <span class="hljs-keyword">TO</span> log_backup3 <span class="hljs-keyword">WITH</span> COPY_ONLY<br></code></pre></td></tr></table></figure></li>
<li><p>在线还原日志备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE LOG adb <span class="hljs-keyword">FROM</span> log_backup1 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> log_backup2 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> log_backup3 <span class="hljs-keyword">WITH</span> RECOVERY<br></code></pre></td></tr></table></figure>
<p>文件a1现处于在线状态。数据库恢复完成</p></li>
</ol>
<h3 id="页面还原">页面还原</h3>
<p>页面还原用于修复隔离的损坏页。页面还原仅可以还原数据页。</p>
<p><u>不能使用页面还原的内容</u></p>
<ol type="1">
<li>事务日志</li>
<li>分配页：全局分配映射（GAM）页、共享全局分配映射（SGAM）页和页可用空间（PFS）页</li>
<li>所有数据文件的页0（文件启动页）</li>
<li>页1:9（数据库启动页）</li>
<li>全文目录（Fulltext search catalog）</li>
</ol>
<p><u>使用页面还原的要求</u></p>
<ol type="1">
<li>数据库必须使用完整恢复模式。使用大容量日志恢复模式时可能不能成功。简单恢复模式无法使用这一功能。</li>
<li>只读文件组中的页面无法还原</li>
<li>还原顺序必须从完整备份、文件备份或文件组备份中恢复页面开始</li>
<li>页面还原需要截止到当前日志文件的连续（无截断）日志备份，并且必须恢复所有这些日志备份后，页才能恢复到当前正常状态</li>
<li>数据库备份和页面还原不能同时运行</li>
</ol>
<p><u>页面还原的基本步骤</u></p>
<ol type="1">
<li>获取要还原的损坏页的页ID
<ol type="1">
<li>查询msdb数据库里的<code>suspect_pages</code>表</li>
<li>查询监视事件和SQL Server errorlog文件里所报出的错误信息</li>
</ol></li>
<li>从包含页的完整数据库备份、文件备份或文件组备份开始进行页面还原</li>
<li>应用最近的差异备份</li>
<li>应用后续日志备份</li>
<li>创建新的数据库尾日志备份</li>
<li>还原新的尾日志备份</li>
</ol>
<p><u>示例</u></p>
<p>使用NORECOVERY还原文件B的4个损坏页。随后，将使用NORECOVERY应用两个日志备份，然后是尾日志备份（使用RECOVERY还原）。文件B的文件ID为1，损坏的页的页ID分别为57、202、916和1016。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> PAGE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;1:57, 1:202, 1:916, 1:1016&#x27;</span><br>   <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>file_backup_of_file_B<span class="hljs-operator">&gt;</span> <br>   <span class="hljs-keyword">WITH</span> NORECOVERY;<br>RESTORE LOG <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>log_backup<span class="hljs-operator">&gt;</span> <br>   <span class="hljs-keyword">WITH</span> NORECOVERY;<br>RESTORE LOG <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>log_backup<span class="hljs-operator">&gt;</span> <br>   <span class="hljs-keyword">WITH</span> NORECOVERY; <br>BACKUP LOG <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">TO</span> <span class="hljs-operator">&lt;</span>new_log_backup<span class="hljs-operator">&gt;</span> <br>RESTORE LOG <span class="hljs-operator">&lt;</span>database<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">FROM</span> <span class="hljs-operator">&lt;</span>new_log_backup<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">WITH</span> RECOVERY;<br>GO<br></code></pre></td></tr></table></figure>
<h3 id="段落还原">段落还原</h3>
<p>段落还原包括从主文件组开始的一系列还原顺序，有时也可以从一个或多个辅助文件组开始。在还原顺序结束后，如果恢复的文件有效并且与数据库一致，则恢复的文件将能直接变为在线状态，恢复用户访问。</p>
<p><u>离线段落还原方案</u></p>
<ol type="1">
<li>数据库在部分还原顺序之后处于在线状态</li>
<li>尚未还原的文件组保持离线状态，而数据库必须进入离线状态后，才能继续还原没有还原的文件组</li>
</ol>
<p><u>在线段落还原方案</u></p>
<ol type="1">
<li>SQL Server 企业版</li>
<li>数据库在完成部分还原顺序后，主文件组已经被恢复，它和所有其他已恢复的辅助文件组都处于可用状态，数据库进入在线状态，用户可以访问</li>
<li>尚未还原的文件组保持离线状态，而后面还原这些文件组时，数据库还能保持在线状态</li>
<li>如果仅还原了一部分文件组，则数据库和这些文件组有关的事务可能会被挂起，影响一部分数据页面的访问</li>
</ol>
<p>在简单恢复模式下，可以被推迟恢复的只有只读文件组。</p>
<p>在完整恢复模式或大容量日志恢复模式下，任何包含多个文件组的数据库都可以使用段落还原，并且可以将数据库还原到任何时间点。</p>
<p><u>段落还原顺序</u></p>
<ol type="1">
<li><p>部分还原顺序</p>
<p>第一个RESTORE DATABASE语句必须执行以下操作：</p>
<ol type="1">
<li>指定PARTIAL选项（只能指定一次）</li>
<li>使用包含主文件组的任何完整数据库备份，还原部分备份来启动部分还原顺序。</li>
<li>若要还原到特定的时间点，必须在部分还原顺序中指定该时间。还原顺序的每个后续步骤都必须指定相同的时间点</li>
</ol></li>
<li><p>文件组还原顺序会使其他文件组在线并处于与数据库一致的某个点</p>
<ol type="1">
<li>如果特定只读文件未损坏且与数据库一致，则该文件无须还原。</li>
<li>如果在文件备份创建之前，只读文件组就已处于只读状态，则该文件组无须应用日志备份，并且文件还原会跳过日志备份的应用过程。</li>
<li>如果文件组是读/写文件组，则必须将未中断的日志备份链应用于上一次完整还原或差异还原，文件组才能前进到当前的日志文件</li>
</ol></li>
</ol>
<p><u>段落还原的优点</u></p>
<ol type="1">
<li>能帮助让最重要的数据最先上线</li>
<li>能允许在数据库恢复其他文件组的时候，先前已恢复的文件组仍保持在线状态</li>
</ol>
<p><u>示例</u></p>
<p>数据库adb将在发生灾难性事件后还原到一台新计算机。该数据库使用完整恢复模式。发生灾难性事件前所有文件组都处于在线状态。文件组B是只读的。必须还原所有辅助文件组，但这些辅助文件组将按重要性顺序进行还原：A最高，其次是C，最后是B。在此示例中，存在4个日志备份，其中包括尾日志备份。</p>
<ol type="1">
<li><p>备份日志尾部（是后面还原顺序中将要应用的最后一个备份）</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 数据库已损坏，因此创建尾日志备份要使用NO_TRUNCATE选项</span><br>BACKUP LOG adb <span class="hljs-keyword">TO</span> tailLogBackup <span class="hljs-keyword">WITH</span> NORECOVERY, NO_TRUNCATE<br></code></pre></td></tr></table></figure></li>
<li><p>还原顺序</p>
<ol type="1">
<li><p>部分还原主文件组和辅助文件组A</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE adb FILEGROUP<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Primary&#x27;</span> <span class="hljs-keyword">FROM</span> backup1 <br>   <span class="hljs-keyword">WITH</span> PARTIAL, NORECOVERY<br>RESTORE DATABASE adb FILEGROUP<span class="hljs-operator">=</span><span class="hljs-string">&#x27;A&#x27;</span> <span class="hljs-keyword">FROM</span> backup2 <br>   <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup3 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup4 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup5 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> tailLogBackup <span class="hljs-keyword">WITH</span> RECOVERY<br></code></pre></td></tr></table></figure>
<ol type="1">
<li>主文件组和辅助文件组A处于在线状态</li>
<li>文件组B和C中的所有文件都处于恢复挂起状态，处于离线状态。</li>
<li>步骤1中的最后一条RESTORE
LOG语句的消息会指出：由于文件组C不可用，因此涉及此文件组的事务回滚已延迟</li>
</ol></li>
<li><p>在线还原文件组C</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE adb FILEGROUP<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C&#x27;</span> <span class="hljs-keyword">FROM</span> backup2a <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup3 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup4 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> backup5 <span class="hljs-keyword">WITH</span> NORECOVERY<br>RESTORE LOG adb <span class="hljs-keyword">FROM</span> tailLogBackup <span class="hljs-keyword">WITH</span> RECOVERY<br></code></pre></td></tr></table></figure>
<ol type="1">
<li>主文件组及文件组A和C处于在线状态</li>
<li>文件组B中的文件处于恢复挂起状态，该文件组处于离线状态</li>
<li>解析延迟的事务后，日志被截断</li>
</ol></li>
<li><p>在线还原文件组B</p>
<p>文件组B的备份是在该文件组变为只读状态之后进行的，因此，在恢复过程中无须再恢复日志备份。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE adb FILEGROUP<span class="hljs-operator">=</span><span class="hljs-string">&#x27;B&#x27;</span> <span class="hljs-keyword">FROM</span> backup2b <span class="hljs-keyword">WITH</span> RECOVERY<br></code></pre></td></tr></table></figure>
<p>所有文件组现在都处于在线状态</p></li>
</ol>
<h3 id="孤立用户故障排除">孤立用户故障排除</h3>
<p><u>SQL Server的用户安全管理</u></p>
<ol type="1">
<li><p>服务器层</p>
<ol type="1">
<li><p>登录账号（Login）</p></li>
<li><p>管理整个SQL Server服务器，开启跟踪，修改SQL
Server安全配置，备份所有数据库等</p></li>
<li><p>所有登录账号的信息，存放在master数据库里</p>
<ol type="1">
<li><p>查询<code>sys.server_principals</code></p>
<figure>
<img
src="/2022/07/29/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%A4%87%E4%BB%BD%E4%B8%8E%E6%81%A2%E5%A4%8D/image-20220707101818615.png"
alt="查询sys.server_principals" />
<figcaption aria-hidden="true">查询sys.server_principals</figcaption>
</figure></li>
</ol></li>
<li><p>每个登录账号都有一个唯一编号SID</p>
<ol type="1">
<li>对于Windows Login, SID就是Windows用户在域里的SID</li>
<li>对于SQL Login, 会随机生成SID，每次生成的SID都有可能不一样</li>
</ol></li>
</ol></li>
<li><p>数据库层</p>
<ol type="1">
<li>数据库用户（Database User）</li>
<li>可以设置它对这个特定的数据库有读写、修改表格结构、存储过程定义等权限</li>
<li>查询<code>sys.database_principals</code>了解用户信息</li>
<li>每个数据库用户除了名字，也有一个唯一的SID</li>
</ol></li>
<li><p>SQL
Server登录账户必须要和某个数据库用户相对应后，才能被数据库接纳</p>
<ol type="1">
<li>即用户数据库sys.database_principals里的SID和master数据库sys.server_principals里的SID匹配</li>
<li>对于Windows登录账号，如果新的服务器和原先的服务器在同一个域里，那么同样的Windows登录账号会有一样的SID</li>
<li>对于SQL登录账号，当用户数据库恢复到新的服务器上后，master数据库sys.server_principals里并没有这个账号，但是用户数据库里还是有“test”这个数据库用户，于是这个用户被“孤立”了</li>
</ol></li>
<li><p>检测孤立用户</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">USE <span class="hljs-operator">&lt;</span>database_name<span class="hljs-operator">&gt;</span>;<br>GO; <br><span class="hljs-keyword">EXEC</span> sp_change_users_login <span class="hljs-string">&#x27;Report&#x27;</span>;<br></code></pre></td></tr></table></figure></li>
<li><p>链接孤立用户</p>
<ol type="1">
<li><p>SQL登录账号</p>
<ol type="1">
<li><p>创建相应的SQL登陆账号</p></li>
<li><p>使用命令重新链接服务器登录账户与数据库用户，修改SID为一致</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">USE <span class="hljs-operator">&lt;</span>database_name<span class="hljs-operator">&gt;</span>;<br>GO<br><span class="hljs-keyword">EXEC</span> sp_change_users_login <span class="hljs-variable">@Action</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;update_one&#x27;</span>, <span class="hljs-variable">@UserNamePattern</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&lt;database_user&gt;&#x27;</span>, <span class="hljs-variable">@LoginName</span><span class="hljs-operator">=</span><span class="hljs-string">&#x27;&lt;login_name&gt;&#x27;</span>;<br></code></pre></td></tr></table></figure></li>
</ol></li>
<li><p>Windows登录账号</p>
<ol type="1">
<li>如果SID不同，说明域也发生了变化</li>
<li>Windows服务器登录账户和数据库用户是不能强制链接在一起的</li>
</ol></li>
</ol></li>
</ol></li>
</ol>
<h2 id="系统数据库备份与恢复">系统数据库备份与恢复</h2>
<p>每次进行过系统更新后，都必须备份多个系统数据库</p>
<p>有任何数据库在服务器实例上使用了复制，则还必须备份distribution系统数据库</p>
<table>

<thead>
<tr class="header">
<th>系统数据库</th>
<th>说　　明</th>
<th>是否支 持备份</th>
<th>恢复 模式</th>
<th>注　　释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>master</td>
<td>记录SQL Server系统的所有系统级信息的数据库</td>
<td>支持</td>
<td>简单</td>
<td>必须经常备份master数据库，以便根据业务需要充分保护数据。建议使用定期备份计划，这样在大量更新之后可以补充更多的备份</td>
</tr>
<tr class="even">
<td>model</td>
<td>在SQL Server实例上为所有数据库创建的模板</td>
<td>支持</td>
<td>用户 可配置</td>
<td>仅在业务需要时备份model数据库，例如自定义其数据库选项后立即备份。
最佳方法：建议您仅根据需要创建model数据库的完整数据库备份。由于model数据库较小而且很少更改，因此无须备份日志</td>
</tr>
<tr class="odd">
<td>msdb</td>
<td>SQL
Server代理用来安排警报和作业以及记录操作员信息的数据库。msdb数据库还包含历史记录表，例如备份和还原历史记录表</td>
<td>支持</td>
<td>简单 （默认值）</td>
<td>更新时备份msdb数据库</td>
</tr>
<tr class="even">
<td>Resource（RDB）</td>
<td>包含SQL Server附带的所有系统对象副本的只读数据库</td>
<td>不支持</td>
<td>—</td>
<td>Resource数据库位于mssqlsy-
stemresource.mdf文件中，该文件仅包含代码。因此，SQL
Server不能备份Resource数据库</td>
</tr>
<tr class="odd">
<td>tempdb</td>
<td>用于保存临时或中间结果集的工作空间。每次启动SQL
Server实例时都会重新创建此数据库。服务器实例关闭时，将永久删除tempdb数据库中的所有数据</td>
<td>不支持</td>
<td>简单</td>
<td>无法备份tempdb系统数据库</td>
</tr>
<tr class="even">
<td>distribution</td>
<td>只有将服务器配置为复制分发服务器时才存在此数据库。此数据库存储元数据、各种复制的历史记录数据以及用于事务复制的事务</td>
<td>支持</td>
<td>简单</td>
<td>根据您具体的复制配置决定</td>
</tr>
</tbody>
</table>
<h3 id="master数据库">master数据库</h3>
<p>建议经常做master的完整数据库备份</p>
<p><u>Master数据库包含的信息</u></p>
<ol type="1">
<li>SQL
Server系统的所有系统级信息，例如登录账户、系统配置设置、端点和凭据以及访问其他数据库服务器所需的信息</li>
<li>记录启动服务器实例所需的初始化信息，每个其他数据库的主文件位置</li>
<li>是SQL Server启动的时候打开的第一个数据库</li>
</ol>
<p><u>重建master数据库</u></p>
<ol type="1">
<li>如果由于master数据库损坏严重到无法启动服务器实例，又没有备份，则必须重建</li>
<li>重建master数据库将使所有的系统数据库恢复到其原始状态，SQL
Server就像被重装过一样</li>
</ol>
<p><u>导致master数据库更新并要求进行备份的操作类型</u></p>
<ol type="1">
<li>创建或删除用户数据库
<ol type="1">
<li>用户数据库自动增长以容纳新数据时，master数据库不受影响</li>
</ol></li>
<li>添加或删除文件和文件组</li>
<li>添加登录或其他与登录安全相关的操作
<ol type="1">
<li>数据库层面的安全操作（如向数据库中添加用户）对master数据库没有影响</li>
</ol></li>
<li>更改服务器范围的配置选项或数据库配置选项</li>
<li>创建或删除逻辑备份设备</li>
<li>配置用于分布式查询和远程过程调用（RPC）的服务器，如添加链接服务器或远程登录</li>
</ol>
<p><u>恢复master数据库</u></p>
<ol type="1">
<li>RESTOR</li>
<li>还原master数据库后，SQL Server实例将自动停止</li>
<li>将master数据库恢复到一台新的服务器上时，文件地址会发生变化，需要使用单用户模式启动SQL
Server，将master数据库里的信息修改成新的地址
<ol type="1">
<li>单用户模式重新启动服务器时，应首先停止所有SQL
Server服务（服务器实例本身除外），并停止所有SQL Server实用工具</li>
</ol></li>
</ol>
<h3 id="model数据库">model数据库</h3>
<ol type="1">
<li>model数据库是SQL Server使用的模板</li>
<li>model数据库的全部内容（包括数据库选项）都会被复制到新的数据库</li>
<li>不推荐做任何修改，不要把任何用户数据放在这个数据库里</li>
<li>还原model数据库与对用户数据库执行完整的数据库还原相同</li>
</ol>
<h3 id="msdb数据库">msdb数据库</h3>
<ol type="1">
<li>存储数据，包括计划信息以及备份与还原历史记录信息</li>
<li>SQL
Server将在msdb数据库中自动维护一份完整的在线备份与还原历史记录</li>
<li>默认情况下，msdb数据库使用简单恢复模式</li>
<li>如果在恢复用户数据库时使用msdb数据库中的备份与还原历史记录信息，建议对msdb数据库使用完整恢复模式</li>
</ol>
<h3 id="tempdb">tempdb</h3>
<ol type="1">
<li>每次启动SQL Server时都会重新创建tempdb数据库</li>
<li>不需要备份</li>
</ol>
<h3 id="资源数据库resource-database">资源数据库（Resource
Database）</h3>
<ol type="1">
<li>只读数据库</li>
<li>包含了SQL
Server中的所有系统对象，不包含任何用户数据或用户元数据</li>
<li>对于同一个版本的SQL Server，它们的Resource数据库应该都是一样的</li>
<li>物理文件名：mssqlsystemresource.mdf和mssqlsystemresource.ldf</li>
<li>每个SQL
Server实例都有且只有一个关联的mssqlsystemresource.mdf文件，并且实例间不共享此文件</li>
<li>理论上不用备份Resource数据库，但是最好做基于文件的备份或基于磁盘的备份，恢复时注意版本问题</li>
</ol>
<h2
id="带有filestream功能的数据库备份和恢复">带有FILESTREAM功能的数据库备份和恢复</h2>
<p>对于有FILESTREAM功能的数据库，在进行备份和恢复时，会自动包含FILESTREAM数据，并不需要额外做文件级别的备份和恢复。</p>
<ol type="1">
<li><p>启动FILESTREAM</p>
<ol type="1">
<li><p>打开数据库的配置管理器，找到数据库服务，并右键点击属性。找到FILESTREAM的设置，启用FILESTREAM</p></li>
<li><p>执行语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> sp_configure filestream_access_level, <span class="hljs-number">2</span><br>RECONFIGURE<br></code></pre></td></tr></table></figure></li>
<li><p>重新启动数据库服务</p></li>
</ol></li>
<li><p>创建TESTDB，指定文件组</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE TESTFSDB<br>GO<br><br><span class="hljs-keyword">ALTER</span> DATABASE TESTFSDB <br><span class="hljs-keyword">ADD</span> FILEGROUOP [FSGroup] <span class="hljs-keyword">CONTAINS</span> FILESTREAM<br>GO<br><br><span class="hljs-keyword">ALTER</span> DATABASE TESTFSDB<br><span class="hljs-keyword">ADD</span> FILE (NAME<span class="hljs-operator">=</span>N’FSDATA’, FILENAME<span class="hljs-operator">=</span>N’D:\FSData’) <span class="hljs-keyword">TO</span> FILEGROUP FSGroup<br>GO<br></code></pre></td></tr></table></figure></li>
<li><p>创建表并开启FILESTREAM功能</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">use TESTFSDB<br>go<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> FSTable<br>(<br>[Id] [uniqueidentifier] ROWGUIDCOL <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">UNIQUE</span>, <br>[FileName] NVARCHAR(<span class="hljs-number">100</span>) ,<br>[BlobData] <span class="hljs-type">VARBINARY</span>(MAX) FILESTREAM <span class="hljs-keyword">NULL</span><br>)<br></code></pre></td></tr></table></figure></li>
<li><p>插入数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> FSTable<br><span class="hljs-keyword">SELECT</span> NEWID(), <span class="hljs-string">&#x27;File1&#x27;</span>, <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <br>OPENROWSET(BULK N<span class="hljs-string">&#x27;D:\temp\Image.jpg&#x27;</span>, SINGLE_BLOB) <span class="hljs-keyword">AS</span> Document<br><br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> FSTable<br><span class="hljs-keyword">SELECT</span> NEWID(), <span class="hljs-string">&#x27;File2&#x27;</span>, <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> <br>OPENROWSET(BULK N<span class="hljs-string">&#x27;D:\temp\Image.jpg&#x27;</span>, SINGLE_BLOB) <span class="hljs-keyword">AS</span> Document<br></code></pre></td></tr></table></figure></li>
<li><p>备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">BACKUP DATABASE [TESTFSDB] <span class="hljs-keyword">TO</span> DISK<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\temp\TESTFSDB.bak&#x27;</span><br>BACKUP LOG [TESTFSDB] <span class="hljs-keyword">TO</span> DISK<span class="hljs-operator">=</span><span class="hljs-string">&#x27;C:\temp\TESTFSDB.bak&#x27;</span><br></code></pre></td></tr></table></figure></li>
<li><p>我们关闭数据库服务，并且删除整个D:。随后，重新启动数据库服务，并依据TESTFSDB.bak文件对数据库TESTFSDB进行恢复。</p></li>
<li><p>我们会发现，D:。并且查询表FSTable，我们能得到正确的数据。</p></li>
</ol>
<p>## 应对由于备份损坏导致的还原错误</p>
<ol type="1">
<li><p>忽略错误继续执行操作</p>
<ol type="1">
<li><p>使用CONTINUE_AFTER_ERROR，使还原操作跳过错误继续进行，并还原SQL
Server现在所能还原的所有内容</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">RESTORE DATABASE database_name <br><span class="hljs-keyword">FROM</span> backup_device <span class="hljs-keyword">WITH</span> CONTINUE_AFTER_ERROR, [ NORECOVERY ]<br></code></pre></td></tr></table></figure></li>
<li><p>如果错误发生在一些比较关键的地方，比如某个数据文件的文件头信息，那么恢复还是有可能完全失败，数据库无法恢复</p></li>
<li><p>在忽略错误后，使用DBCC CHECKDB（WITH TABLOCK）修复数据库</p></li>
</ol></li>
<li><p>建立备用（Standby）服务器</p>
<ol type="1">
<li>将做好的备份使用Log
Shipping或者其他类似的机制在备用服务器上预先恢复好</li>
</ol></li>
</ol>
<h2
id="实例将数据库系统在一台新服务器上恢复">实例：将数据库系统在一台新服务器上恢复</h2>
<p>假设现在管理员遇到了下面这些挑战：</p>
<ul>
<li><p>原先服务器出现硬件故障，已经无法启动。需要将整个SQL
Server系统紧急迁移到一台备用服务器上。（备用服务器名字叫sqlserverpc，SQL
Server是默认实例。）</p></li>
<li><p>备用服务器和原服务器不同名，SQL
Server安装的路径也不一样。（备用服务器安装路径为C:FilesSQL
Server.4。）</p></li>
<li><p>因为良好的备份策略，现在手头有最新的master、msdb和model数据库备份，以及其他所有用户数据库备份。</p></li>
<li><p>现在需要将系统数据库恢复，以还原所有数据库系统信息（用户、密码、任务等）。然后才能恢复用户数据库。</p></li>
</ul>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 实施与管理实战指南Note：数据库空间管理</title>
    <url>/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="sql-server-2012-实施与管理实战指南note数据库空间管理">SQL Server
2012 实施与管理实战指南Note：数据库空间管理</h1>
<p>数据库以数据文件和日志文件的形式保存。</p>
<p>在数据库空间管理上经常会遇到的问题：</p>
<ol type="1">
<li>数据文件（Data File）空间用尽</li>
<li>日志文件（Log File）不停增长。</li>
<li>数据文件空间无法收缩</li>
<li>自动增长（Auto grow）和自动收缩（Auto shrink）。</li>
</ol>
<h2 id="数据文件的空间使用和管理">数据文件的空间使用和管理</h2>
<p>数据文件类型：</p>
<ol type="1">
<li><p>主数据文件<code>.mdf</code></p>
<p>存储指向数据库中的其他文件路径</p>
<p>每个数据库都有一个主数据文件</p></li>
<li><p>辅助数据文件<code>.ndf</code></p>
<ol type="1">
<li><p>name（逻辑文件名）</p>
<p>文件在SQL Server里的名字，符合SQL Server标识符规则，唯一。</p></li>
<li><p>physical_name（物理文件名）</p>
<p>文件在操作系统里的名字和路径，符合操作系统文件命名规则</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002.jpg"
alt="数据库的逻辑文件名和物理文件名" />
<figcaption
aria-hidden="true">数据库的逻辑文件名和物理文件名</figcaption>
</figure></li>
</ol></li>
</ol>
<h3 id="数据文件存储结构">数据文件存储结构</h3>
<p>页（Page）</p>
<ol type="1">
<li><p>SQL Server中数据存储的基本单位是页</p></li>
<li><p>数据文件占据的磁盘空间从逻辑上划分成页（0到n连续编号）</p></li>
<li><p>SQL Server读取或写入数据的最小单位是以8 KB为单位的页</p></li>
<li><p>页头</p>
<ol type="1">
<li>每页开头的96字节</li>
<li>储存包括页码，页类型，页的可用空间，拥有该页的对象的分配单元ID等有关页的系统信息</li>
</ol></li>
<li><p>不同类型的数据，存储在不同类型的页面里</p>
<table>

<thead>
<tr class="header">
<th>页 类 型</th>
<th>内　　容</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Global Allocation Map(GAM)</td>
<td>GAM在数据文件中的第三个页上。文件和页编号为(1:2)。它用bit位来标识相应的区(extents)是否已经被分配。它差不多能标识约64000个区(8k
page * 8 bits per
byte)。也就是4G的空间。如果数据空间超过4G，那么数据库会用另外一个GAM页来标识下一个4G空间。
Bit=1: 标识当前的区是空闲的，可以用来分配 Bit=0:
标识当前的区已经被数据使用了。</td>
</tr>
<tr class="even">
<td>Shared Global Allocation Map (SGAM)</td>
<td>SGAM在数据文件中的第四个页上。文件和页编号为(1:3)。它的结构和GAM是一样的。区别在于Bit位的含义不同。
Bit=1: 区是混合区，且区内至少有一个页是可以被用来分配的 Bit=0:
区是统一区，或者是混合区但区内所有的页都是在被使用的</td>
</tr>
<tr class="odd">
<td>Page Free Space</td>
<td>存储本数据文件里所有页分配和页的可用空间的信息。</td>
</tr>
<tr class="even">
<td>Index Allocation Map</td>
<td>表或索引所使用的区的信息</td>
</tr>
<tr class="odd">
<td>Bulk Changed Map</td>
<td>自最后一条BACKUP LOG语句之后的大容量操作所修改的区的信息</td>
</tr>
<tr class="even">
<td>Differential Changed Map</td>
<td>自最后一条BACKUP DATABASE语句之后更改的区的信息</td>
</tr>
<tr class="odd">
<td>Data</td>
<td>用来存放数据</td>
</tr>
<tr class="even">
<td>Row Overflow Page</td>
<td>当一条记录超过8000字节的时，这时候就要借助Row Overflow
Page用来存放超出部分的数据</td>
</tr>
<tr class="odd">
<td>LOB</td>
<td>用来存放大型对象数据类型：text、ntext、image、nvarchar(max)、varchar(max)、varbinary(max)和xml数据。</td>
</tr>
</tbody>
</table></li>
<li><p>数据页结构</p>
<ol type="1">
<li><p>在正常页上，数据行紧接着页的标头按顺序放置。</p></li>
<li><p>页的末尾是行偏移量表，对于页中的每一行，每个行偏移表都包含一个条目。</p></li>
<li><p>每个条目记录对应行的第一个字节与页首的距离。</p></li>
<li><p>行偏移表中的条目的顺序与页中行的顺序相反</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-16551059962499.jpg"
alt="页的结构" />
<figcaption aria-hidden="true">页的结构</figcaption>
</figure></li>
</ol></li>
</ol>
<p>区（Extent）</p>
<ol type="1">
<li>8个物理上连续的页的集合，用于管理页</li>
<li>统一区
<ol type="1">
<li>区内的8个页属于同一个表</li>
</ol></li>
<li>混合区
<ol type="1">
<li>区内的8个页分别属于至少两个不同的表</li>
</ol></li>
<li>一个数据文件可以包含多个表</li>
</ol>
<p>一个数据文件可能的结构：</p>
<p>大多数页面为Data、Text、Image类型，数据文件开头多为管理页面</p>
<table style="width:100%;">

<thead>
<tr class="header">
<th>页名</th>
<th>Header</th>
<th>PFS</th>
<th>GAM</th>
<th>SGAM</th>
<th>Unused</th>
<th>Unused</th>
<th>DCM</th>
<th>BCM</th>
<th>…</th>
<th>Data</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>页号</td>
<td>1:0</td>
<td>1:1</td>
<td>1:2</td>
<td>1:3</td>
<td>1:4</td>
<td>1:5</td>
<td>1:6</td>
<td>1:7</td>
<td>…</td>
<td>1:1400</td>
<td>…</td>
</tr>
</tbody>
</table>
<h3 id="表存储结构">表存储结构</h3>
<p>SQL
Server通过每个页面的96个字节的页头和系统表，从逻辑层面上，把表的存储结构管理起来。</p>
<p>表概念关系：</p>
<ol type="1">
<li><p>每张表会有一个对应的Object ID</p></li>
<li><p>每张表拥有一个或者多个partition</p></li>
<li><p>每个partition会有一个或者多个Heap or B-Tree(Hobt)</p></li>
<li><p>每个Hobt会有至多三个分配单元（Data，LOB，Row-Overflow）用于存放数据</p></li>
<li><p>每个分配单元可以有许多页</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-16550895343212.jpg"
alt="Table organization with partitions" />
<figcaption aria-hidden="true">Table organization with
partitions</figcaption>
</figure></li>
</ol>
<p>分配单元内数据页的组织方式：</p>
<ol type="1">
<li><p>表没有任何索引</p>
<ol type="1">
<li><p>按Heap结构储存，只有一个partition，这个partition下面的每个分配单元都有一个连接指向IAM页，所有的IAM页是连接起来的</p></li>
<li><p>数据页之间没有任何关系，完全依赖IAM页组织</p></li>
<li><p>对于一个SELECT语句，SQL
Server会首先查询IAM页，然后根据IAM页提供的信息，遍历每个区,
把区内符合条件的页返回</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-16550899862434.jpg"
alt="Heap的存储结构" />
<figcaption aria-hidden="true">Heap的存储结构</figcaption>
</figure></li>
</ol></li>
<li><p>有非聚集索引而没有聚集索引的表</p>
<ol type="1">
<li><p>每个非聚集索都有一个相对应的partition，对于这个partition下面的每个分配单元都有一个连接指向root
page（根页）</p></li>
<li><p>数据页之间通过前后指针互相联系</p></li>
<li><p>真正的数据是以堆(Heap)的结构存放的</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image001.gif"
alt="非聚集索引的存储结构" />
<figcaption aria-hidden="true">非聚集索引的存储结构</figcaption>
</figure></li>
</ol></li>
<li><p>表有聚集索引</p>
<ol type="1">
<li><p>表中的聚集索引，对应的索引号是1，有一个对应的partition，对于这个partition下面的每个分配单元都有一个连接指向根页</p></li>
<li><p>叶子节点里存放的是真正的数据</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image001-16550904385237.gif"
alt="聚集索引的存储结构" />
<figcaption aria-hidden="true">聚集索引的存储结构</figcaption>
</figure></li>
</ol></li>
</ol>
<h3 id="案例跟踪索引的存储结构">案例：跟踪索引的存储结构</h3>
<p>跟踪AdventureWorks2019中表Employee的空间使用。</p>
<p>得到表Employee的object_id：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.objects <span class="hljs-keyword">WHERE</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Employee&#x27;</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220613152251686.png"
alt="查询表的object_id" />
<figcaption aria-hidden="true">查询表的object_id</figcaption>
</figure>
<p>可以看到object_id是<code>1893581784</code>.</p>
<p>查询表格中包含的partition：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.partitions <span class="hljs-keyword">WHERE</span> object_id <span class="hljs-operator">=</span> <span class="hljs-number">1893581784</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220613152528367.png"
alt="查询表的partitions" />
<figcaption aria-hidden="true">查询表的partitions</figcaption>
</figure>
<p>表Employee有6个partition，分别对应于不同的索引，每个partition有290条记录。<code>hobt_id</code>用来表示在该partition内heap
或 B树结构的标识。</p>
<p>查询partition编号5的分配单元信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.allocation_units <span class="hljs-keyword">WHERE</span> container_id <span class="hljs-operator">=</span> <span class="hljs-number">72057594054770688</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220613153048177.png"
alt="查询分配单元信息" />
<figcaption aria-hidden="true">查询分配单元信息</figcaption>
</figure>
<p>查询结果说明，对于<code>partition_id = 72057594054770688</code>，只有一个分配单元，用于存放数据页（IN_ROW_DATA），大小为25个page，其中数据页为2个页。</p>
<p>查询更加详细的分配单元信息：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.system_internals_allocation_units <span class="hljs-keyword">WHERE</span> container_id <span class="hljs-operator">=</span> <span class="hljs-number">72057594054770688</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220613153517266.png"
alt="显示更具体的分配单元信息" />
<figcaption aria-hidden="true">显示更具体的分配单元信息</figcaption>
</figure>
<p>可以看到，根页的位置是<code>0x302700000100</code>，使用倒序解码，一次去一个字节（两位），字节中顺序不变，解码为<code>00 01 00 00 27 30</code>，前面两个字节表明的是所在的文件组编号，后面的4个字节表明页的编号，所以页面编号是（1，10032）</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-165528044275119.jpg"
alt="页的结构" />
<figcaption aria-hidden="true">页的结构</figcaption>
</figure>
<p>输出一定格式的指定页面：</p>
<p>DBCC PAGE 命令，使用前需要打开跟踪标志3604</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># DBCC PAGE(<span class="hljs-operator">&lt;</span>db_name<span class="hljs-operator">|</span>db ID<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>file_id<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>page_id<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>format_id<span class="hljs-operator">&gt;</span>)<br># format_id <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span> 常用<span class="hljs-number">1</span>, <span class="hljs-number">3</span><br>DBCC TRACEON(<span class="hljs-number">3604</span>)<br>DBCC PAGE(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">10032</span>, <span class="hljs-number">1</span>)<br>DBCC TRACEOFF(<span class="hljs-number">3604</span>)<br></code></pre></td></tr></table></figure>
<p>输出的结果如下：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">DBCC</span> execution completed. If DBCC printed error messages, contact your system administrator.<br><br><span class="hljs-attribute">PAGE</span>: (<span class="hljs-number">1</span>:<span class="hljs-number">10032</span>)<br><br><br><span class="hljs-attribute">BUFFER</span>:<br><br><br><span class="hljs-attribute">BUF</span> @<span class="hljs-number">0</span>x000002E5CBD5FE40<br><br><span class="hljs-attribute">bpage</span> = <span class="hljs-number">0</span>x000002E5B8EB0000          bPmmpage = <span class="hljs-number">0</span>x0000000000000000       bsort_r_nextbP = <span class="hljs-number">0</span>x000002E5CBD5FD90<br><span class="hljs-attribute">bsort_r_prevbP</span> = <span class="hljs-number">0</span>x0000000000000000 bhash = <span class="hljs-number">0</span>x0000000000000000          bpageno = (<span class="hljs-number">1</span>:<span class="hljs-number">10032</span>)<br><span class="hljs-attribute">bpart</span> = <span class="hljs-number">2</span>                           ckptGen = <span class="hljs-number">0</span>x0000000000000000        bDirtyRefCount = <span class="hljs-number">0</span><br><span class="hljs-attribute">bstat</span> = <span class="hljs-number">0</span>x9                         breferences = <span class="hljs-number">1</span>                     berrcode = <span class="hljs-number">0</span><br><span class="hljs-attribute">bUse1</span> = <span class="hljs-number">47457</span>                       bstat2 = <span class="hljs-number">0</span>x0                        blog = <span class="hljs-number">0</span>x15ab215a<br><span class="hljs-attribute">bsampleCount</span> = <span class="hljs-number">0</span>                    bIoCount = <span class="hljs-number">0</span>                        resPoolId = <span class="hljs-number">0</span><br><span class="hljs-attribute">bcputicks</span> = <span class="hljs-number">0</span>                       bReadMicroSec = <span class="hljs-number">251</span>                 bDirtyContext = <span class="hljs-number">0</span>x0000000000000000<br><span class="hljs-attribute">bDbPageBroker</span> = <span class="hljs-number">0</span>x0000000000000000  bdbid = <span class="hljs-number">5</span>                           bpru = <span class="hljs-number">0</span>x000002E5BD500040<br><br><span class="hljs-attribute">PAGE</span> HEADER:<br><br><br><span class="hljs-attribute">Page</span> @<span class="hljs-number">0</span>x000002E5B8EB0000<br><br><span class="hljs-attribute">m_pageId</span> = (<span class="hljs-number">1</span>:<span class="hljs-number">10032</span>)                m_headerVersion = <span class="hljs-number">1</span>                 m_type = <span class="hljs-number">2</span><br><span class="hljs-attribute">m_typeFlagBits</span> = <span class="hljs-number">0</span>x0                m_level = <span class="hljs-number">1</span>                         m_flagBits = <span class="hljs-number">0</span>x220<br><span class="hljs-attribute">m_objId</span> (AllocUnitId.idObj) = <span class="hljs-number">379</span>   m_indexId (AllocUnitId.idInd) = <span class="hljs-number">256</span> <br><span class="hljs-attribute">Metadata</span>: AllocUnitId = <span class="hljs-number">72057594062766080</span>                                <br><span class="hljs-attribute">Metadata</span>: PartitionId = <span class="hljs-number">72057594054770688</span>                                Metadata: IndexId = <span class="hljs-number">5</span><br><span class="hljs-attribute">Metadata</span>: ObjectId = <span class="hljs-number">1893581784</span>     m_prevPage = (<span class="hljs-number">0</span>:<span class="hljs-number">0</span>)                  m_nextPage = (<span class="hljs-number">0</span>:<span class="hljs-number">0</span>)<br><span class="hljs-attribute">pminlen</span> = <span class="hljs-number">7</span>                         m_slotCnt = <span class="hljs-number">2</span>                       m_freeCnt = <span class="hljs-number">8038</span><br><span class="hljs-attribute">m_freeData</span> = <span class="hljs-number">150</span>                    m_reservedCnt = <span class="hljs-number">0</span>                   m_lsn = (<span class="hljs-number">38</span>:<span class="hljs-number">4326</span>:<span class="hljs-number">40</span>)<br><span class="hljs-attribute">m_xactReserved</span> = <span class="hljs-number">0</span>                  m_xdesId = (<span class="hljs-number">0</span>:<span class="hljs-number">2188</span>)                 m_ghostRecCnt = <span class="hljs-number">0</span><br><span class="hljs-attribute">m_tornBits</span> = -<span class="hljs-number">637479848</span>             DB Frag ID = <span class="hljs-number">1</span>                      <br><br><span class="hljs-attribute">Allocation</span> Status<br><br><span class="hljs-attribute">GAM</span> (<span class="hljs-number">1</span>:<span class="hljs-number">2</span>) = ALLOCATED               SGAM (<span class="hljs-number">1</span>:<span class="hljs-number">3</span>) = NOT ALLOCATED          <br><span class="hljs-attribute">PFS</span> (<span class="hljs-number">1</span>:<span class="hljs-number">8088</span>) = <span class="hljs-number">0</span>x40 ALLOCATED   <span class="hljs-number">0</span>_PCT_FULL                               DIFF (<span class="hljs-number">1</span>:<span class="hljs-number">6</span>) = NOT CHANGED<br><span class="hljs-attribute">ML</span> (<span class="hljs-number">1</span>:<span class="hljs-number">7</span>) = NOT MIN_LOGGED           <br><br><span class="hljs-attribute">DATA</span>:<br><br><br><span class="hljs-attribute">Slot</span> <span class="hljs-number">0</span>, Offset <span class="hljs-number">0</span>x60, Length <span class="hljs-number">27</span>, DumpStyle BYTE<br><br><span class="hljs-attribute">Record</span> Type = INDEX_RECORD          Record Attributes =  VARIABLE_COLUMNS<br><span class="hljs-attribute">Record</span> Size = <span class="hljs-number">27</span>                    <br><span class="hljs-attribute">Memory</span> Dump @<span class="hljs-number">0</span>x000000F51E7F8060<br><br><span class="hljs-attribute">0000000000000000</span>:   <span class="hljs-number">26</span>f82600 <span class="hljs-number">00010001</span> <span class="hljs-number">001</span>b0031 <span class="hljs-number">00300037</span> <span class="hljs-number">00300038</span>  &amp;ø&amp;........<span class="hljs-number">1.0.7.0</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">0000000000000014</span>:   <span class="hljs-number">00310030</span> <span class="hljs-number">003000</span>                               .<span class="hljs-number">1</span>.<span class="hljs-number">0</span>.<span class="hljs-number">0</span>.<br><br><span class="hljs-attribute">Slot</span> <span class="hljs-number">1</span>, Offset <span class="hljs-number">0</span>x7b, Length <span class="hljs-number">27</span>, DumpStyle BYTE<br><br><span class="hljs-attribute">Record</span> Type = INDEX_RECORD          Record Attributes =  VARIABLE_COLUMNS<br><span class="hljs-attribute">Record</span> Size = <span class="hljs-number">27</span>                    <br><span class="hljs-attribute">Memory</span> Dump @<span class="hljs-number">0</span>x000000F51E7F807B<br><br><span class="hljs-attribute">0000000000000000</span>:   <span class="hljs-number">26002700</span> <span class="hljs-number">00010001</span> <span class="hljs-number">001</span>b0038 <span class="hljs-number">00370032</span> <span class="hljs-number">00360038</span>  &amp;.&#x27;........<span class="hljs-number">8.7.2.6</span>.<span class="hljs-number">8</span><br><span class="hljs-attribute">0000000000000014</span>:   <span class="hljs-number">00380033</span> <span class="hljs-number">003700</span>                               .<span class="hljs-number">8</span>.<span class="hljs-number">3</span>.<span class="hljs-number">7</span>.<br><br><span class="hljs-attribute">OFFSET</span> TABLE:<br><br><span class="hljs-attribute">Row</span> - Offset                        <br><span class="hljs-attribute">1</span> (<span class="hljs-number">0</span>x1) - <span class="hljs-number">123</span> (<span class="hljs-number">0</span>x7b)                <br><span class="hljs-attribute">0</span> (<span class="hljs-number">0</span>x0) - <span class="hljs-number">96</span> (<span class="hljs-number">0</span>x60)                 <br><br><br><span class="hljs-attribute">DBCC</span> execution completed. If DBCC printed error messages, contact your system administrator.<br><span class="hljs-attribute">DBCC</span> execution completed. If DBCC printed error messages, contact your system administrator.<br><br><span class="hljs-attribute">Completion</span> time: <span class="hljs-number">2022</span>-<span class="hljs-number">06</span>-<span class="hljs-number">15</span>T16:<span class="hljs-number">06</span>:<span class="hljs-number">02</span>.<span class="hljs-number">9847148</span>+<span class="hljs-number">08</span>:<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>BUFFER标识该数据页在内存中的位置</p></li>
<li><p>PAGE HEADER显示了页头的信息</p>
<ol type="1">
<li><p>这里<code>m_prevPage = (0:0) m_nextPage = (0:0)</code>可以看出这页是根页</p></li>
<li><p>部分页头属性解析</p>
<table>

<thead>
<tr class="header">
<th>页头属性</th>
<th>解析</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>m_pageID</td>
<td>页的编号</td>
</tr>
<tr class="even">
<td>m_headerVersion</td>
<td>页头格式的版本，这个值是1</td>
</tr>
<tr class="odd">
<td>m_type</td>
<td>页的类型
1：表明是数据页。包括heap结构的数据，和聚集索引里B树结构的最底层页
2：索引页。包括聚集索引里B树结构的非底层页和非聚集索引的所有页
其他页类型，在此暂不提及。</td>
</tr>
<tr class="even">
<td>m_typeFlagBits</td>
<td>基本上用不到</td>
</tr>
<tr class="odd">
<td>m_level</td>
<td>在B树结构中的层级。最底层的层级是0.</td>
</tr>
<tr class="even">
<td>m_flagBits</td>
<td>页的属性。如0x200表明页有checksum检查</td>
</tr>
<tr class="odd">
<td>m_prevPage, m_nextPage</td>
<td>在B树结构的同一层级数据页之间，互相通过m_prevPage和m_nextPage连接起来。</td>
</tr>
<tr class="even">
<td>m_slotCnt</td>
<td>当前页中，有多少条记录</td>
</tr>
<tr class="odd">
<td>m_freeCnt</td>
<td>这是当前页中，还剩下多少空间，以字节为单位</td>
</tr>
<tr class="even">
<td>m_lsn</td>
<td>这是当前页的所有记录中，最后一个改变相对应的日志记录号(Log Sequence
Number)</td>
</tr>
</tbody>
</table></li>
</ol></li>
<li><p>注意这里第一个offset正好是96，对应页头信息</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Row</span> - Offset                        <br><span class="hljs-attribute">1</span> (<span class="hljs-number">0</span>x1) - <span class="hljs-number">123</span> (<span class="hljs-number">0</span>x7b)                <br><span class="hljs-attribute">0</span> (<span class="hljs-number">0</span>x0) - <span class="hljs-number">96</span> (<span class="hljs-number">0</span>x60) <br></code></pre></td></tr></table></figure></li>
<li><p>非聚集索引键指向的内容</p>
<figure class="highlight maxima"><table><tr><td class="code"><pre><code class="hljs maxima">Slot <span class="hljs-number">0</span>, Offset <span class="hljs-number">0x60</span>, Length <span class="hljs-number">27</span>, DumpStyle BYTE<br>...<br><span class="hljs-number">0000000000000000</span>:   26f82600 <span class="hljs-number">00010001</span> <span class="hljs-number">001b0031</span> <span class="hljs-number">00300037</span> <span class="hljs-number">00300038</span>  &amp;ø&amp;........<span class="hljs-number">1.0</span><span class="hljs-number">.7</span><span class="hljs-number">.0</span><span class="hljs-number">.8</span><br><span class="hljs-number">0000000000000014</span>:   <span class="hljs-number">00310030</span> <span class="hljs-number">003000</span>                               .<span class="hljs-number">1.0</span><span class="hljs-number">.0</span>.<br>Slot <span class="hljs-number">1</span>, Offset <span class="hljs-number">0x7b</span>, Length <span class="hljs-number">27</span>, DumpStyle BYTE<br>...<br><span class="hljs-number">0000000000000000</span>:   <span class="hljs-number">26002700</span> <span class="hljs-number">00010001</span> <span class="hljs-number">001b0038</span> <span class="hljs-number">00370032</span> <span class="hljs-number">00360038</span>  &amp;.&#x27;........<span class="hljs-number">8.7</span><span class="hljs-number">.2</span><span class="hljs-number">.6</span><span class="hljs-number">.8</span><br><span class="hljs-number">0000000000000014</span>:   <span class="hljs-number">00380033</span> <span class="hljs-number">003700</span>                               .<span class="hljs-number">8.3</span><span class="hljs-number">.7</span>.<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>对于<code>10708100</code>，所指向的页面位置是<code>f82600 000100</code>，即(1,
9976)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC TRACEON(<span class="hljs-number">3604</span>)<br>DBCC PAGE(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9976</span>, <span class="hljs-number">1</span>)<br>DBCC TRACEOFF(<span class="hljs-number">3604</span>)<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>在Page Header可以发现，这一页在树的边缘，下一页页是(1:9984)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">m_prevPage</span> = (<span class="hljs-number">0</span>:<span class="hljs-number">0</span>)                  m_nextPage = (<span class="hljs-number">1</span>:<span class="hljs-number">9984</span>)<br></code></pre></td></tr></table></figure></li>
<li><p>可以看到一共有255个slot，即这个页面有255个child node</p></li>
</ol></li>
<li><p>对于<code>87268837</code>，所指向的页面位置是<code>02700 000100</code>，即(1,
9984)，与上述发现相符</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC TRACEON(<span class="hljs-number">3604</span>)<br>DBCC PAGE(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">9984</span>, <span class="hljs-number">1</span>)<br>DBCC TRACEOFF(<span class="hljs-number">3604</span>)<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><p>在page header可以发现，这一页在树的另一边缘，前一页是(1:9976)</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">m_prevPage</span> = (<span class="hljs-number">1</span>:<span class="hljs-number">9976</span>)               m_nextPage = (<span class="hljs-number">0</span>:<span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure></li>
<li><p>可以看到一共有35个slot</p></li>
</ol></li>
<li><p>如果我们查看对于Employee这个object，index=5的时候，对应的信息是NationalIDNumber</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> sys.indexes <span class="hljs-keyword">Where</span> object_id <span class="hljs-operator">=</span> <span class="hljs-number">1893581784</span><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615163547071.png"
alt="查询objectid" />
<figcaption aria-hidden="true">查询objectid</figcaption>
</figure></li>
<li><p>直接查看NationalIDNumber，我们可以发现，一共有290=255+35行，10708100和87268837属于NationalIDNumber。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> NationalIDNumber <span class="hljs-keyword">FROM</span> HumanResources.Employee<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615163940802.png"
alt="查询NationalIDNumber" />
<figcaption aria-hidden="true">查询NationalIDNumber</figcaption>
</figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615165055657.png"
alt="非聚集索引结构" />
<figcaption aria-hidden="true">非聚集索引结构</figcaption>
</figure></li>
</ol></li>
</ol>
<h3
id="案例使用sp_allocationmetadata查看分配单元信息">案例：使用sp_AllocationMetadata查看分配单元信息</h3>
<blockquote>
<p>Reference <a
href="https://www.sqlskills.com/blogs/paul/inside-the-storage-engine-sp_allocationmetadata-putting-undocumented-system-catalog-views-to-work/">Inside
The Storage Engine: sp_AllocationMetadata - Paul S. Randal
(sqlskills.com)</a></p>
</blockquote>
<p>创建procedure</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">/*============================================================================</span><br><span class="hljs-comment">  File:     sp_AllocationMetadata.sql</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  Summary:  This script cracks the system tables to provide top-level</span><br><span class="hljs-comment">            metadata about a table or index</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  SQL Server Versions: 2005 onwards</span><br><span class="hljs-comment">------------------------------------------------------------------------------</span><br><span class="hljs-comment">  Written by Paul S. Randal, SQLskills.com</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  (c) 2014, SQLskills.com. All rights reserved.</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  For more scripts and sample code, check out</span><br><span class="hljs-comment">    http://www.SQLskills.com</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  You may alter this code for your own *non-commercial* purposes. You may</span><br><span class="hljs-comment">  republish altered code as long as you include this copyright and give due</span><br><span class="hljs-comment">  credit, but you must obtain prior permission before blogging this code.</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">  THIS CODE AND INFORMATION ARE PROVIDED &quot;AS IS&quot; WITHOUT WARRANTY OF</span><br><span class="hljs-comment">  ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED</span><br><span class="hljs-comment">  TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A</span><br><span class="hljs-comment">  PARTICULAR PURPOSE.</span><br><span class="hljs-comment">============================================================================*/</span><br> <br><span class="hljs-comment">-- USE [master];</span><br><span class="hljs-comment">-- GO</span><br> <br>IF OBJECT_ID (N<span class="hljs-string">&#x27;sp_AllocationMetadata&#x27;</span>) <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>    <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">PROCEDURE</span> [sp_AllocationMetadata];<br>GO<br> <br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">PROCEDURE</span> [sp_AllocationMetadata]<br>(<br>    <span class="hljs-variable">@object</span> SYSNAME <span class="hljs-operator">=</span> <span class="hljs-keyword">NULL</span><br>)<br><span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span><br>    OBJECT_NAME ([sp].[object_id]) <span class="hljs-keyword">AS</span> [Object Name],<br>    [sp].[index_id] <span class="hljs-keyword">AS</span> [Index ID],<br>    [sp].[partition_id] <span class="hljs-keyword">AS</span> [<span class="hljs-keyword">Partition</span> ID],<br>        [sa].[allocation_unit_id] <span class="hljs-keyword">AS</span> [Alloc Unit ID],<br>    [sa].[type_desc] <span class="hljs-keyword">AS</span> [Alloc Unit Type],<br>    <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">6</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">6</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">5</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">4</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">3</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_page], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">AS</span> [<span class="hljs-keyword">First</span> Page],<br>    <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">6</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">6</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">5</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">4</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">3</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[root_page], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">AS</span> [Root Page],<br>    <span class="hljs-string">&#x27;(&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">6</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">6</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">5</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;:&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">VARCHAR</span> (<span class="hljs-number">20</span>),<br>        <span class="hljs-keyword">CONVERT</span> (<span class="hljs-type">INT</span>,<br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">4</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">3</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">2</span>, <span class="hljs-number">1</span>) <span class="hljs-operator">+</span><br>            <span class="hljs-built_in">SUBSTRING</span> ([sa].[first_iam_page], <span class="hljs-number">1</span>, <span class="hljs-number">1</span>))) <span class="hljs-operator">+</span><br>    <span class="hljs-string">&#x27;)&#x27;</span> <span class="hljs-keyword">AS</span> [<span class="hljs-keyword">First</span> IAM Page]<br><span class="hljs-keyword">FROM</span><br>    sys.system_internals_allocation_units <span class="hljs-keyword">AS</span> [sa],<br>    sys.partitions <span class="hljs-keyword">AS</span> [sp]<br><span class="hljs-keyword">WHERE</span><br>    [sa].[container_id] <span class="hljs-operator">=</span> [sp].[partition_id]<br><span class="hljs-keyword">AND</span> [sp].[object_id] <span class="hljs-operator">=</span><br>    (<span class="hljs-keyword">CASE</span> <span class="hljs-keyword">WHEN</span> (<span class="hljs-variable">@object</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span>)<br>        <span class="hljs-keyword">THEN</span> [sp].[object_id]<br>        <span class="hljs-keyword">ELSE</span> OBJECT_ID (<span class="hljs-variable">@object</span>)<br>    <span class="hljs-keyword">END</span>);<br>GO<br> <br><span class="hljs-keyword">EXEC</span> sys.sp_MS_marksystemobject [sp_AllocationMetadata];<br>GO<br> <br><span class="hljs-comment">--USE [AdventureWorks];</span><br><span class="hljs-comment">--GO</span><br><span class="hljs-comment">--EXEC [sp_AllocationMetadata] N&#x27;HumanResources.Employee&#x27;;</span><br><span class="hljs-comment">--GO</span><br></code></pre></td></tr></table></figure>
<p>在另外的连接中执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> [sp_AllocationMetadata] N<span class="hljs-string">&#x27;HumanResources.Employee&#x27;</span>;<br>GO<br></code></pre></td></tr></table></figure>
<p>即可查看</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615165642548.png"
alt="sp_AllocationMetadata结果" />
<figcaption aria-hidden="true">sp_AllocationMetadata结果</figcaption>
</figure>
<h2 id="日志文件的空间使用和管理">日志文件的空间使用和管理</h2>
<p>每个数据库都有事务日志，用于记录所有事务以及每个事务对数据库所做的修改。</p>
<p>SQL
Server对数据页的插入、修改和删除，是对缓冲区高速缓存（内存）中的页副本进行操作，操作完成后就提交事务，当数据库中出现检查点或缓冲区不够时，才写入磁盘。</p>
<p>SQL Server会确保在提交事务时或之前就将日志记录写入磁盘。</p>
<p>如果日志文件缺失或者损坏，将等同于数据库损坏。</p>
<p>刷新页：将修改后的数据页从高速缓冲存储器写入磁盘</p>
<p>脏页：在高速缓存中修改但尚未写入磁盘的页</p>
<p>日志文件组织方式：</p>
<ol type="1">
<li>每一物理日志文件由多个虚拟日志单元组成</li>
<li>虚拟日志单元没有固定大小</li>
<li>一个物理日志文件所包含的虚拟日志单元数不固定</li>
<li>管理员不能配置或设置虚拟日志单元的大小或数量</li>
<li>一个虚拟日志单元可以分成很多块，块内有很多具体的日志记录</li>
<li>对于每条日志记录，都有一个LSN(Log Sequence Number)编号
<ol type="1">
<li>虚拟日志单元(Virtual Log
File)的序列号：虚拟日志单元中块的编号：块中日志记录的编号</li>
<li>如对于某个LSN，其编号为0000001D:000000FD:0002，这表明这个LSN是属于虚拟日志
0000001D，在该虚拟日志中属于块000000FD, 然后在该块中对应记录2</li>
</ol></li>
</ol>
<p>事务日志文件结构：</p>
<ol type="1">
<li><p>回绕</p></li>
<li><p>当创建数据库时，逻辑日志文件从物理日志文件的始端开始，新日志记录被添加到逻辑日志的末端，然后向物理日志的末端扩张，扩张到物理日志文件末端时，回绕到始端</p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-165511277762811.jpg"
alt="事务日志的外观" />
<figcaption aria-hidden="true">事务日志的外观</figcaption>
</figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-165511279443213.jpg"
alt="事务日志循环使用" />
<figcaption aria-hidden="true">事务日志循环使用</figcaption>
</figure></li>
</ol>
<p>查看日志文件中的信息：</p>
<ol type="1">
<li><p>DBCC LOG</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># DBCC <span class="hljs-built_in">LOG</span>(<span class="hljs-operator">&lt;</span>db_id<span class="hljs-operator">|</span>db name<span class="hljs-operator">&gt;</span>, <span class="hljs-operator">&lt;</span>formart_id<span class="hljs-operator">&gt;</span>)<br># <span class="hljs-operator">&lt;</span>db_id<span class="hljs-operator">|</span>db name<span class="hljs-operator">&gt;</span>：目标数据库编号或者是数据库名<br># <span class="hljs-operator">&lt;</span>format_id<span class="hljs-operator">&gt;</span>：DBCC LOG命令翻译和解释日志记录的方式，一般使用<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 创建测试数据库，观察记录<br><span class="hljs-keyword">CREATE</span> DATABASE [TESTLOG]<br>GO<br>USE [TESTLOG]<br>GO<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> [TEST] (<br>	[ID] <span class="hljs-type">int</span>,<br>	[name] nvarchar(<span class="hljs-number">50</span>)<br>)<br>GO<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> [TEST] <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;aaaa&#x27;</span>) <br><span class="hljs-keyword">UPDATE</span> [TEST] <span class="hljs-keyword">set</span> [name] <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;xxxx&#x27;</span> <span class="hljs-keyword">where</span> [ID] <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>GO<br>DBCC TRACEON(<span class="hljs-number">3604</span>)<br>GO<br>DBCC <span class="hljs-built_in">LOG</span>(TESTLOG,<span class="hljs-number">3</span>)<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/clip_image002-165511347884615.jpg"
alt="DBCC LOG结果中3条和UPDATE动作相关的记录" />
<figcaption aria-hidden="true">DBCC
LOG结果中3条和UPDATE动作相关的记录</figcaption>
</figure></li>
<li><p>ApexSQL Log</p></li>
</ol>
<p>数据库的更新操作：</p>
<ol type="1">
<li>数据库日志文件记录了旧值和新值</li>
<li>行级别操作</li>
<li>Redo就是用新的值覆盖</li>
<li>Undo就是用旧的值覆盖</li>
<li>DELETE和TRUNCATE
<ol type="1">
<li>使用DELECT删除表，是行级别的删除，LSN编号不同，整个DELECT语句是一个事务，所以事务编号相同</li>
<li>使用TRUNCATE删除表，不记录日志
<ol type="1">
<li>删除记录量大的表，避免产生大量日志文件</li>
<li>但是不能Undo</li>
</ol></li>
</ol></li>
</ol>
<p>SQL Server的日志记录特点：</p>
<ol type="1">
<li>日志记录的是数据的变化，面向数据库服务</li>
<li>每条记录都有它唯一的编号（LSN），并且记录了它属于的事务号</li>
<li>日志记录的行数和实际修改的数据量有关，修改越多，日志行数越多</li>
<li>日志记录了事务发生的时间，但是不记录发起者的程序名称和客户端信息</li>
<li>SQL Server能够从日志记录里面读到数据修改前的值和修改后的值</li>
</ol>
<h2 id="空间使用计算方法">空间使用计算方法</h2>
<table>
<thead>
<tr class="header">
<th>命　　令</th>
<th>精确单位</th>
<th>性能影响</th>
<th>准确性</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>DBCC SHOWFILESTATS</td>
<td>区</td>
<td>无</td>
<td>基本准确</td>
</tr>
<tr class="even">
<td>sp_spaceused</td>
<td>页</td>
<td>无</td>
<td>有时不准确</td>
</tr>
<tr class="odd">
<td>sp_spaceused + <em>updateusage</em></td>
<td>页</td>
<td>稍有</td>
<td>基本准确</td>
</tr>
<tr class="even">
<td>sys.dm_db_partition_stats</td>
<td>页</td>
<td>无</td>
<td>有时不准确</td>
</tr>
<tr class="odd">
<td>DBCC SHOWCONTIG</td>
<td>页/区</td>
<td>有</td>
<td>准确</td>
</tr>
</tbody>
</table>
<h3 id="空间使用计算方法-1">空间使用计算方法</h3>
<ol type="1">
<li><p><code>sp_spaceused</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 显示行数、保留的磁盘空间以及当前数据库中的表、索引视图等数据库对象所使用的磁盘空间<br># 若不指定objectname，则返回整个数据库的结果<br>sp_spaceused [[ <span class="hljs-variable">@objname</span> <span class="hljs-operator">=</span> ] <span class="hljs-string">&#x27;objname&#x27;</span> ]   <br>[, [ <span class="hljs-variable">@updateusage</span> <span class="hljs-operator">=</span> ] <span class="hljs-string">&#x27;updateusage&#x27;</span> ]  <br>[, [ <span class="hljs-variable">@mode</span> <span class="hljs-operator">=</span> ] <span class="hljs-string">&#x27;mode&#x27;</span> ]  <br>[, [ <span class="hljs-variable">@oneresultset</span> <span class="hljs-operator">=</span> ] oneresultset ]  <br>[, [ <span class="hljs-variable">@include</span>_total_xtp_storage <span class="hljs-operator">=</span> ] include_total_xtp_storage ]<br></code></pre></td></tr></table></figure>
<ol type="1">
<li><figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614144152951.png"
alt="sp_spaceused返回结果" />
<figcaption aria-hidden="true">sp_spaceused返回结果</figcaption>
</figure></li>
<li><p>统计单位：页</p></li>
<li><p>局限：</p>
<ol type="1">
<li>数据库发生较大变化后，结果常常不准确
<ol type="1">
<li>使用<code>sp_spaceused + updateusage</code>来要求SQL
Server为这句指令更新管理视图里的统计信息</li>
<li>但消耗资源</li>
</ol></li>
<li>无法统计tempdb</li>
<li>一次只能查询一个对象
<ol type="1">
<li>可以通过直接查询sys.dm_db_partition_stats以及相关的管理视图来解决</li>
</ol></li>
</ol></li>
</ol></li>
<li><p><strong>Management Studio --&gt; Right click on data base --&gt;
Reports --&gt; Standard Reports --&gt; Disk Usage</strong></p>
<ol type="1">
<li><figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614144631043.png"
alt="Management Studio的Disk Usage报表" />
<figcaption aria-hidden="true">Management Studio的Disk
Usage报表</figcaption>
</figure></li>
<li><p>调用了<code>DBCC ShowFileStats</code>命令</p></li>
</ol></li>
<li><p><code>DBCC ShowFileStats</code></p>
<ol type="1">
<li>按照区的使用情况统计数据文件的使用大小</li>
<li>从系统分配页面（GAM、SGAM）读取区分配信息以计算数据库数据文件区的总数和已使用的区的总数。</li>
<li>比较准确可靠</li>
<li>不会增加额外系统负担</li>
<li><img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614155239877.png"
title="fig:" alt="DBCC SHOWFILESTATS结果" /></li>
</ol></li>
<li><p><code>sys.dm_db_partition_stats</code></p>
<ol type="1">
<li><p>统计单位：页</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 对数据库内所有对象进行统计<br><span class="hljs-keyword">SELECT</span> o.name ,<br>         <span class="hljs-built_in">SUM</span> (p.reserved_page_count) <span class="hljs-keyword">AS</span> reserved_page_count,<br>         <span class="hljs-built_in">SUM</span> (p.used_page_count) <span class="hljs-keyword">AS</span> used_page_count,<br>         <span class="hljs-built_in">SUM</span> (<br>            <span class="hljs-keyword">CASE</span><br>                <span class="hljs-keyword">WHEN</span> (p.index_id <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span>) <span class="hljs-keyword">THEN</span> (p.in_row_data_page_count <span class="hljs-operator">+</span> <br>                  p.lob_used_page_count <span class="hljs-operator">+</span> p.row_overflow_used_page_count)<br>                <span class="hljs-keyword">ELSE</span> p.lob_used_page_count <span class="hljs-operator">+</span> p.row_overflow_used_page_count<br>            <span class="hljs-keyword">END</span><br>            ) <span class="hljs-keyword">AS</span> DataPages,<br>         <span class="hljs-built_in">SUM</span> (<br>            <span class="hljs-keyword">CASE</span><br>                <span class="hljs-keyword">WHEN</span> (p.index_id <span class="hljs-operator">&lt;</span> <span class="hljs-number">2</span>) <span class="hljs-keyword">THEN</span> row_count<br>                <span class="hljs-keyword">ELSE</span> <span class="hljs-number">0</span><br>            <span class="hljs-keyword">END</span><br>            ) <span class="hljs-keyword">AS</span> rowCounts<br>    <span class="hljs-keyword">FROM</span> sys.dm_db_partition_stats p <span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> sys.objects o<br>        <span class="hljs-keyword">ON</span> p.object_id <span class="hljs-operator">=</span> o.object_id<br>    <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> o.name<br><br><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614160536391.png"
alt="sys.dm_db_partition_stats查询结果" />
<figcaption
aria-hidden="true">sys.dm_db_partition_stats查询结果</figcaption>
</figure></li>
</ol></li>
<li><p><code>DBCC SHOWCONTIG</code></p>
<ol type="1">
<li>统计某张表（或索引）用了多少页面、多少区，甚至页面上的平均数据量</li>
<li>而扫描的过程中，SQL
Server是要加锁的；要得到的结果越精确，扫描的范围就越大
<ol type="1">
<li>LIMITED模式运行最快，扫描的页数最少</li>
<li>SAMPLED模式将返回基于索引或堆中所有页的1％样本的统计信息</li>
<li>DETAILED模式将扫描所有页并返回所有统计信息</li>
</ol></li>
<li>最精确的方法，但是在数据库处于工作高峰时应避免使用</li>
<li><img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614160926210.png"
title="fig:" alt="DBCC SHOWCONTIG结果" /></li>
</ol></li>
</ol>
<h3 id="分析日志文件存储空间">分析日志文件存储空间</h3>
<p><code>DBCC SQLPERF(LOGSPACE)</code></p>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220614161059720.png"
alt="DBCC SQLPERF(LOGSPACE)结果" />
<figcaption aria-hidden="true">DBCC SQLPERF(LOGSPACE)结果</figcaption>
</figure>
<ol type="1">
<li>结果返回所有数据库大小，使用比率</li>
<li>对性能没有影响</li>
<li>结果总是准确</li>
<li>可随时运行</li>
</ol>
<h2 id="tempdb的空间使用">TEMPDB的空间使用</h2>
<p>Tempdb系统数据库是一个全局资源，主要用于保存：</p>
<h3 id="用户对象">用户对象</h3>
<ol type="1">
<li><p>由用户显式创建</p></li>
<li><p>可位于用户会话的作用域中；可位于创建对象所用例程的作用域中</p></li>
<li><p>例程可以是存储过程、触发器或用户定义函数</p></li>
<li><p>包括：</p>
<ol type="1">
<li>用户定义的表和索引</li>
<li>系统表和索引</li>
<li>全局临时表和索引</li>
<li>局部临时表和索引</li>
<li>table变量</li>
<li>表值函数中返回的表</li>
</ol></li>
</ol>
<h3 id="内部对象">内部对象</h3>
<ol type="1">
<li>SQL Server数据库引擎创建，用于处理SQL Server语句</li>
<li>可以在语句的作用域中创建和删除</li>
<li>每个内部对象至少使用9页：一个IAM页，一个8页的区</li>
<li>包括：
<ol type="1">
<li>用于游标或假脱机操作以及临时大型对象（LOB）存储的工作表</li>
<li>用于哈希联接或哈希聚合操作的工作文件</li>
<li>用于创建或重新生成索引等操作（如果指定了SORT_IN_TEMPDB）的中间排序结果，或者某些GROUP
BY、ORDER BY或UNION查询的中间排序结果</li>
</ol></li>
</ol>
<h3 id="版本存储区">版本存储区</h3>
<ol type="1">
<li>数据页的集合，包含支持使用行版本控制的功能所需的数据行</li>
<li>主要用来支持快照（Snapshot）事务隔离级别</li>
<li>主要有两个版本存储区：公用版本存储区和联机索引生成版本存储区</li>
</ol>
<h3 id="tempdb空间使用跟踪">Tempdb空间使用跟踪</h3>
<p>使用管理视图<code>sys.dm_db_file_space_usage</code>，包含的字段有：</p>
<table>

<thead>
<tr class="header">
<th>列　　名</th>
<th>数据类型</th>
<th>说　　明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>database_id</td>
<td>smallint</td>
<td>数据库ID</td>
</tr>
<tr class="even">
<td>file_id</td>
<td>smallint</td>
<td>文件ID。 file_id映射到sys.dm_io_virtual_file_
stats中的file_id，并映射到sys.sysfiles中的fileid</td>
</tr>
<tr class="odd">
<td>unallocated_extent_ page_count</td>
<td>Bigint</td>
<td>文件的未分配区中的总页数。 不包括已分配区中的未使用页</td>
</tr>
<tr class="even">
<td>version_store_ reserved_page_count</td>
<td>Bigint</td>
<td>为版本存储分配的统一区中的总页数</td>
</tr>
<tr class="odd">
<td>user_object_reserved_ page_count</td>
<td>bigint</td>
<td>从统一区为数据库中的用户对象分配的总页数。计数中包括已分配区中未使用的页。
可使用sys.allocation_units目录视图中的total_pages列来返回用户对象中每个分配单元的保留页计数</td>
</tr>
<tr class="even">
<td>internal_object_ reserved_page_count</td>
<td>bigint</td>
<td>从统一区为文件中的内部对象分配的总页数。计数中包括已分配区中未使用的页。
不存在可返回每个内部对象的页计数的目录视图或动态管理对象</td>
</tr>
<tr class="odd">
<td>mixed_extent_page_ count</td>
<td>bigint</td>
<td>文件的已分配混合区中的已分配和未分配总页数。混合区包含分配给不同对象的页。此计数包含文件中的所有IAM页</td>
</tr>
</tbody>
</table>
<p>如何设置tempdb初始大小：</p>
<ol type="1">
<li>基于生产环境进行测试
<ol type="1">
<li>设置tempdb的自动增长</li>
<li>模拟各个单独的查询或工作任务，同时监视tempdb空间使用</li>
<li>模拟执行一些系统维护操作，例如，重新生成索引，同时监视tempdb空间</li>
<li>使用前面2和3步中tempdb空间使用值来预测总的工作负荷下，会使用多少空间；并针对计划的并发度调整此值</li>
<li>根据第4步得到的值，设置tempdb在生产环境下的初始大小。同时也开启自动增长</li>
</ol></li>
</ol>
<h3
id="案例通过脚本监视tempdb空间使用">案例：通过脚本监视tempdb空间使用</h3>
<p>以一定的间隔时间运行能够监视系统运行状况的DBCC命令、查询管理视图（DMV）以及管理函数（DMF）等，把结果输出到一个文件里。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 被监控的query<br><span class="hljs-keyword">select</span> @<span class="hljs-variable">@spid</span><br>go<br>use AdventureWorks2019<br>go<br><span class="hljs-keyword">select</span> getdate()<br>go<br><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">into</span> #mySalesOrderDetail<br><span class="hljs-keyword">from</span> Sales.SalesOrderDetail<br><span class="hljs-comment">-- 创建一个临时表</span><br><span class="hljs-comment">-- 这个操作应该会申请用户对象页面</span><br>go<br>waitfor delay <span class="hljs-string">&#x27;0:0:2&#x27;</span><br><span class="hljs-keyword">select</span> getdate()<br>go<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> #mySalesOrderDetail<br><span class="hljs-comment">-- 删除一个临时表</span><br><span class="hljs-comment">-- 这个操作后用户对象页面数量应该会下降</span><br>go<br>waitfor delay <span class="hljs-string">&#x27;0:0:2&#x27;</span><br><span class="hljs-keyword">select</span> getdate()<br>go<br><span class="hljs-keyword">select</span> top <span class="hljs-number">100000</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span><br>[Sales].[SalesOrderDetail]<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> [Sales].[SalesOrderHeader] <br><span class="hljs-keyword">ON</span> [Sales].[SalesOrderHeader] .[SalesOrderID] <span class="hljs-operator">=</span> [Sales].[SalesOrderHeader].[SalesOrderID];<br><span class="hljs-comment">-- 这里做了一个比较大的联接 </span><br><span class="hljs-comment">-- 应该会有系统对象的申请.</span><br>go<br><span class="hljs-keyword">select</span> getdate()<br><span class="hljs-comment">-- join 语句做完以后系统对象页面数目应该下降</span><br>go<br><br></code></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 监视脚本<br># 先运行此脚本，选择<span class="hljs-keyword">Result</span> <span class="hljs-keyword">to</span> File，然后运行被测试query，被测试运行结束后，停止监视脚本<br>use tempdb<br><span class="hljs-comment">-- 每隔1秒钟运行一次，直到用户手工终止脚本运行</span><br>while <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">select</span> getdate()<br><span class="hljs-comment">-- 从文件级看tempdb使用情况</span><br>dbcc showfilestats<br><span class="hljs-comment">-- Query 1</span><br><span class="hljs-comment">-- 返回所有做过空间申请的会话信息</span><br><span class="hljs-keyword">Select</span> <span class="hljs-string">&#x27;Tempdb&#x27;</span> <span class="hljs-keyword">as</span> DB, getdate() <span class="hljs-keyword">as</span> <span class="hljs-type">Time</span>,<br>    <span class="hljs-built_in">SUM</span> (user_object_reserved_page_count)<span class="hljs-operator">*</span><span class="hljs-number">8</span> <span class="hljs-keyword">as</span> user_objects_kb,          <br>    <span class="hljs-built_in">SUM</span> (internal_object_reserved_page_count)<span class="hljs-operator">*</span><span class="hljs-number">8</span> <span class="hljs-keyword">as</span> internal_objects_kb,  <br>    <span class="hljs-built_in">SUM</span> (version_store_reserved_page_count)<span class="hljs-operator">*</span><span class="hljs-number">8</span>  <span class="hljs-keyword">as</span> version_store_kb,      <br>    <span class="hljs-built_in">SUM</span> (unallocated_extent_page_count)<span class="hljs-operator">*</span><span class="hljs-number">8</span> <span class="hljs-keyword">as</span> freespace_kb                <br><span class="hljs-keyword">From</span> sys.dm_db_file_space_usage<br><span class="hljs-keyword">Where</span> database_id <span class="hljs-operator">=</span> <span class="hljs-number">2</span><br><span class="hljs-comment">-- Query 2</span><br><span class="hljs-comment">-- 这个管理视图能够反映当时tempdb空间的总体分配</span><br><span class="hljs-keyword">SELECT</span> t1.session_id,<br>t1.internal_objects_alloc_page_count,  t1.user_objects_alloc_page_count,<br>t1.internal_objects_dealloc_page_count , t1.user_objects_dealloc_page_count,<br>t3.<span class="hljs-operator">*</span><br><span class="hljs-keyword">from</span> sys.dm_db_session_space_usage <span class="hljs-keyword">as</span>  t1 ,<br><span class="hljs-comment">-- 反映每个会话累计空间申请</span><br>sys.dm_exec_sessions <span class="hljs-keyword">as</span> t3<br><span class="hljs-comment">-- 每个会话的信息</span><br><span class="hljs-keyword">where</span><br>t1.session_id <span class="hljs-operator">=</span> t3.session_id<br><span class="hljs-keyword">and</span> (t1.internal_objects_alloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br><span class="hljs-keyword">or</span> t1.user_objects_alloc_page_count <span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br><span class="hljs-keyword">or</span> t1.internal_objects_dealloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br><span class="hljs-keyword">or</span> t1.user_objects_dealloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>)<br><span class="hljs-comment">-- Query 3</span><br><span class="hljs-comment">-- 返回正在运行并且做过空间申请的会话正在运行的语句</span><br><span class="hljs-keyword">SELECT</span> t1.session_id,<br>st.text<br><span class="hljs-keyword">from</span> sys.dm_db_session_space_usage <span class="hljs-keyword">as</span> t1,<br>sys.dm_exec_requests <span class="hljs-keyword">as</span> t4<br><span class="hljs-keyword">CROSS</span> APPLY sys.dm_exec_sql_text(t4.sql_handle) <span class="hljs-keyword">AS</span> st<br> <span class="hljs-keyword">where</span>  t1.session_id <span class="hljs-operator">=</span> t4.session_id <br>   <span class="hljs-keyword">and</span> t1.session_id <span class="hljs-operator">&gt;</span><span class="hljs-number">50</span> <br><span class="hljs-keyword">and</span> (t1.internal_objects_alloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> <br><span class="hljs-keyword">or</span> t1.user_objects_alloc_page_count <span class="hljs-operator">&gt;</span><span class="hljs-number">0</span><br><span class="hljs-keyword">or</span> t1.internal_objects_dealloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span> <br><span class="hljs-keyword">or</span> t1.user_objects_dealloc_page_count<span class="hljs-operator">&gt;</span><span class="hljs-number">0</span>)<br>waitfor delay <span class="hljs-string">&#x27;0:0:1&#x27;</span><br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615093337598.png"
alt="测试脚本输出" />
<figcaption aria-hidden="true">测试脚本输出</figcaption>
</figure>
<h2 id="数据文件的收缩">数据文件的收缩</h2>
<h3 id="删除数据">删除数据</h3>
<p>DELETE命令并不能完全释放表格或索引的数据结构以及它们申请的页面</p>
<p>删除数据释放空间方法：</p>
<ol type="1">
<li>在表格上建立聚集索引</li>
<li>如果所有数据都不要了，要使用TRUNCATE TABLE而不是DELETE
<ol type="1">
<li>TRUNCATE TABLE释放数据页，不记录事务日志</li>
<li>TRUNCATE TABLE始终锁定表和页，而不是锁定各行</li>
<li>TRUNCATE TABLE不留下空页</li>
<li>TRUNCATE
TABLE删除表中的所有行，但表结构及其列、约束、索引等保持不变</li>
</ol></li>
<li>如果表格本身不要了，就直接DROP TABLE</li>
</ol>
<h3 id="收缩数据库">收缩数据库</h3>
<p>准备工作：</p>
<ol type="1">
<li>确认收缩量的大小不超过当前文件的空闲空间的大小，释放出相应空间</li>
<li>主数据文件（Primary
File）是不能被清空的。能被完全清空的只有辅助数据文件</li>
<li>如果要把一个文件组整个清空，要删除分配在这个文件组上的对象（表格或索引），或者把它们移到其他文件组上</li>
</ol>
<p><code>DBCC SHRINKDATABASE</code></p>
<ol type="1">
<li><p>收缩指定数据库中的所有数据文件和日志文件的大小，不能对每个文件指定操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC SHRINKDATABASE   <br>( database_name <span class="hljs-operator">|</span> database_id <span class="hljs-operator">|</span> <span class="hljs-number">0</span>   <br>     [ , target_percent ]   <br>     [ , &#123; NOTRUNCATE <span class="hljs-operator">|</span> TRUNCATEONLY &#125; ]   <br>)  <br>[ <span class="hljs-keyword">WITH</span> <br>    NO_INFOMSGS ,<br>    &#123;     <br>         [ WAIT_AT_LOW_PRIORITY <br>            [ ( <br>                  <span class="hljs-operator">&lt;</span>wait_at_low_priority_option_list<span class="hljs-operator">&gt;</span><br>             )] <br>         ] <br>    &#125;<br>]<br>       <br><span class="hljs-operator">&lt;</span> wait_at_low_priority_option <span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span> <br> ABORT_AFTER_WAIT <span class="hljs-operator">=</span> &#123; SELF <span class="hljs-operator">|</span> BLOCKERS &#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<p><code>DBCC SHRINKFILE</code></p>
<ol type="1">
<li><p>收缩当前数据库指定数据文件或日志文件的大小</p></li>
<li><p>本质是把使用过的区前移，将没有在使用的区从文件中移除以达到减小文件大小的效果。当很多空页面分布在各个区，导致没有很多空的区的时候，收缩效果会不好。</p></li>
<li><p>运行时会扫描数据文件并对正在读的页面加锁，对性能有一定影响；运行时其他用户可以对数据库进行读写操作</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC SHRINKFILE   <br>(  <br>    &#123; file_name <span class="hljs-operator">|</span> file_id &#125;   <br>    &#123; [ , EMPTYFILE ]   <br>    <span class="hljs-operator">|</span> [ [ , target_size ] [ , &#123; NOTRUNCATE <span class="hljs-operator">|</span> TRUNCATEONLY &#125; ] ]  <br>    &#125;  <br>)  <br>[ <span class="hljs-keyword">WITH</span> <br>    NO_INFOMSGS ,<br>    &#123;     <br>         [ WAIT_AT_LOW_PRIORITY <br>            [ ( <br>                  <span class="hljs-operator">&lt;</span>wait_at_low_priority_option_list<span class="hljs-operator">&gt;</span><br>             )] <br>         ] <br>]<br>       <br><span class="hljs-operator">&lt;</span> wait_at_low_priority_option <span class="hljs-operator">&gt;</span> ::<span class="hljs-operator">=</span> <br> ABORT_AFTER_WAIT <span class="hljs-operator">=</span> &#123; SELF <span class="hljs-operator">|</span> BLOCKERS &#125;<br></code></pre></td></tr></table></figure></li>
</ol>
<h3 id="案例收缩数据库">案例：收缩数据库</h3>
<p>创建数据库，并创建一个每一行都会占用一个页面的表格，由于表格上没有聚集索引，表格以堆存储。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> database test_shrink<br>go<br>use test_shrink<br>go<br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> show_extent<br>(a <span class="hljs-type">int</span>,<br>b nvarchar(<span class="hljs-number">3900</span>))<br>go<br><span class="hljs-keyword">declare</span> <span class="hljs-variable">@i</span> <span class="hljs-type">int</span><br><span class="hljs-keyword">set</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br>while <span class="hljs-variable">@i</span> <span class="hljs-operator">&lt;=</span><span class="hljs-number">1000</span><br><span class="hljs-keyword">begin</span><br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">1</span>, REPLICATE ( N<span class="hljs-string">&#x27;a&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">2</span>, REPLICATE ( N<span class="hljs-string">&#x27;b&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">3</span>, REPLICATE ( N<span class="hljs-string">&#x27;c&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">4</span>, REPLICATE ( N<span class="hljs-string">&#x27;d&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">5</span>, REPLICATE ( N<span class="hljs-string">&#x27;e&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">6</span>, REPLICATE ( N<span class="hljs-string">&#x27;f&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">7</span>, REPLICATE ( N<span class="hljs-string">&#x27;g&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> show_extent <span class="hljs-keyword">values</span> (<span class="hljs-number">8</span>, REPLICATE ( N<span class="hljs-string">&#x27;h&#x27;</span> ,<span class="hljs-number">3900</span> ))<br><span class="hljs-keyword">set</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">=</span> <span class="hljs-variable">@i</span> <span class="hljs-operator">+</span><span class="hljs-number">1</span><br><span class="hljs-keyword">end</span><br>dbcc showcontig(<span class="hljs-string">&#x27;show_extent&#x27;</span>)<br>go<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615101858653.png"
alt="DBCC SHOWCONTIG结果" />
<figcaption aria-hidden="true">DBCC SHOWCONTIG结果</figcaption>
</figure>
<p>可以看到占用了8000页</p>
<p>删除每个区里面的7个页面，只保留a=5的这些记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">delete</span> show_extent <span class="hljs-keyword">where</span> a <span class="hljs-operator">&lt;&gt;</span><span class="hljs-number">5</span><br>go<br>sp_spaceused show_extent<br>go<br>dbcc showcontig(<span class="hljs-string">&#x27;show_extent&#x27;</span>)<br>go<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615132811184.png"
alt="sp_spaceused结果" />
<figcaption aria-hidden="true">sp_spaceused结果</figcaption>
</figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615132828368.png"
alt="dbcc showcontig结果" />
<figcaption aria-hidden="true">dbcc showcontig结果</figcaption>
</figure>
<p>可以发现，这里<code>Pages Scanned</code>说一半以上的pages还在使用，<code>Scan Density</code>
说明区里页的占用率不高，松散，<code>Extents Scanned</code>说明所有区都还在被使用。</p>
<p>这个时候如果进行收缩</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">dbcc shrinkfile (<span class="hljs-number">1</span>, <span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615133740691.png"
alt="收缩后结果" />
<figcaption aria-hidden="true">收缩后结果</figcaption>
</figure>
<p>会发现是没有什么效果的。</p>
<p>如果重建索引，把页面重新排列一次</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> clustered index show_I <br><span class="hljs-keyword">on</span> show_extent (a)<br>go<br>dbcc showcontig(<span class="hljs-string">&#x27;show_extent&#x27;</span>)<br>go<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615134144834.png"
alt="重建索引后dbcc showcontig结果" />
<figcaption aria-hidden="true">重建索引后dbcc
showcontig结果</figcaption>
</figure>
<p>可以发现，重建索引后，由于之前以堆存放的页面以B数重新排列，被占用的页面释放出来，被占用的区也释放出来。密度也增加了。这个时候再去收缩就有效果了。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">dbcc shrinkfile (<span class="hljs-number">1</span>, <span class="hljs-number">40</span>)<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615134518079.png"
alt="重建索引后收缩结果" />
<figcaption aria-hidden="true">重建索引后收缩结果</figcaption>
</figure>
<p>如果不想建聚集索引，可能只有把这张表的数据先移走，然后清空表格，再把数据插回来</p>
<p>对于区中存放text或者image等数据（SQL
Server使用单独页面存放），重建索引不会影响到这些数据，应该怎么解决呢？</p>
<p>使用<code>DBCC EXTENTINFO</code>打出数据文件里的所有区的分配信息，然后计算每个对象理论上区的数目和实际的数目。如果实际数目远大于理论的数目，那这个对象就是碎片过多，考虑重建对象。</p>
<h2 id="日志文件不停地增长">日志文件不停地增长</h2>
<h3 id="sql-server需要的日志记录">SQL Server需要的日志记录</h3>
<ol type="1">
<li>所有没有经过“检查点”的日志记录，经过检查点后会保证所有的“脏页”都被写入硬盘
<ol type="1">
<li>对于不需要的日志记录，在每个检查点会进行截断，把这些记录占用的空间标志成可重用</li>
<li>做检查点的频率取决于服务器属性“Recovery Interval”</li>
</ol></li>
<li>所有没有提交的事务所产生的日志记录，以及在它们之后的所有日志记录。
<ol type="1">
<li>因为一个没有提交的事务可以在任何时候回滚，需要标记所有从这个事务开始的日志记录</li>
</ol></li>
<li>所有要做备份的日志记录</li>
<li>有其他需要读取日志的数据库功能模块
<ol type="1">
<li>事务型复制（Transactional Replication）</li>
<li>和数据库镜像（Database Mirroring）</li>
</ol></li>
</ol>
<h3 id="日志文件不停地增长通常原因">日志文件不停地增长通常原因</h3>
<ol type="1">
<li>数据库恢复模式不是简单模式，但是没有安排日志备份导致没有截断，无法释放空间</li>
<li>数据库上面有一个很长时间都没有提交的事务，导致一直记录日志</li>
<li>数据库上有一个很大的事务正在运行</li>
<li>数据库复制或者镜像出了异常</li>
</ol>
<h3 id="案例日志增长原因定位">案例：日志增长原因定位</h3>
<ol type="1">
<li><p>检查日志现在使用情况和数据库状态</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 检查当前日志的使用百分比、数据库恢复模式和日志重用等待状态<br>DBCC SQLPERF(LOGSPACE)<br>GO<br># 反映<span class="hljs-keyword">SQL</span> Server认为的，不能截断日志的原因<br><span class="hljs-keyword">SELECT</span> name, recovery_model_desc, log_reuse_wait,log_reuse_wait_desc <br>    <span class="hljs-keyword">FROM</span> sys.databases<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615144944222.png"
alt="检查数据库日志不能TRUNCATE的直接原因" />
<figcaption
aria-hidden="true">检查数据库日志不能TRUNCATE的直接原因</figcaption>
</figure>
<table>

<thead>
<tr class="header">
<th>1.</th>
<th>log_reuse_wait值</th>
<th>log_reuse_wait_desc值</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>NOTHING</td>
<td>当前有一个或多个可重用的虚拟日志文件</td>
</tr>
<tr class="even">
<td>1</td>
<td>CHECKPOINT</td>
<td>自上次日志截断之后，尚未出现检查点，或者日志头部尚未跨一个虚拟日志文件移动范围（所有恢复模式）</td>
</tr>
<tr class="odd">
<td>2</td>
<td>LOG_BACKUP</td>
<td>SQL
Server在等待着日志备份。要求日志备份将日志标头前移（仅适用于完整恢复模式或大容量日志恢复模式）。
日志备份完成后，日志标头将前移，并且一些日志空间可能会变为可重新使用</td>
</tr>
<tr class="even">
<td>3</td>
<td>ACTIVE_BACKUP_OR_ RESTORE</td>
<td>数据备份或还原正在进行（所有恢复模式）。
数据备份与活动事务的工作原理相同；数据备份运行时，将阻止截断</td>
</tr>
<tr class="odd">
<td>4</td>
<td>ACTIVE_TRANSACTION</td>
<td>事务处于活动状态（所有恢复模式）。 
有一个用户开启了一个长时间运行的事务。在这种情况下，可能需要那个用户将事务提交或者回滚以后，才能释放空间。
事务被延迟（仅适用于 SQL Server 2005 Enterprise Edition
及更高版本）。“延迟的事务”是有效的活动事务，因为某些资源不可用，其回滚受阻。</td>
</tr>
<tr class="even">
<td>5</td>
<td>DATABASE_MIRRORING</td>
<td>数据库镜像暂停，或者在高性能模式下，镜像数据库明显滞后于主体数据库（仅限于完整恢复模式）</td>
</tr>
<tr class="odd">
<td>6</td>
<td>REPLICATION</td>
<td>在事务复制过程中，与发布相关的事务仍未传递到分发数据库（仅限于完整恢复模式）</td>
</tr>
<tr class="even">
<td>7</td>
<td>DATABASE_SNAPSHOT_ CREATION</td>
<td>正在创建数据库快照（所有恢复模式）</td>
</tr>
<tr class="odd">
<td>8</td>
<td>LOG_SCAN</td>
<td>正在进行日志扫描（所有恢复模式）</td>
</tr>
<tr class="even">
<td>9</td>
<td>OTHER_TRANSIENT</td>
<td>此值当前未使用</td>
</tr>
</tbody>
</table></li>
<li><p>检查最老的活动事务</p>
<ol type="1">
<li><p>如果日志的大部分都在使用中，而且日志重用等待状态是ACTIVE_TRANSACTION，需要检查最久未提交的事务是谁申请的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 返回的是当前数据库最久未被提交的事务<br>DBCC OPENTRAN<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615150013988.png"
alt="最久未被提交的事务结果" />
<figcaption aria-hidden="true">最久未被提交的事务结果</figcaption>
</figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 查看来连接建立情况<br><span class="hljs-keyword">SELECT</span> st.text,t2.<span class="hljs-operator">*</span>                                                         <br>    <span class="hljs-keyword">FROM</span> sys.dm_exec_sessions <span class="hljs-keyword">AS</span> t2, sys.dm_exec_connections <span class="hljs-keyword">AS</span> t1<br>        <span class="hljs-keyword">CROSS</span> APPLY sys.dm_exec_sql_text(t1.most_recent_sql_handle) <span class="hljs-keyword">AS</span> st <br>    <span class="hljs-keyword">WHERE</span> t1.session_id <span class="hljs-operator">=</span> t2.session_id<br>        <span class="hljs-keyword">AND</span> t1.session_id <span class="hljs-operator">&gt;</span><span class="hljs-number">50</span>   <br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/15/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E7%A9%BA%E9%97%B4%E7%AE%A1%E7%90%86/image-20220615150143255.png"
alt="连接建立情况" />
<figcaption aria-hidden="true">连接建立情况</figcaption>
</figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"># 尝试关闭连接<br># 如果一个连接正处于提交或者回滚的过程中，<span class="hljs-keyword">SQL</span> Server会尊重它的执行而不去强行终止它<br>      KILL <span class="hljs-number">52</span><br></code></pre></td></tr></table></figure></li>
</ol></li>
</ol>
<h2 id="文件自动增长和自动收缩">文件自动增长和自动收缩</h2>
<h3
id="数据文件和日志文件空间申请特点">数据文件和日志文件空间申请特点</h3>
<p>数据文件</p>
<ol type="1">
<li>按所有文件空闲空间大小的比例分配
<ol type="1">
<li>假设3个文件空闲空间是200：100：100，40 MB的数据就按照20 MB:10 MB:10
MB的比例写入了这3个文件</li>
</ol></li>
<li>加入多个数据文件
<ol type="1">
<li>必须保证同一个文件组里的所有数据文件都有基本一样大小的空闲空间以达到分散I/O负载的目的</li>
</ol></li>
<li>如果文件全部写满
<ol type="1">
<li>会选取其中一个文件（可能是任意一个）做自动增长，所有后面的数据都写入这个做了自动增长的文件里，直到这个文件再次写满，SQL
Server要做下一次自动增长为止</li>
<li>很难达到I/O负载平衡的效果</li>
</ol></li>
</ol>
<p>日志文件：</p>
<ol type="1">
<li>按照严格的顺序写入
<ol type="1">
<li>在一个时间点只写其中的一个文件。只有这个文件写满了，SQL
Server才会写入另外一个</li>
</ol></li>
<li>加入多个日志文件对性能基本不会有什么帮助</li>
<li>如果文件全部写满
<ol type="1">
<li>SQL Server自动增长当前的日志文件，以保证日志记录的连续性</li>
</ol></li>
</ol>
<h3 id="数据库自增长设置">数据库自增长设置</h3>
<ol type="1">
<li>当某个操作触发了文件自动增长时，SQL
Server会让那个操作等待。直到文件自动增长结束了，原先的那个操作才能继续进行</li>
<li>要设置成按固定大小增长以避免一次增长太多或者太少</li>
<li>要定期监测各个数据文件的使用情况，尽量保证每个文件剩余的空间一样大，或者是期望的比例。</li>
<li>设置文件最大值</li>
<li>发生自增长后，要及时检查新的数据文件空间分配情况</li>
</ol>
<h3 id="数据库自动收缩">数据库自动收缩</h3>
<ol type="1">
<li>不推荐</li>
<li>治标不治本
<ol type="1">
<li>收缩后还是会增长</li>
</ol></li>
<li>数据文件收缩会给文件带来更多的碎片</li>
<li>对性能有不小影响</li>
</ol>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server 2012 实施与管理实战指南Note：高可用性和灾难恢复技术</title>
    <url>/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1
id="sql-server-2012-实施与管理实战指南note高可用性和灾难恢复技术">SQL
Server 2012 实施与管理实战指南Note：高可用性和灾难恢复技术</h1>
<p>SQL Server
“高可用性”和“灾难恢复”四个传统技术：故障转移群集(Cluster)、日志传送(Log
Shipping)、复制(Replication)和数据库镜像(database Mirroring)</p>
<h2 id="高可用性与灾难恢复">“高可用性”与“灾难恢复”</h2>
<p>数据库服务的可用时间=在线时间/（在线时间+宕机时间）</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608130753104-16546649635641.png"
alt="数据库服务的可用时间" />
<figcaption aria-hidden="true">数据库服务的可用时间</figcaption>
</figure>
<p>SQL Server服务由两部分组成：</p>
<ol type="1">
<li>SQL Server作为应用服务，由Windows上的可执行文件提供功能。</li>
<li>储存在硬盘上的数据。</li>
</ol>
<p>“高可用性”（High
Availability，简称HA）指的是数据库服务能够始终保持在线运行，针对的是软件或硬件问题造成的数据库系统不可用。</p>
<p>“灾难恢复”（Disaster
Recovery，简称DR）指的是当数据库中的数据发生损坏或者不可访问时，可以在尽可能短的时间恢复全部数据或者恢复尽可能多的数据，从而保证应用系统的正常运行，针对的是保存在数据库系统中的数据不可用。</p>
<h2 id="sql-server故障转移群集">SQL Server故障转移群集</h2>
<p><em>SQL
Server故障转移群集</em>是一项基于<em>Windows故障转移群集</em>的一种技术。</p>
<h3 id="windows故障转移群集">Windows故障转移群集</h3>
<h4 id="结构">结构</h4>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608131602446.png"
alt="故障转移群集的结构" />
<figcaption aria-hidden="true">故障转移群集的结构</figcaption>
</figure>
<ol type="1">
<li>Windows故障转移群集由多个服务器（Node）组成，每个Node都运行着Microsoft集群服务（MSCS）</li>
<li>共享磁盘（Shared Array）：存放需要共享的数据，如SQL
Server的数据库文件、错误日志等</li>
<li>本地磁盘（Drive
C）：每个节点的本地磁盘，存放不需要共享的内容。当某节点是活跃节点时，用户可以访问其本地磁盘而不能访问其他Node的本地磁盘。</li>
<li>私有网络（Private
Network）：由每个Node上的私有网卡相互连接形成，用于“心脏线”信号，即节点相互感知彼此是否正常工作，如某节点无法回应信号，即被排出群集。</li>
<li>公用网络（Public
Network）：外部资源通过节点上的公共网卡访问该节点。</li>
<li>混合网络（Mixed
Network）：由于私有网卡和公共网卡在物理上可以是一块网卡，群集可以通过一个网络完成私有和公共网络的功能。</li>
<li>虚拟服务器（Virtual
Server）：由群集内所有节点组成的一个（虚拟）服务器。有与群集内任何节点都不同的IP地址（虚拟IP）和机器名（虚拟网络名）。虚拟IP一定要和公共网络配置在同一个网段里。</li>
<li>资源：指在Windows群集中，虚拟IP，虚拟网络名，共享磁盘，SQL
Server等等。在任意时刻，只有群集中的一个节点（活跃节点，用户实际登录的节点）能提供用户所需的服务和资源，而其他节点都处于空闲状态。</li>
<li>活跃节点：当前拥有该群集资源的节点，由Windows群集服务决定。</li>
<li>客户端的连接指令始终都是一样的：指向虚拟IP，或者虚拟网络名，对虚拟服务器的请求会被转向到活跃节点上。</li>
</ol>
<h4 id="故障转移failover">故障转移（Failover）</h4>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608134016918.png"
alt="资源的故障转移" />
<figcaption aria-hidden="true">资源的故障转移</figcaption>
</figure>
<p>当前拥有资源的节点NodeA出现故障时，Windows群集会自动发起故障转移，转移后NodeB拥有资源。</p>
<p>故障转移发生：</p>
<ol type="1">
<li>由于故障自动切换</li>
<li>系统管理员手动切换</li>
</ol>
<h3 id="sql-server故障转移群集-1">SQL Server故障转移群集</h3>
<p>SQL Server故障转移群集，即将SQL
Server部署在Windows群集中的多个节点上以组成一个虚拟SQL
Server实例。在当前活跃节点不可用时，SQL
Server可以被切换到工作正常的节点上继续进行服务。</p>
<h4 id="sql-server群集资源组的结构">SQL Server群集资源组的结构</h4>
<p>“资源组”是由一个或者多个（相互关联）的资源组成的组，在任何时候每个资源组都仅属于其“活跃节点”，所有的故障转移都是以资源组为单位发生。</p>
<p>对于SQL Server资源组，通常包含以下资源：</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608144213186.png"
alt="故障转移群集管理器中查看SQL Server资源组的拥有者" />
<figcaption aria-hidden="true">故障转移群集管理器中查看SQL
Server资源组的拥有者</figcaption>
</figure>
<h5 id="sql-server网络名和sql-server-ip地址">SQL Server网络名和SQL
Server IP地址</h5>
<p>SQL Server实例拥有专属的虚拟网络名和IP地址，它们提供了应用程序访问SQL
Server时使用的机器名或者IP地址。SQL
Server群集并不使用Windows群集的虚拟网络名和虚拟IP地址来作为应用程序访问它的接口。</p>
<h5 id="sql-server和sql-server-agent">SQL Server和SQL Server Agent</h5>
<p>SQL Server群集中所有节点都安装有SQL Server和SQL Server
Agent服务以及与服务所对应的二进制文件、注册表键值等。</p>
<p>在群集正常运行的情况下，只有活跃节点的SQL
Server实例是Running的，其他节点上都是Stopped。</p>
<p>SQL Server资源名：</p>
<ol type="1">
<li>SQL Server是默认实例，资源名为SQL Sever</li>
<li>SQL Server是命名实例，资源名为SQL Server（实例名），eg “SQL Server
(MSSQLSERVER)”</li>
</ol>
<p>客户端程序通过“虚拟网络名”访问SQL Server实例。</p>
<h5 id="共享磁盘">共享磁盘</h5>
<p>共享磁盘资源可以是一块<em>逻辑磁盘</em>，也可以是一块磁盘上的一个<em>mount
point</em>。</p>
<p>共享磁盘保存SQL Server群集实例的：</p>
<ol type="1">
<li>数据库的所有数据文件和事务日志文件（MDF，NDF和LDF）</li>
<li>SQL Server和SQL Server Agent的日志文件（ERRORLOG）</li>
<li>其他的文件和目录</li>
</ol>
<p>共享磁盘和SQL Server必须在用一资源组里，SQL
Server依赖于共享磁盘。</p>
<p>一个共享磁盘资源只能属于一个SQL Server实例，但是一个SQL
Server群集实例可以使用多个共享磁盘。</p>
<h5 id="其他">其他</h5>
<p>可能包含：</p>
<ol type="1">
<li>File Share资源：如果 SQL Server要使用FileStream</li>
<li>Analysis Services资源</li>
</ol>
<h5 id="资源状态">资源状态</h5>
<p><strong>上线（online）：</strong>该资源在某个节点上正常工作中。</p>
<p><strong>离线（offline）：</strong>该资源在某个节点上处于停止工作状态，无法提供相应的服务。</p>
<p><strong>失败（failed）：</strong>该资源在某节点尝试上线，但是由于某些异常无法上线成功。</p>
<p><strong>上线挂起（online
pending）：</strong>资源尝试进入上线状态，但是还没完全成功上线。</p>
<p><strong>离线挂起（offline
pending）：</strong>资源尝试进入离线状态，但是还没完全成功离线。</p>
<h4 id="集群资源的配置">集群资源的配置</h4>
<p>在 <strong>Properties</strong>中，我们可以对于群集资源进行设置：</p>
<h5 id="dependencies">Dependencies</h5>
<p>一个资源所依赖的其他资源必须要和这个资源处于<u>同一个资源组</u>里，跨资源组的依赖关系是不存在的</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608151524630.png"
alt="Dependencies选择卡" />
<figcaption aria-hidden="true">Dependencies选择卡</figcaption>
</figure>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608151633015.png"
alt="SQL Server资源组中属性的依赖关系" />
<figcaption aria-hidden="true">SQL
Server资源组中属性的依赖关系</figcaption>
</figure>
<h5 id="policies">Policies</h5>
<p>Policies决定了该资源发生故障转移时的行为。</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608151828624.png"
alt="Policies选择卡" />
<figcaption aria-hidden="true">Policies选择卡</figcaption>
</figure>
<p>Affect the Group设置：</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />If resource fails,
attempt restart on current node</li>
<li><input type="checkbox" disabled="" checked="" />If restart is
unsuccessful, fail over all resources in this service or
application</li>
</ul>
<p>​ 适用于：SQL
Server资源，共享磁盘资源，虚拟IP地址资源，虚拟服务名资源</p>
<p>Not affect the Group设置：</p>
<ul class="task-list">
<li><input type="checkbox" disabled="" checked="" />If resource fails,
attempt restart on current node</li>
<li><input type="checkbox" disabled="" />If restart is unsuccessful,
fail over all resources in this service or application</li>
</ul>
<p>​ 适用于：（出于最大化高可用目的，消除不必要的Failover）SQL Server
Agent资源，Fill Share资源，Analysis Services资源</p>
<h5 id="advanced-policies">Advanced Policies</h5>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608152531006.png"
alt="Advanced Policies选择卡" />
<figcaption aria-hidden="true">Advanced Policies选择卡</figcaption>
</figure>
<p><code>Basic resource health check interval</code>和<code>Thorough resource health check interval</code>是Windows
Cluster在不同时间间隔做的两种不同程度的检查（Looks alive check，Is alive
check），用于确认每个资源是否在正常工作。</p>
<h3 id="sql-server群集什么时候会发生故障转移">SQL
Server群集什么时候会发生“故障转移”</h3>
<p>当Looks alive check或Is alive
check检查失败时，进行故障转移。由于故障转移一般是意外发生的，所以SQL
Server切换到新节点以后，还需要一段时间来做数据库的recovery。</p>
<p>群集里的每个资源都是一种资源类型。根据不同类型的资源，会使用不同的方式进行isalive和looksalive检查。
| 资源 | 资源类型 | | ---------- | ------------ | | 共享磁盘 |
physicaldisk | | 虚拟IP | IP Address | | SQL Server | SQL Server |</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/clip_image002.png"
alt="资源类型、资源DLL和资源的关系" />
<figcaption
aria-hidden="true">资源类型、资源DLL和资源的关系</figcaption>
</figure>
<p>Windows群集服务进程clussvc.exe会产生名为RHS.exe的进程，RHS.exe会装载resource
dll，并且调用dll中定义的方法来检查相应resource的状态。一个资源其属性的Advanced
Polices选项卡中如果没有勾选“run this resource in a separate Resource
”，它的resource
dll就会装载在一个默认的RHS.exe中；反之，则会有一个单独的RHS.exe来装载该资源的resource
dll。所以在任务管理器中你可能看到多个RHS.exe进程。</p>
<figure>
<img
src="/2022/07/17/SQL%20Server%202012%20%E5%AE%9E%E6%96%BD%E4%B8%8E%E7%AE%A1%E7%90%86%E5%AE%9E%E6%88%98%E6%8C%87%E5%8D%97Note%EF%BC%9A%E9%AB%98%E5%8F%AF%E7%94%A8%E6%80%A7%E5%92%8C%E7%81%BE%E9%9A%BE%E6%81%A2%E5%A4%8D%E6%8A%80%E6%9C%AF/image-20220608162438129.png"
alt="多个RHS.exe进程" />
<figcaption aria-hidden="true">多个RHS.exe进程</figcaption>
</figure>
<p>Windows群集自带的资源类型：</p>
<ol type="1">
<li>physical disk, IP, network name和DTC等</li>
<li>检查的方法定义在resource DLL，<code>clusres.dll</code>中</li>
</ol>
<p>非Windows群集自带的资源类型：</p>
<ol type="1">
<li><p>SQL Server</p></li>
<li><p>如有专属资源类型和专属resource dll，在resource
dll中定义检查方法</p>
<blockquote>
<p>SQL ServerD的resource dll：</p>
<p>SQL Server资源（通常affect the group模式）
--&gt;<code>sqsrvres.dll</code></p>
<p>​ Looksalive：默认5秒一次，通过服务控制管理器（Service Control
Manager，简称SCM）检查SQL Server服务在活跃节点是否处于“启动状态”</p>
<p>​
Isalive：默认60秒一次，如lookalive检查的结果失败，立刻触发Isalive检查。SQL
2012之前，通过连 接SQL
Server群集实例并获取运行命令的返回结果来进行判断。如果连接不上SQL
Server群集实例或
者语句运行失败，那么Isalive检查失败。此时Windows群集会再做3-5次（根据Windows的版本和设置
不同）Isalive检查。如最终检查失败，则进行故障转移。</p>
<p>SQL Server Agent资源--&gt;<code>sqagtres.dll</code></p>
</blockquote></li>
</ol>
<p>”通用服务“（Generic Service）资源类型：</p>
<ol type="1">
<li>Analysis Service</li>
<li>使用<code>clusres.dll</code>来作为resource
dll并沿用定义进行检查。</li>
</ol>
<p>Cluster-aware服务：</p>
<ol type="1">
<li>可以通过resource dll形成群集资源</li>
<li>SQL Server、SQL Server Agent，Analysis Service服务</li>
</ol>
<p>非Cluster-aware服务：</p>
<ol type="1">
<li>无法通过任何resource
dll在Windows群集中形成资源，即使安装在群集的节点上也会被视作安装在单机环境，无法故障转移。</li>
<li>SQL browser, Reporting Service等</li>
<li>Integration
Services不是Cluster-aware，可以人为配置为群集资源（不推荐），但是不具有自动故障转移功能。</li>
</ol>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Note</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server Backup</title>
    <url>/2022/06/06/SQL%20Server%20Backup/</url>
    <content><![CDATA[<h1 id="sql-server-backup">SQL Server Backup</h1>
<p><strong>Full Backup</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">backup database AdventureWorks2019 <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\Windows\AdventureWorks2019_20220602.bak&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>If get an error like this:</p>
<figure>
<img src="/2022/06/06/SQL%20Server%20Backup/image-20220606100125253.png"
alt="image-20220606100125253" />
<figcaption aria-hidden="true">image-20220606100125253</figcaption>
</figure>
<p>It means that the SQL server has no permission to the location. To
fix this, in the <strong>SQL Server Configuration Manager</strong>, we
can find that the SQL service is logged on as
<code>NT Service\MSSQLSERVER</code>.</p>
<figure>
<img src="/2022/06/06/SQL%20Server%20Backup/image-20220606100346465.png"
alt="image-20220606100346465" />
<figcaption aria-hidden="true">image-20220606100346465</figcaption>
</figure>
<p>Then right-click on the folder you want to access, <strong>properties
--&gt; security</strong>, and add permission to the
<code>NT Service\MSSQLSERVER</code>.</p>
<figure>
<img src="/2022/06/06/SQL%20Server%20Backup/image-20220606100858530.png"
alt="image-20220606100858530" />
<figcaption aria-hidden="true">image-20220606100858530</figcaption>
</figure>
<p><strong>Backup with differential</strong></p>
<p>This will back up the changed pages from the previous full
backup.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- backup changes start from last full backup, save changed page only</span><br>backup database AdventureWorks2019 <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\Users\t-jxie\Downloads\AdventureWorks2019_20220602_2.bak&#x27;</span> <span class="hljs-keyword">with</span> differential;<br></code></pre></td></tr></table></figure>
<p><strong>Backup with copy_only</strong></p>
<p>This will leave the DCM (diff change map) unchanged, meaning that if
we are back up with differential, it will also backup changes from the
last full backup.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- backup, leave (DCM) diff change map unchanged, compressed</span><br>backup database AdventureWorks2019 <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\Users\t-jxie\Downloads\AdventureWorks2019_20220602_2.bak&#x27;</span> <span class="hljs-keyword">with</span> copy_only, compression;<br></code></pre></td></tr></table></figure>
<p>The DCM records the changes made to the page of the database, we can
view the DCM of the specific database by</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">dbcc page(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">6</span>, <span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure>
<figure>
<img src="/2022/06/06/SQL%20Server%20Backup/image-20220606101710464.png"
alt="image-20220606101710464" />
<figcaption aria-hidden="true">image-20220606101710464</figcaption>
</figure>
<p><strong>Backup log files</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">backup log AdventureWorks2019 <span class="hljs-keyword">to</span> disk <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\Users\t-jxie\Downloads\AdventureWorks2019_20220602.trn&#x27;</span>;<br></code></pre></td></tr></table></figure>
<p>We can view the information of log files of databases by</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">dbcc sqlperf(logspace)<br></code></pre></td></tr></table></figure>
<figure>
<img src="/2022/06/06/SQL%20Server%20Backup/image-20220606101859208.png"
alt="image-20220606101859208" />
<figcaption aria-hidden="true">image-20220606101859208</figcaption>
</figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>T-SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL Server IAM Page</title>
    <url>/2022/06/26/SQL%20Server%20IAM%20Page/</url>
    <content><![CDATA[<h1 id="sql-server-iam-page">SQL Server IAM Page</h1>
<p>Index Allocation Map (IAM) pages keep track of the extents in a 4 GB
section of a database file used by an allocation unit.</p>
<p><u>Allocation unit</u></p>
<p>An allocation unit is a set of pages belonging to a single partition
in a table or index and comprises pages of one of three storage
types:</p>
<ol type="1">
<li>pages holding regular in-row data</li>
<li>pages holding Large Object (LOB) data</li>
<li>pages holding row-overflow data</li>
</ol>
<p><u>Multiple IAM pages</u></p>
<p>A single IAM page covers only a 4 GB section of a single file.</p>
<ol type="1">
<li>if the partition spans files</li>
<li>if the file is more than 4 GB in size</li>
<li>if the partition uses pages in more than one 4 GB section</li>
</ol>
<p><u>IAM page structure</u></p>
<ol type="1">
<li>96-byte page header</li>
<li>An IAM page header
<ol type="1">
<li>Contains eight page-pointer slots</li>
</ol></li>
<li>Contains bitmap
<ol type="1">
<li>A set of bits that map a range of extents onto a file</li>
<li>Each bit of the bitmap represents an extent in the range</li>
<li>1, is allocated; 0, unallocated</li>
</ol></li>
</ol>
<p>Running the defined procedure <code>sp_AllocationMetadata</code> in
the <code>AdventureWorks2019</code>, we can see the page number of the
first IAM pages.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">EXEC</span> [sp_AllocationMetadata] N<span class="hljs-string">&#x27;HumanResources.Employee&#x27;</span>;<br>GO<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/26/SQL%20Server%20IAM%20Page/image-20220623131334311.png"
alt="sp_AllocationMetadata result" />
<figcaption aria-hidden="true">sp_AllocationMetadata result</figcaption>
</figure>
<p>As we can see, the object <code>Employee</code> has 6 partitions. For
the partition that has partition ID of <code>72057594056933376</code>,
its first IAM page is <code>2105</code>.</p>
<p>Then let's take a closer look at the page <code>2105</code>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC TRACEON(<span class="hljs-number">3604</span>)<br>DBCC PAGE(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2105</span>, <span class="hljs-number">3</span>)<br>DBCC TRACEOFF(<span class="hljs-number">3604</span>)<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/26/SQL%20Server%20IAM%20Page/image-20220623133029678.png"
alt="Mode 3 result" />
<figcaption aria-hidden="true">Mode 3 result</figcaption>
</figure>
<p>The 8 slots listed under the <code>Single Page Allocations</code>
mean they are in the mixed extent.</p>
<p>Following the <code>Extent Alloc Status Slot</code> are pages in
uniform extent. The result suggests that page <code>12640</code> and
page <code>12672</code> are allocated</p>
<p>We can check the allocation status by running the query:</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> allocated_page_file_id <span class="hljs-keyword">AS</span> [FileID],<br>allocated_page_page_id <span class="hljs-keyword">AS</span> [PageID],<br>page_type_desc,extent_page_id<span class="hljs-operator">/</span><span class="hljs-number">8</span> <span class="hljs-keyword">AS</span> ExtentID,<br>is_mixed_page_allocation,<br>extent_page_id <span class="hljs-keyword">AS</span> [<span class="hljs-keyword">First</span> Page <span class="hljs-keyword">in</span> Extent],<br>extent_page_id<span class="hljs-operator">+</span><span class="hljs-number">7</span> <span class="hljs-keyword">AS</span> [LastPage <span class="hljs-keyword">in</span> Extent],<br>is_allocated <br><span class="hljs-keyword">FROM</span> sys.dm_db_database_page_allocations(db_id(),object_id(<span class="hljs-string">&#x27;HumanResources.Employee&#x27;</span>),<span class="hljs-keyword">null</span>,<span class="hljs-keyword">null</span>,<span class="hljs-string">&#x27;detailed&#x27;</span>)  <br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> allocated_page_page_id<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/26/SQL%20Server%20IAM%20Page/image-20220623134406196.png"
alt="Allocation status result" />
<figcaption aria-hidden="true">Allocation status result</figcaption>
</figure>
<p>As shown in the result, page <code>12640</code> and
<code>12672</code> are allocated, and clearly there are
<code>(12672-12640)/8=4</code> extents between them, which is proved by
the corresponding extent ID, <code>1580</code> and
<code>1584</code>.</p>
<p>Let's validate our observation by dive into the page in mode 1.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">DBCC TRACEON(<span class="hljs-number">3604</span>)<br>DBCC PAGE(<span class="hljs-string">&#x27;AdventureWorks2019&#x27;</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2105</span>, <span class="hljs-number">1</span>)<br>DBCC TRACEOFF(<span class="hljs-number">3604</span>)<br></code></pre></td></tr></table></figure>
<figure>
<img
src="/2022/06/26/SQL%20Server%20IAM%20Page/image-20220623140010858.png"
alt="Mode 1 result" />
<figcaption aria-hidden="true">Mode 1 result</figcaption>
</figure>
<ol type="1">
<li><p><code>0000381f</code> is fixed.</p></li>
<li><p>Slot 0 is for mixed extent; Slot 1 is for the uniform
extent</p></li>
<li><p>For string <code>00000000 0010</code> and
<code>0100 00000000</code> in Slot 1</p>
<p>Each bit in the table stands for one extent.</p>
<p>Note we need to convert little-endian into normal binary.</p>
<table>
<thead>
<tr class="header">
<th>HEX</th>
<th>00 00 00 00 00</th>
<th>10</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Binary (Little endian)</td>
<td>many 0</td>
<td>0001 0000</td>
</tr>
<tr class="even">
<td>Binary (normal)</td>
<td>many 0</td>
<td>0000 1000</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr class="header">
<th>HEX</th>
<th>01</th>
<th>00 00 00 00 00</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Binary (Little endian)</td>
<td>0000 0001</td>
<td>many 0</td>
</tr>
<tr class="even">
<td>Binary (normal)</td>
<td>1000 0000</td>
<td>many 0</td>
</tr>
</tbody>
</table>
<p>That is, for <code>10 01</code> we have
<code>0000 1000 1000 0000</code> in binary, the difference is 4 extent,
from <code>1580</code> to <code>1584</code>.</p>
<figure>
<img
src="/2022/06/26/SQL%20Server%20IAM%20Page/image-20220624094601306.png"
alt="Endian example" />
<figcaption aria-hidden="true">Endian example</figcaption>
</figure></li>
</ol>
]]></content>
      <tags>
        <tag>SQL Server</tag>
      </tags>
  </entry>
  <entry>
    <title>Script_Backup databases iteratively and truncate name</title>
    <url>/2022/07/05/Script_Backup%20databases%20iteratively%20and%20truncate%20name/</url>
    <content><![CDATA[<h1
id="script_backup-databases-iteratively-and-truncate-name">Script_Backup
databases iteratively and truncate name</h1>
<p><u>Problem</u></p>
<p>For the database backup script, if the name <code>@dbname</code> is
too long, longer than <code>128</code>, there will be an error since the
length of <code>name</code> column in <code>msdb.dbo.backupset</code> is
<code>nvarchar(128)</code>.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql">BACKUP DATABASE <span class="hljs-variable">@name</span>_small <span class="hljs-keyword">TO</span> DISK <span class="hljs-operator">=</span> <span class="hljs-variable">@fileName</span>_small <span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,<br>NAME <span class="hljs-operator">=</span> <span class="hljs-variable">@dbName</span>, <span class="hljs-keyword">SKIP</span>, REWIND, NOUNLOAD, COMPRESSION, STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure>
<p><u>Script logic</u></p>
<ul>
<li>Backup all databases except for some required databases</li>
<li>Truncate necessary characters when the length is larger than
<code>128</code></li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@name</span>_small NVARCHAR(<span class="hljs-number">128</span>) <br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@path</span>_small NVARCHAR(<span class="hljs-number">512</span>)  <br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@fileName</span>_small NVARCHAR(<span class="hljs-number">512</span>) <br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@fileDate</span>_small NVARCHAR(<span class="hljs-number">40</span>) <br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@errorMessage</span> NVARCHAR(<span class="hljs-number">256</span>)<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@dbName</span> NVARCHAR(<span class="hljs-number">128</span>) <br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@counter</span> <span class="hljs-type">int</span><br><br><span class="hljs-comment">-- specify database backup directory</span><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@path</span>_small <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER\MSSQL\Backup\&#x27;</span>   <br><br><span class="hljs-comment">-- specify filename format</span><br><span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@fileDate</span>_small <span class="hljs-operator">=</span> replace(<span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>, getdate(),<span class="hljs-number">101</span>),<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>) <span class="hljs-operator">+</span> replace(<span class="hljs-keyword">convert</span>(<span class="hljs-type">varchar</span>, getdate(),<span class="hljs-number">108</span>),<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>) <br><br><span class="hljs-comment">-- Cursor for small databases </span><br><span class="hljs-keyword">DECLARE</span> db_cursor_small <span class="hljs-keyword">CURSOR</span> READ_ONLY <span class="hljs-keyword">FOR</span>  <br><span class="hljs-keyword">SELECT</span> name <br><span class="hljs-keyword">FROM</span> master.sys.databases <br><span class="hljs-keyword">WHERE</span> name <br><span class="hljs-keyword">NOT</span> <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;WSS_Content_xchange&#x27;</span>,<span class="hljs-string">&#x27;tempdb&#x27;</span>)  <span class="hljs-comment">-- Fill in databases you want to exclude here</span><br><span class="hljs-keyword">AND</span> state <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- database is online</span><br><span class="hljs-keyword">AND</span> is_in_standby <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-comment">-- database is not read only for log shipping</span><br><br>PRINT(<span class="hljs-string">&#x27;The backup script will skip the following databases as required:&#x27;</span>)<br>PRINT N<span class="hljs-string">&#x27;WSS_Content_xchange&#x27;</span><br>PRINT N<span class="hljs-string">&#x27;tempdb&#x27;</span><br>PRINT(<span class="hljs-string">&#x27;The backup script will skip the following databases as they are not ONLINE:&#x27;</span>)<br><span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@xmltmp</span> xml <span class="hljs-operator">=</span> (<span class="hljs-keyword">SELECT</span> name, state_desc <span class="hljs-keyword">FROM</span> sys.databases <span class="hljs-keyword">where</span> state_desc <span class="hljs-operator">&lt;&gt;</span> <span class="hljs-string">&#x27;ONLINE&#x27;</span> <span class="hljs-keyword">FOR</span> XML AUTO)<br>PRINT <span class="hljs-keyword">CONVERT</span>(NVARCHAR(MAX), <span class="hljs-variable">@xmltmp</span>)<br><br><span class="hljs-keyword">OPEN</span> db_cursor_small   <br><span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> db_cursor_small <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@name</span>_small   <br><br><span class="hljs-keyword">SET</span> <span class="hljs-variable">@counter</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br> <br>WHILE @<span class="hljs-variable">@FETCH</span>_STATUS <span class="hljs-operator">=</span> <span class="hljs-number">0</span>   <br><span class="hljs-keyword">BEGIN</span><br>   <span class="hljs-keyword">SET</span> <span class="hljs-variable">@counter</span> <span class="hljs-operator">=</span> <span class="hljs-variable">@counter</span> <span class="hljs-operator">+</span> <span class="hljs-number">1</span><br>   <span class="hljs-comment">-- Truncate database name if too long</span><br>   IF len(<span class="hljs-variable">@name</span>_small<span class="hljs-operator">+</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@fileDate</span>_small) <span class="hljs-operator">&gt;</span> <span class="hljs-number">128</span><br>		<span class="hljs-keyword">SET</span> <span class="hljs-variable">@dbName</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">LEFT</span>(<span class="hljs-variable">@name</span>_small,len(<span class="hljs-variable">@name</span>_small)<span class="hljs-operator">-</span>len(<span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@fileDate</span>_small))<span class="hljs-operator">+</span><span class="hljs-string">&#x27;_&#x27;</span><span class="hljs-operator">+</span><span class="hljs-variable">@fileDate</span>_small<br>   <span class="hljs-keyword">ELSE</span> <br>		<span class="hljs-keyword">SET</span> <span class="hljs-variable">@dbName</span> <span class="hljs-operator">=</span> <span class="hljs-variable">@name</span>_small <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;_&#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">@fileDate</span>_small<br>   PRINT(<span class="hljs-string">&#x27;-------------------&#x27;</span>)<br>   PRINT(<span class="hljs-string">&#x27;Start backup database: &#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">@name</span>_small <span class="hljs-operator">+</span> <span class="hljs-string">&#x27; AS &#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">@dbName</span>)<br>			<br>   <span class="hljs-keyword">SET</span> <span class="hljs-variable">@fileName</span>_small <span class="hljs-operator">=</span> <span class="hljs-variable">@path</span>_small <span class="hljs-operator">+</span> <span class="hljs-variable">@dbName</span> <span class="hljs-operator">+</span> <span class="hljs-string">&#x27;.BAK&#x27;</span><br>   <span class="hljs-keyword">SET</span> <span class="hljs-variable">@errorMessage</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Verify failed. Backup information for database &#x27;</span> <span class="hljs-operator">+</span> <span class="hljs-variable">@name</span>_small <span class="hljs-operator">+</span> <span class="hljs-string">&#x27; not found.&#x27;</span><br>   BACKUP DATABASE <span class="hljs-variable">@name</span>_small <span class="hljs-keyword">TO</span> DISK <span class="hljs-operator">=</span> <span class="hljs-variable">@fileName</span>_small <span class="hljs-keyword">WITH</span> NOFORMAT, NOINIT,<br>   NAME <span class="hljs-operator">=</span> <span class="hljs-variable">@dbName</span>, <span class="hljs-keyword">SKIP</span>, REWIND, NOUNLOAD, COMPRESSION, STATS <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br>   <span class="hljs-keyword">DECLARE</span> <span class="hljs-variable">@backupSetId</span> <span class="hljs-keyword">AS</span> <span class="hljs-type">int</span><br>   <span class="hljs-keyword">SELECT</span> <span class="hljs-variable">@backupSetId</span> <span class="hljs-operator">=</span> position <span class="hljs-keyword">FROM</span> msdb..backupset <br>   <span class="hljs-keyword">WHERE</span> database_name <span class="hljs-operator">=</span> <span class="hljs-variable">@name</span>_small <br>   <span class="hljs-keyword">AND</span> backup_set_id<span class="hljs-operator">=</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">max</span>(backup_set_id) <span class="hljs-keyword">FROM</span> msdb..backupset <span class="hljs-keyword">WHERE</span> database_name <span class="hljs-operator">=</span> <span class="hljs-variable">@name</span>_small)<br>   IF <span class="hljs-variable">@backupSetId</span> <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span> <span class="hljs-keyword">BEGIN</span> RAISERROR(<span class="hljs-variable">@errorMessage</span>, <span class="hljs-number">16</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">END</span><br>   RESTORE VERIFYONLY <span class="hljs-keyword">FROM</span>  DISK <span class="hljs-operator">=</span> <span class="hljs-variable">@fileName</span>_small <span class="hljs-keyword">WITH</span>  FILE <span class="hljs-operator">=</span> <span class="hljs-variable">@backupSetId</span>,  NOUNLOAD,  NOREWIND<br>  <br>   <span class="hljs-keyword">FETCH</span> NEXT <span class="hljs-keyword">FROM</span> db_cursor_small <span class="hljs-keyword">INTO</span> <span class="hljs-variable">@name</span>_small   <br><span class="hljs-keyword">END</span>   <br>PRINT(<span class="hljs-string">&#x27;-------------------&#x27;</span>)<br>PRINT(<span class="hljs-string">&#x27;Total backups:&#x27;</span>)<br>PRINT(<span class="hljs-variable">@counter</span>)<br><br><span class="hljs-keyword">CLOSE</span> db_cursor_small   <br><span class="hljs-keyword">DEALLOCATE</span> db_cursor_small<br><br></code></pre></td></tr></table></figure>
<img src="/2022/07/05/Script_Backup%20databases%20iteratively%20and%20truncate%20name/image001.png" class="" title="Script result">
<blockquote>
<p>This was the very first T-SQL script I write when I interned as a
Support Engineer at Microsoft.</p>
</blockquote>
]]></content>
      <tags>
        <tag>T-SQL</tag>
        <tag>My Work</tag>
      </tags>
  </entry>
  <entry>
    <title>Web crawler for Shenzhen Exchange</title>
    <url>/2022/07/08/Web%20crawler%20for%20Shenzhen%20Exchange/</url>
    <content><![CDATA[<h1 id="web-crawler-for-shenzhen-exchange">Web crawler for Shenzhen
Exchange</h1>
<p><a
href="https://github.com/jason5306/WebCrawlerForShenzhenExchange">深圳互动易公司问答数据爬虫Github</a></p>
<img src="/2022/07/08/Web%20crawler%20for%20Shenzhen%20Exchange/DemoImg.png" class="" title="DemoImg">
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><span class="hljs-keyword">from</span> selenium.webdriver.chrome.service <span class="hljs-keyword">import</span> Service<br><span class="hljs-keyword">from</span> selenium.webdriver.common.action_chains <span class="hljs-keyword">import</span> ActionChains<br><span class="hljs-keyword">from</span> selenium.webdriver.common.keys <span class="hljs-keyword">import</span> Keys<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pd<br><br><span class="hljs-comment"># 深交所公司代码</span><br>code = pd.read_excel(<span class="hljs-string">&#x27;./code.xlsx&#x27;</span>, header = <span class="hljs-number">0</span>, dtype=<span class="hljs-built_in">str</span>)<br>code_list = code[<span class="hljs-string">&#x27;code&#x27;</span>].tolist()<br><br><br><span class="hljs-comment">#for code in code_list:</span><br>driver = webdriver.Chrome()<br><span class="hljs-comment"># a new window for QA site</span><br>driver2 = webdriver.Chrome()<br>url = <span class="hljs-string">&#x27;http://irm.cninfo.com.cn/ircs/index&#x27;</span><br><br><span class="hljs-keyword">for</span> code <span class="hljs-keyword">in</span> code_list:<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Collecting data for company ... &#x27;</span> + code + <span class="hljs-string">&#x27;...........&#x27;</span>)<br><br>    driver.set_window_size(<span class="hljs-number">1000</span>,<span class="hljs-number">30000</span>)<br><br>    driver.get(url)<br>    table_content_translate_box = []<br>    <span class="hljs-comment">#while(True): # Stop manually </span><br><br>    <span class="hljs-comment"># scoll down</span><br>    <span class="hljs-comment">#driver.execute_script(&quot;window.scrollBy(0,8000)&quot;)</span><br>    <span class="hljs-comment">#time.sleep(1)</span><br><br>    <span class="hljs-comment"># find search box and search company code</span><br>    time.sleep(<span class="hljs-number">2</span>)<br>    searc_box = driver.find_element_by_class_name(<span class="hljs-string">&#x27;el-input__inner&#x27;</span>)<br>    searc_box.click()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    searc_box.send_keys(code)<br>    searc_box.send_keys(Keys.ENTER)<br>    time.sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># go to QA section</span><br>    tablist = driver.find_element_by_css_selector(<span class="hljs-string">&#x27;.el-tabs__nav.is-top&#x27;</span>)<br>    tablist.find_element_by_id(<span class="hljs-string">&#x27;tab-2&#x27;</span>).click()<br><br>    <span class="hljs-comment"># find date search</span><br>    date_search_box = driver.find_element_by_class_name(<span class="hljs-string">&#x27;el-range-input&#x27;</span>)<br>    date_search_box.click()<br>    date_search_box.clear()<br>    time.sleep(<span class="hljs-number">1</span>)<br>    date_search_box.send_keys(<span class="hljs-string">&#x27;2012-01-01&#x27;</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br>    action = ActionChains(driver)<br>    action.move_by_offset(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>).click().perform()<br><br><br>    <span class="hljs-comment"># max page number</span><br>    page = driver.find_element_by_class_name(<span class="hljs-string">&#x27;el-pager&#x27;</span>)<br>    pages = page.find_elements_by_class_name(<span class="hljs-string">&#x27;number&#x27;</span>)<br>    page_number = []<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> pages:<br>        page_number.append(<span class="hljs-built_in">int</span>(item.text))<br>        <span class="hljs-comment">#print(item.text)</span><br><br>    max_page_number = <span class="hljs-built_in">max</span>(page_number)<br>    <span class="hljs-comment">#print(max_page_number)</span><br><br>    <span class="hljs-comment">#data_ids = []</span><br><br>    <span class="hljs-comment"># header</span><br>    result = []<br>    header = [<span class="hljs-string">&#x27;深市代码&#x27;</span>, <span class="hljs-string">&#x27;提问&#x27;</span>, <span class="hljs-string">&#x27;提问时间&#x27;</span>, <span class="hljs-string">&#x27;回复&#x27;</span>, <span class="hljs-string">&#x27;回复时间&#x27;</span>]<br>    result.append(header)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># current page number</span><br>        page = driver.find_element_by_class_name(<span class="hljs-string">&#x27;el-pager&#x27;</span>)<br>        active_page_number = page.find_element_by_css_selector(<span class="hljs-string">&#x27;.number.active&#x27;</span>).text<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Current page:&quot;</span> + <span class="hljs-built_in">str</span>(max_page_number) + <span class="hljs-string">&#x27;/&#x27;</span> + <span class="hljs-built_in">str</span>(active_page_number))<br><br><br>        <span class="hljs-comment"># find QA of this page </span><br>        search_content_box = driver.find_elements_by_class_name(<span class="hljs-string">&#x27;search-content-box&#x27;</span>)<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> search_content_box:<br>            temp_item1 = item.find_element_by_css_selector(<span class="hljs-string">&#x27;.item-question.left-content.table-list.pd-r-20&#x27;</span>)<br>            temp_item2 = temp_item1.find_element_by_css_selector(<span class="hljs-string">&#x27;.table-content.div-translate&#x27;</span>)<br>            data_id = temp_item2.get_attribute(<span class="hljs-string">&#x27;data-id&#x27;</span>)<br>            <span class="hljs-built_in">print</span>(data_id)<br>            <span class="hljs-comment">#data_ids.append(data_id)</span><br>            time.sleep(<span class="hljs-number">1</span>)<br><br>            <span class="hljs-comment"># get QA for each data id</span><br>            url_QA = <span class="hljs-string">&#x27;http://irm.cninfo.com.cn/ircs/question/questionDetail?questionId=&#x27;</span> + data_id<br>            driver2.get(url_QA)<br>            time.sleep(<span class="hljs-number">3</span>)<br>            <span class="hljs-comment"># have Q and A</span><br>            Q = driver2.find_element_by_css_selector(<span class="hljs-string">&#x27;.question-detail.translate-box.pd-30&#x27;</span>).text<br>            time.sleep(<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(Q)<br>            Qtime = driver2.find_element_by_class_name(<span class="hljs-string">&#x27;question-time&#x27;</span>).text.split(<span class="hljs-string">&#x27;·&#x27;</span>)[<span class="hljs-number">0</span>]<br>            time.sleep(<span class="hljs-number">1</span>)<br>            <span class="hljs-built_in">print</span>(Qtime)<br>            <span class="hljs-keyword">try</span>:<br>                A = driver2.find_element_by_css_selector(<span class="hljs-string">&#x27;.left-content.no-data&#x27;</span>).text<br>                <span class="hljs-built_in">print</span>(A)<br>                Atime = <span class="hljs-string">&#x27;暂无回复&#x27;</span><br>                <span class="hljs-built_in">print</span>(Atime)<br>            <span class="hljs-keyword">except</span> Exception:<br><br>                A = driver2.find_element_by_css_selector(<span class="hljs-string">&#x27;.reply-content.translate-box&#x27;</span>).text<br>                <span class="hljs-built_in">print</span>(A)<br><br>                Atime = driver2.find_element_by_css_selector(<span class="hljs-string">&#x27;.question-time.hidden-xs-only&#x27;</span>).text.split(<span class="hljs-string">&#x27;：&#x27;</span>)[<span class="hljs-number">1</span>]<br>                <span class="hljs-built_in">print</span>(Atime)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;________________&#x27;</span>)<br>            time.sleep(<span class="hljs-number">2</span>)<br>            result.append([code, Q, Qtime, A, Atime])<br><br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Page finished&#x27;</span>)<br><br>        <span class="hljs-comment"># next page</span><br>        next_btn = driver.find_element_by_class_name(<span class="hljs-string">&#x27;btn-next&#x27;</span>)<br>        next_btn.find_element_by_css_selector(<span class="hljs-string">&#x27;.el-icon.el-icon-arrow-right&#x27;</span>).click()<br>        time.sleep(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">int</span>(active_page_number) == max_page_number:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;All pages done&quot;</span>)<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-comment"># export to csv        </span><br>        df = pd.DataFrame(result)<br>        df.to_csv(<span class="hljs-string">&#x27;./&#x27;</span>+code+<span class="hljs-string">&#x27;.csv&#x27;</span>, index = <span class="hljs-literal">False</span>, header = <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Python</tag>
        <tag>My Work</tag>
        <tag>Web Crawler</tag>
      </tags>
  </entry>
  <entry>
    <title>Xevent Reader</title>
    <url>/2022/08/17/Xevent%20Reader/</url>
    <content><![CDATA[<h1 id="xevent-reader">Xevent Reader</h1>
<p>Xevent Reader is a tool written in Python that reads Extend Event
Files of SQL Server and exports parsed results into SQL Server. It is
designed to be an alternative to SSMS when the exporting table function
crashes. The Reader has two main functions: read and parse xevent files
into SQL Server tables and import csv files into SQL Server.</p>
<p><a href="https://github.com/jason5306/XeventReader">Xevent Reader on
Github</a></p>
<figure>
<img src="/2022/08/17/Xevent%20Reader/image-20220817114603265.png"
alt="Tool Interface" />
<figcaption aria-hidden="true">Tool Interface</figcaption>
</figure>
<figure>
<img src="/2022/08/17/Xevent%20Reader/image-20220817150937097.png"
alt="SSMS" />
<figcaption aria-hidden="true">SSMS</figcaption>
</figure>
<h2 id="install">Install</h2>
<ol type="1">
<li>Install <a
href="https://go.microsoft.com/fwlink/?linkid=2200731">Microsoft ODBC
Driver17 for SQL Server x64</a></li>
<li>Download the tool. <a
href="https://drive.google.com/file/d/11cD-nsxeYEa2LW9r-xabTjYbA7R6yXIX/view?usp=sharing">Link</a></li>
<li>Protection programs (Windows Security) might be triggered, please
allow access.</li>
<li>Ready to go.</li>
</ol>
<h2 id="usage">Usage</h2>
<ol type="1">
<li><p>Open the tool, please wait for the GUI pops up.</p></li>
<li><p><strong>Full execution</strong> mode</p>
<ol type="1">
<li>Function: read and parse xevent files into SQL Server</li>
<li>Press the <strong>Select Files</strong> button
<ol type="1">
<li>Select <code>xevent files (*.xel)</code> in the drop-down list.</li>
<li>Multiple xevent files can be added.</li>
<li>Different types of xevent files can be added, results will be
written into one table.</li>
</ol></li>
<li>Choose authentication mode for SQL Server
<ol type="1">
<li>Default: Windows Authentication</li>
</ol></li>
<li>Fill in the connection info.
<ol type="1">
<li>HOSTNAME: the server you want to connect to.</li>
<li>DATABASE: the database that holds the result table. If the database
does not exist, the Reader would create a new one.</li>
<li>TABLE NAME: the table that holds parsing results. <strong>If the
table name exists, the original content of that table will be
replaced.</strong></li>
<li>USERNAME: the user name for SQL Authentication.</li>
<li>PASSWORD: password of SQL Authentication account.</li>
</ol></li>
<li>Press <strong>Run: full execution</strong>
<ol type="1">
<li>If any field is missed, there will be warning messages.</li>
<li>Execution progress is visualized in the command line window.</li>
<li>A temporary <code>.csv</code> file will be generated for debugging
purposes, you can choose to delete or keep it when the execution is
finished.</li>
</ol></li>
</ol></li>
<li><p><strong>Importing CSV to SQL Server Only</strong> mode</p>
<ol type="1">
<li><p>Function: import a formatted csv file into a specified SQL
Server</p>
<blockquote>
<p>This mode is designed to import temp csv files to SQL Server
generated by the full execution mode when the parsing is completed but
importing results to SQL Server is failed.</p>
</blockquote></li>
<li><p>Press the <strong>Select Files</strong> button</p>
<ol type="1">
<li>Select <code>csv files (*.csv)</code> in the drop down list.</li>
<li>Only one CSV file can be added.</li>
</ol></li>
<li><p>Choose authentication mode for SQL Server</p>
<ol type="1">
<li>Default: Windows Authentication</li>
</ol></li>
<li><p>Fill in the connection info.</p>
<ol type="1">
<li>HOSTNAME: the server you want to connect to.</li>
<li>DATABASE: the database that holds the result table. If the database
does not exist, the Reader would create a new one.</li>
<li>TABLE NAME: the table that holds parsing results. <strong>If the
table name exists, the original content of that table will be
replaced.</strong></li>
<li>USERNAME: the user name for SQL Authentication.</li>
<li>PASSWORD: password of SQL Authentication account.</li>
</ol></li>
<li><p>Press <strong>Run: import csvCSV to SQL only</strong></p>
<ol type="1">
<li>If any field is missed, there will be warning messages.</li>
<li>Execution progress is visualized in the command line window.</li>
<li>You can choose to delete or keep the selected CSV file when the
execution is finished.</li>
</ol></li>
</ol></li>
</ol>
<h2 id="known-issue">Known Issue</h2>
<ol type="1">
<li><p>The GUI gets stuck from time to time when the file selection
window is closed.</p>
<blockquote>
<p>Sol: Press 'Enter' in the command line window would work</p>
</blockquote></li>
<li><p>The GUI window is not popped up when the tool is started for a
while.</p>
<blockquote>
<p>Sol: Press 'Enter' in the command line window would work</p>
</blockquote></li>
<li><p>When dealing with large (total size) xevent files, the importing
to SQL Server step might be very slow. The normal importing rate should
be several hundred items per second. This might due to the
<code>fast_executemany</code> for SQL Server is not triggered.</p>
<blockquote>
<p>Sol:</p>
<p>Firstly, read and parse xevent files with <strong>Run: full
execution</strong> to get a temporary csv file. Terminate the tool when
the message <code>Action: Importing to SQL Server table ...</code> is
shown.</p>
<p>Secondly, reopen the tool, select the temporary CSV file, fill in
necessary connection info, and press <strong>Importing CSV to SQL Server
Only</strong> (follow steps of <strong>Importing csCSVo SQL Server
Only</strong> mode)</p>
</blockquote></li>
</ol>
<h2 id="development-notes">Development Notes</h2>
<p>This tool is my intern project at the Microsoft CSS team, and it is
designed to solve the problem that SSMS usually crashes when exporting
large xevent files into SQL Server tables.</p>
<p><strong>Version 1</strong></p>
<p><u>Key Idea</u></p>
<p>Parse the xevent file and use pandas Dataframe to hold the result,
automatically expanding columns to fit all event objects.</p>
<p><u>Problem</u></p>
<p>Way to slow</p>
<p><strong>Version 2</strong></p>
<p><u>Key Idea</u></p>
<p>Use pandas to read xevent files from SQL Server and parse them with
vaex. Apply functions to vaex dataframe columns and also expand columns
to fit all event objects.</p>
<p><u>Problem</u></p>
<p>Need to convert vaex dataframe into pandas dataframe when exporting
results to SQL Server, this step would cause memory error when
processing large xevent files. The memory error can be solved by
reducing the chuck size of importing data into SQL but the exporting
rate would be super slow.</p>
<p><strong>Final Version</strong></p>
<p><u>Key Idea</u></p>
<p>Take advantage of csv file features, and replace the step of
modifying the dataframe with string operations. The key trick is, that
if we remove the "" of a string that is formatted like
<code>"A, B, C"</code>, we would have a CSV format file. Thus, the time
and space used in operating dataframes are largely reduced.</p>
<p>Originally, unique columns of events are found by SQL query, which is
a little bit slow.</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> event_data <span class="hljs-keyword">from</span> <br>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span>, <span class="hljs-built_in">row_number</span>() <span class="hljs-keyword">over</span> (<span class="hljs-keyword">partition</span> <span class="hljs-keyword">by</span> object_name <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> timestamp_utc <span class="hljs-keyword">desc</span>) <span class="hljs-keyword">as</span> rn<br><span class="hljs-keyword">from</span><br>sys.fn_xe_file_target_read_file(<span class="hljs-string">&#x27;C:\xeventFile.xel&#x27;</span>,<span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>, <span class="hljs-keyword">null</span>)) t<br><span class="hljs-keyword">where</span> rn <span class="hljs-operator">=</span> <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure>
<p>Then I found that using <code>PD.drop_duplicate</code> is much more
faster.</p>
<h2 id="source-code">Source Code</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Author: Jiacheng Xie</span><br><span class="hljs-string">Date: 2022/8/17</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">from</span> tkinter <span class="hljs-keyword">import</span> Tk,filedialog, messagebox, Button, W,Label,Entry<br><span class="hljs-keyword">import</span> pyodbc<br><span class="hljs-keyword">from</span> pymssql <span class="hljs-keyword">import</span> connect <span class="hljs-keyword">as</span> connection<br><span class="hljs-keyword">from</span> pandas <span class="hljs-keyword">import</span> read_xml, DataFrame,read_sql,concat,read_csv<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> tqdm<br><span class="hljs-keyword">from</span> sqlalchemy <span class="hljs-keyword">import</span> create_engine<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> os <span class="hljs-keyword">import</span> remove<br><span class="hljs-keyword">import</span> gc<br><br><span class="hljs-comment"># import the following to avoid no &#x27;pymssql&#x27; found issue when packing</span><br><span class="hljs-keyword">from</span> pymssql <span class="hljs-keyword">import</span> _mssql<br><span class="hljs-keyword">from</span> pymssql <span class="hljs-keyword">import</span> _pymssql<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> decimal<br><br><br><span class="hljs-keyword">global</span> authenticationMode<br>authenticationMode = <span class="hljs-number">0</span><br><span class="hljs-keyword">global</span> files<br>files = ()<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Find column names in the xml field of xevent files</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">findColumns</span>(<span class="hljs-params">xml_pretty_str</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>.join(read_xml(xml_pretty_str)[<span class="hljs-string">&#x27;name&#x27;</span>].tolist())<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Visualize pd.to_sql, add a process bar</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">chunker</span>(<span class="hljs-params">seq, size</span>):<br>    <span class="hljs-comment"># from http://stackoverflow.com/a/434328</span><br>    <span class="hljs-keyword">return</span> (seq[pos:pos + size] <span class="hljs-keyword">for</span> pos <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(seq), size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">insert_with_progress</span>(<span class="hljs-params">df,conn, tableName</span>):<br>    <span class="hljs-comment">#conn = create_engine(DB_URI2, execution_options=dict(stream_results=True),fast_executemany=True)</span><br>    <br>    chunksize = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">len</span>(df) / <span class="hljs-number">10</span>) <span class="hljs-comment"># 10%</span><br>    <span class="hljs-keyword">if</span> chunksize == <span class="hljs-number">0</span>:<br>        chunksize = <span class="hljs-number">1</span><br><br>    <span class="hljs-keyword">with</span> tqdm(total=<span class="hljs-built_in">len</span>(df)) <span class="hljs-keyword">as</span> pbar:<br>        <span class="hljs-keyword">for</span> i, cdf <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(chunker(df, chunksize)):<br>            replace = <span class="hljs-string">&quot;replace&quot;</span> <span class="hljs-keyword">if</span> i == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;append&quot;</span><br>            cdf.to_sql(con=conn, name=tableName, if_exists=replace, index=<span class="hljs-literal">False</span>)<br>            pbar.update(chunksize)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">This is the core function of the Xevent reader. </span><br><span class="hljs-string">It parses xml and edits the result to get correct values for each column.</span><br><span class="hljs-string">Return a comma separated string of all column values.</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&quot;&quot;</span>            <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xmlToString2</span>(<span class="hljs-params">xml_pretty_str, column_list_ordered</span>):<br>    <br>    df_xml = read_xml(xml_pretty_str)<span class="hljs-comment">#.set_index(&#x27;name&#x27;)</span><br><br>    names = <span class="hljs-built_in">list</span>(df_xml[<span class="hljs-string">&#x27;name&#x27;</span>].values)<br>    <br>    <span class="hljs-comment"># chain of if...else to deal with columns with xml data</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;input_relation&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;input_relation&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;input_relation&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;calculator&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;calculator&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;calculator&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;stats_collection&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;stats_collection&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;stats_collection&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;showplan_xml&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;showplan_xml&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;showplan_xml&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;output_parameters&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;output_parameters&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;output_parameters&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;data&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;data&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;data&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;execution_stats_report&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;execution_stats_report&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;execution_stats_report&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;xml_report&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;xml_report&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;xml_report&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;xml_report_filtered&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;xml_report_filtered&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;xml_report_filtered&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;server_memory_grants&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;server_memory_grants&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;server_memory_grants&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-string">&#x27;blocked_process&#x27;</span> <span class="hljs-keyword">in</span> names:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;blocked_process&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;blocked_process&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br><br>    <span class="hljs-keyword">else</span>:<br><br>        pattern = <span class="hljs-string">&#x27;&lt;data name=&quot;blocked_process_filtered&quot;&gt;&#x27;</span><br>        data = xml_pretty_str[xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>):xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;/value&gt;&#x27;</span>, xml_pretty_str.find(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>, xml_pretty_str.find(pattern)+<span class="hljs-built_in">len</span>(pattern))+<span class="hljs-built_in">len</span>(<span class="hljs-string">&#x27;&lt;value&gt;&#x27;</span>))]<br>        df_xml.loc[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;blocked_process_filtered&#x27;</span>,<span class="hljs-string">&#x27;value&#x27;</span>] = data<br>    <span class="hljs-comment"># exclude</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;data_stream&#x27;</span> <span class="hljs-keyword">in</span> names:<br>        df_xml.drop(df_xml[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;data_stream&#x27;</span>].index, inplace = <span class="hljs-literal">True</span>)<br>        names.remove(<span class="hljs-string">&#x27;data_stream&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;timestamp&#x27;</span> <span class="hljs-keyword">in</span> names:<br>        df_xml.drop(df_xml[df_xml[<span class="hljs-string">&#x27;name&#x27;</span>] == <span class="hljs-string">&#x27;timestamp&#x27;</span>].index, inplace = <span class="hljs-literal">True</span>)<br>        names.remove(<span class="hljs-string">&#x27;timestamp&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;text&#x27;</span> <span class="hljs-keyword">in</span> df_xml:     <br>        df_xml[<span class="hljs-string">&#x27;value&#x27;</span>] = df_xml[<span class="hljs-string">&#x27;text&#x27;</span>].fillna(df_xml[<span class="hljs-string">&#x27;value&#x27;</span>])<br><br>    <span class="hljs-comment">#df_xml[&#x27;value&#x27;] = df_xml[&#x27;value&#x27;].apply(lambda x: str(x).replace(&#x27;,&#x27;,&#x27;^&#x27;))</span><br><br><br>    values = <span class="hljs-built_in">list</span>(df_xml[<span class="hljs-string">&#x27;value&#x27;</span>].values)<br><br><br>    result = []<br><br>    <span class="hljs-keyword">for</span> name <span class="hljs-keyword">in</span> column_list_ordered:<br>        <span class="hljs-keyword">if</span> name <span class="hljs-keyword">in</span> names:<br>            result.append(<span class="hljs-built_in">str</span>(values[names.index(name)]).replace(<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;^&#x27;</span>))<br>        <span class="hljs-keyword">else</span>:<br>            result.append(<span class="hljs-string">&#x27;None&#x27;</span>)<br> <br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;,&#x27;</span>.join(result).replace(<span class="hljs-string">&#x27;\t&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;\n&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setWinAuthentication</span>():<br>    <span class="hljs-keyword">global</span> authenticationMode<br>    authenticationMode = <span class="hljs-number">0</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Windows Authentication Selected&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Specify HOSTNAME, DATABASE, TABLE NAME:&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setSQLAuthentication</span>():<br>    <span class="hljs-keyword">global</span> authenticationMode<br>    authenticationMode = <span class="hljs-number">1</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;SQL Authentication Selected&quot;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Specify HOSTNAME, DATABASE, TABLE NAME, USERNAME, PASSWORD&#x27;</span>)<br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">selectFiles</span>():<br>    <span class="hljs-keyword">global</span> files<br>    files = filedialog.askopenfilenames(filetypes=[(<span class="hljs-string">&#x27;xevent files&#x27;</span>, <span class="hljs-string">&#x27;.xel&#x27;</span>),(<span class="hljs-string">&#x27;csv files&#x27;</span>, <span class="hljs-string">&#x27;.csv&#x27;</span>)])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Files selected:&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(files)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Select Authentication Mode:&#x27;</span>)<br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">The key idea is to save execution result into a csv file and then remove the &quot;&quot; to simulate the</span><br><span class="hljs-string">process of creating columns. Since the editted file has the same format as a csv file, when reading</span><br><span class="hljs-string">it again into a pandas dataframe would result in an expanded table with all columns of xevent names.</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;No file selected!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file selected!&#x27;</span><br>    <br>    HOSTNAME = entryHOSTNAME.get()<br>    DATABASE = entryDATABASE.get()<br>    TableName = entryTableName.get()<br>    USERNAME = entryUSERNAME.get()<br>    PASSWORD = entryPASSWORD.get()<br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-built_in">len</span>(USERNAME) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(PASSWORD) == <span class="hljs-number">0</span>):<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify USERNAME and PASSWORD for SQL Authentication&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;SQL Authentication Failed&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(HOSTNAME) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify HOSTNAME&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(DATABASE) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify DATABASE&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(TableName) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify Table Name&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span>    <br>    <br>    <br>    <span class="hljs-comment"># First connection, connect to master by default</span><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;Windows Authentication&gt; ...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;SQL Authentication&gt;&quot;</span>)<br>    DATABASE_master = <span class="hljs-string">&#x27;master&#x27;</span><br>    DRIVER = <span class="hljs-string">&#x27;ODBC+Driver+17+for+SQL+Server&#x27;</span><br>    DB_URI_SQL = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;?driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        USERNAME, PASSWORD, HOSTNAME, DATABASE_master,DRIVER<br>    )<br>    DB_URI_Win = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;/&#123;&#125;?trusted_connection=yes&amp;driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        HOSTNAME, DATABASE_master,DRIVER<br>    )<br><br>    DB_URI2_Win = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;/&#123;&#125;?trusted_connection=yes&amp;driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        HOSTNAME, DATABASE,DRIVER<br>    )<br>    DB_URI2_SQL = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;?driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        USERNAME, PASSWORD, HOSTNAME, DATABASE,DRIVER<br>    )<br><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        DB_URI = DB_URI_Win<br>        DB_URI2 = DB_URI2_Win<br>        conn = create_engine(DB_URI, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br>        connect = connection(host=HOSTNAME,<br>                                  database=DATABASE_master,<br>                                  autocommit=<span class="hljs-literal">True</span>)    <br>    <br>    <span class="hljs-keyword">else</span>:<br>        DB_URI = DB_URI_SQL<br>        DB_URI2 = DB_URI2_SQL<br>        conn = create_engine(DB_URI, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br>        connect = connection(host=HOSTNAME,<br>                                  database=DATABASE_master,<br>                                  user=USERNAME,<br>                                  password=PASSWORD,<br>                                  autocommit=<span class="hljs-literal">True</span>)<br>    cursor = connect.cursor()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;... Connected ...&quot;</span>)<br><br>    <span class="hljs-comment"># create new database if not exist</span><br>    new_database = <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&#x27;&quot;</span> + DATABASE + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br><br>    cursor.execute(<span class="hljs-string">&quot;select * From master.dbo.sysdatabases where name=&quot;</span> + new_database)<br>    DBresult = cursor.fetchall()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(DBresult) == <span class="hljs-number">0</span>: <span class="hljs-comment"># if DB not exist</span><br>        cursor.execute(<span class="hljs-string">&quot;CREATE DATABASE &quot;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; created&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; exist&quot;</span>)<br>    connect.close() <br><br>    <span class="hljs-comment"># set table name</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: result will be written into &#x27;</span>+ TableName + <span class="hljs-string">&#x27; ...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: table with the same name will be repalced ...&#x27;</span>)<br><br>    <span class="hljs-comment"># second connection, same Authentication as first</span><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; &lt;Windows Authentication&gt; ...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;SQL Authentication&gt;&quot;</span>)<br><br>    conn = create_engine(DB_URI2, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;... Connected ...&quot;</span>)<br>    <span class="hljs-comment"># read from sql</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Read files ...&#x27;</span>)<br><br>    df = DataFrame()<br>    <span class="hljs-keyword">for</span> file <span class="hljs-keyword">in</span> tqdm(files):<br>        file = <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&#x27;&quot;</span> + file + <span class="hljs-string">&quot;&#x27;&quot;</span>).replace(<span class="hljs-string">&#x27;/&#x27;</span>,<span class="hljs-string">&quot;\\&quot;</span>)                                             <br>        query = <span class="hljs-string">&quot;select * from sys.fn_xe_file_target_read_file(&quot;</span> +  file + <span class="hljs-string">&quot;,null, null, null)&quot;</span><br>        temp_df = read_sql(query, conn)<br>        df = concat([df,temp_df],ignore_index=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Message:&quot;</span>)<br>    <span class="hljs-built_in">print</span>(df.info())<br>    df.rename(columns=&#123;<span class="hljs-string">&#x27;object_name&#x27;</span>:<span class="hljs-string">&#x27;event_name&#x27;</span>&#125;, inplace = <span class="hljs-literal">True</span>)<br><br>    df_col = df.drop_duplicates([<span class="hljs-string">&#x27;event_name&#x27;</span>]).copy()<br>    df_col[<span class="hljs-string">&#x27;columns&#x27;</span>] = df_col[<span class="hljs-string">&#x27;event_data&#x27;</span>].apply(findColumns)<br>    column_list_string = df_col[<span class="hljs-string">&#x27;columns&#x27;</span>].values.tolist()<br>    column_list_set = <span class="hljs-built_in">set</span>(<span class="hljs-string">&#x27; &#x27;</span>.join(column_list_string).split())<br>    column_list_set.discard(<span class="hljs-string">&#x27;timestamp&#x27;</span>)<br>    <span class="hljs-comment">#column_list_set.discard(&#x27;object_name&#x27;)</span><br>    column_list_set.discard(<span class="hljs-string">&#x27;data_stream&#x27;</span>)<br>    column_list_ordered = <span class="hljs-built_in">list</span>(column_list_set)<br>    column_list_ordered.sort()<br>    column_list_string = <span class="hljs-built_in">str</span>(column_list_ordered).replace(<span class="hljs-string">&#x27;[&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&#x27;]&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot;&#x27;&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>).replace(<span class="hljs-string">&quot; &quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: the following columns will be written ...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(column_list_ordered)<br><br>    <span class="hljs-comment"># Parsing</span><br>    tqdm.pandas(desc=<span class="hljs-string">&#x27;pandas bar&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Action: Parsing xevent ...&quot;</span>)<br>    df[column_list_string] = df[<span class="hljs-string">&#x27;event_data&#x27;</span>].progress_apply(xmlToString2,column_list_ordered=column_list_ordered)<br><br>    df2 = DataFrame(df, columns = [<span class="hljs-string">&#x27;event_name&#x27;</span>,<span class="hljs-string">&#x27;timestamp_utc&#x27;</span>,column_list_string])<br>    <br>    <span class="hljs-keyword">del</span> df<br>    gc.collect()<br><br>    <span class="hljs-comment"># save result to csv</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Save and edit temp csv file ...&#x27;</span>)<br>    temp_name = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">int</span>(time()))<br>    df2.to_csv(<span class="hljs-string">&#x27;./&#x27;</span>+ temp_name + <span class="hljs-string">&#x27;.csv&#x27;</span>,index = <span class="hljs-literal">False</span>)<br>    <br>    <span class="hljs-keyword">del</span> df2<br>    gc.collect()<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./&#x27;</span>+ temp_name + <span class="hljs-string">&#x27;.csv&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        lines = f.readlines()<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./&#x27;</span>+ temp_name + <span class="hljs-string">&#x27;.csv&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f_w:<br>        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> tqdm(lines):<br>            line = line.replace(<span class="hljs-string">&#x27;&quot;&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<span class="hljs-comment">#.replace(&#x27;[&#x27;,&#x27;&#x27;).replace(&#x27;]&#x27;,&#x27;&#x27;)</span><br>            f_w.write(line)<br><br>    <span class="hljs-comment"># read from editted csv file</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Action: Reading csv file ...&quot;</span>)<br>    chunks2 = read_csv(<span class="hljs-string">&#x27;./&#x27;</span>+ temp_name + <span class="hljs-string">&#x27;.csv&#x27;</span>,dtype=<span class="hljs-built_in">str</span>,chunksize=<span class="hljs-number">2000</span>)<br><br>    df_done = DataFrame()<br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> tqdm(chunks2):<br>        df_done = concat([df_done, chunk],ignore_index=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(df_done.info())<br><br>    <span class="hljs-comment"># importing to SQL Server</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Importing to SQL Server table ...&#x27;</span>)<br>    insert_with_progress(df_done,conn, TableName)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Job done!&#x27;</span>)<br>    <br>    <span class="hljs-keyword">del</span> df_done<br>    gc.collect()<br>    <br>    delTemp = messagebox.askyesno(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Job Done! Delete temp csv file?&#x27;</span>)<br>    <span class="hljs-keyword">if</span> delTemp:<br>        remove(<span class="hljs-string">&#x27;./&#x27;</span>+ temp_name + <span class="hljs-string">&#x27;.csv&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Press Enter to Continue ...&quot;</span>)<br>    <br>    <br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Importing csv files into SQL Server.</span><br><span class="hljs-string">&quot;&quot;&quot;</span>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run_csv</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(files) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;No file selected!&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;No file selected!&#x27;</span><br>    <br>    HOSTNAME = entryHOSTNAME.get()<br>    DATABASE = entryDATABASE.get()<br>    TableName = entryTableName.get()<br>    USERNAME = entryUSERNAME.get()<br>    PASSWORD = entryPASSWORD.get()<br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> (<span class="hljs-built_in">len</span>(USERNAME) == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> <span class="hljs-built_in">len</span>(PASSWORD) == <span class="hljs-number">0</span>):<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify USERNAME and PASSWORD for SQL Authentication&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;SQL Authentication Failed&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(HOSTNAME) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify HOSTNAME&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(DATABASE) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify DATABASE&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(TableName) == <span class="hljs-number">0</span>:<br>        messagebox.askokcancel(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Please specify Table Name&#x27;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;Invalid input&#x27;</span>    <br>    <br>    <br>    <span class="hljs-comment"># First connection, connect to master by default</span><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;Windows Authentication&gt; ...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;SQL Authentication&gt;&quot;</span>)<br>    DATABASE_master = <span class="hljs-string">&#x27;master&#x27;</span><br>    DRIVER = <span class="hljs-string">&#x27;ODBC+Driver+17+for+SQL+Server&#x27;</span><br>    DB_URI_SQL = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;?driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        USERNAME, PASSWORD, HOSTNAME, DATABASE_master,DRIVER<br>    )<br>    DB_URI_Win = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;/&#123;&#125;?trusted_connection=yes&amp;driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        HOSTNAME, DATABASE_master,DRIVER<br>    )<br><br>    DB_URI2_Win = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;/&#123;&#125;?trusted_connection=yes&amp;driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        HOSTNAME, DATABASE,DRIVER<br>    )<br>    DB_URI2_SQL = <span class="hljs-string">&#x27;mssql+pyodbc://&#123;&#125;:&#123;&#125;@&#123;&#125;/&#123;&#125;?driver=&#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(<br>        USERNAME, PASSWORD, HOSTNAME, DATABASE,DRIVER<br>    )<br><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        DB_URI = DB_URI_Win<br>        DB_URI2 = DB_URI2_Win<br>        conn = create_engine(DB_URI, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br>        connect = connection(host=HOSTNAME,<br>                                  database=DATABASE_master,<br>                                  autocommit=<span class="hljs-literal">True</span>)    <br>    <br>    <span class="hljs-keyword">else</span>:<br>        DB_URI = DB_URI_SQL<br>        DB_URI2 = DB_URI2_SQL<br>        conn = create_engine(DB_URI, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br>        connect = connection(host=HOSTNAME,<br>                                  database=DATABASE_master,<br>                                  user=USERNAME,<br>                                  password=PASSWORD,<br>                                  autocommit=<span class="hljs-literal">True</span>)<br>    cursor = connect.cursor()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;... Connected ...&quot;</span>)<br><br>    <span class="hljs-comment"># create new database if not exist</span><br>    new_database = <span class="hljs-built_in">str</span>(<span class="hljs-string">&quot;&#x27;&quot;</span> + DATABASE + <span class="hljs-string">&quot;&#x27;&quot;</span>)<br><br>    cursor.execute(<span class="hljs-string">&quot;select * From master.dbo.sysdatabases where name=&quot;</span> + new_database)<br>    DBresult = cursor.fetchall()<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(DBresult) == <span class="hljs-number">0</span>: <span class="hljs-comment"># if DB not exist</span><br>        cursor.execute(<span class="hljs-string">&quot;CREATE DATABASE &quot;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>))<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; created&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; exist&quot;</span>)<br>    connect.close() <br><br>    <span class="hljs-comment"># set table name</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: result will be written into &#x27;</span>+ TableName + <span class="hljs-string">&#x27; ...&#x27;</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: table with the same name will be repalced ...&#x27;</span>)<br><br>    <span class="hljs-comment"># second connection, same Authentication as first</span><br>    <span class="hljs-keyword">if</span> authenticationMode == <span class="hljs-number">0</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + new_database.strip(<span class="hljs-string">&quot;&#x27;&quot;</span>) + <span class="hljs-string">&quot; &lt;Windows Authentication&gt; ...&quot;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Connecting to &#x27;</span> + <span class="hljs-string">&#x27;master&#x27;</span> + <span class="hljs-string">&quot; &lt;SQL Authentication&gt;&quot;</span>)<br><br>    conn = create_engine(DB_URI2, execution_options=<span class="hljs-built_in">dict</span>(stream_results=<span class="hljs-literal">True</span>),fast_executemany=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;... Connected ...&quot;</span>)<br>    <br>    <span class="hljs-comment"># read from editted csv file</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Action: Reading csv file ...&quot;</span>)<br>    chunks2 = read_csv(files[<span class="hljs-number">0</span>],dtype=<span class="hljs-built_in">str</span>,chunksize=<span class="hljs-number">2000</span>)<br><br>    df_done = DataFrame()<br>    <span class="hljs-keyword">for</span> chunk <span class="hljs-keyword">in</span> tqdm(chunks2):<br>        df_done = concat([df_done, chunk],ignore_index=<span class="hljs-literal">True</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Message: &#x27;</span>)<br>    <span class="hljs-built_in">print</span>(df_done.info())<br><br>    <span class="hljs-comment"># importing to SQL Server</span><br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Action: Importing to SQL Server table ...&#x27;</span>)<br>    insert_with_progress(df_done,conn, TableName)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Job done!&#x27;</span>)<br>    <br>    <span class="hljs-keyword">del</span> df_done<br>    gc.collect()<br>    <br>    delTemp = messagebox.askyesno(title = <span class="hljs-string">&#x27;Message&#x27;</span>,message=<span class="hljs-string">&#x27;Job Done! Delete temp csv file?&#x27;</span>)<br>    <span class="hljs-keyword">if</span> delTemp:<br>        remove(files[<span class="hljs-number">0</span>])<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Press Enter to Continue ...&quot;</span>)<br>    <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Select Xevent Files:&#x27;</span>)<br>myWindow = Tk()<br><br>myWindow.title(<span class="hljs-string">&#x27;Xevent Reader&#x27;</span>)<br>myWindow.resizable(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)<br><br>b0=Button(myWindow, text=<span class="hljs-string">&#x27;Select Files&#x27;</span>, relief=<span class="hljs-string">&#x27;ridge&#x27;</span>, width=<span class="hljs-number">45</span>, height=<span class="hljs-number">2</span>, command = selectFiles)<br>b0.grid(row=<span class="hljs-number">0</span>, columnspan=<span class="hljs-number">2</span>, sticky=W, padx=<span class="hljs-number">5</span>,pady=<span class="hljs-number">5</span>)<br><br>b1=Button(myWindow, text=<span class="hljs-string">&#x27;SQL Authentication&#x27;</span>, relief=<span class="hljs-string">&#x27;ridge&#x27;</span>, width=<span class="hljs-number">20</span>, height=<span class="hljs-number">2</span>, command = setSQLAuthentication)<br>b1.grid(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">0</span>, sticky=W, padx=<span class="hljs-number">5</span>,pady=<span class="hljs-number">5</span>)<br>b2=Button(myWindow, text=<span class="hljs-string">&#x27;Windows Authentication&#x27;</span>,relief=<span class="hljs-string">&#x27;ridge&#x27;</span>,width=<span class="hljs-number">20</span>, height=<span class="hljs-number">2</span>, command = setWinAuthentication)<br>b2.grid(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">1</span>, sticky=W, padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br><br>    <br>Label(myWindow, text=<span class="hljs-string">&quot;HOSTNAME&quot;</span>).grid(row=<span class="hljs-number">2</span>)<br>Label(myWindow, text=<span class="hljs-string">&quot;DATABASE&quot;</span>).grid(row=<span class="hljs-number">3</span>)<br>Label(myWindow, text=<span class="hljs-string">&quot;TABLE NAME&quot;</span>).grid(row=<span class="hljs-number">4</span>)<br>Label(myWindow, text=<span class="hljs-string">&quot;Skip Following Blanks If Windows Authentication Is Selected&quot;</span>,relief = <span class="hljs-string">&#x27;groove&#x27;</span>,bd = <span class="hljs-number">4</span>).grid(row=<span class="hljs-number">5</span>,columnspan=<span class="hljs-number">2</span>)<br>Label(myWindow, text=<span class="hljs-string">&quot;USERNAME&quot;</span>).grid(row=<span class="hljs-number">6</span>)<br>Label(myWindow, text=<span class="hljs-string">&quot;PASSWORD&quot;</span>).grid(row=<span class="hljs-number">7</span>)<br><br>entryHOSTNAME=Entry(myWindow)<br>entryDATABASE=Entry(myWindow)<br>entryUSERNAME=Entry(myWindow)<br>entryPASSWORD=Entry(myWindow)<br>entryTableName=Entry(myWindow)<br>entryHOSTNAME.grid(row=<span class="hljs-number">2</span>, column=<span class="hljs-number">1</span>)<br>entryDATABASE.grid(row=<span class="hljs-number">3</span>, column=<span class="hljs-number">1</span>)<br>entryTableName.grid(row=<span class="hljs-number">4</span>, column=<span class="hljs-number">1</span>)<br>entryUSERNAME.grid(row=<span class="hljs-number">6</span>, column=<span class="hljs-number">1</span>)<br>entryPASSWORD.grid(row=<span class="hljs-number">7</span>, column=<span class="hljs-number">1</span>)<br><br><br>b3=Button(myWindow, text=<span class="hljs-string">&#x27;Run: full execution&#x27;</span>,relief=<span class="hljs-string">&#x27;ridge&#x27;</span>,width=<span class="hljs-number">45</span>, height=<span class="hljs-number">2</span>, command = run)<br>b3.grid(row=<span class="hljs-number">8</span>, columnspan=<span class="hljs-number">2</span>, sticky=W, padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br><br>b4=Button(myWindow, text=<span class="hljs-string">&#x27;Run: import csv to SQL only&#x27;</span>,relief=<span class="hljs-string">&#x27;ridge&#x27;</span>,width=<span class="hljs-number">45</span>, height=<span class="hljs-number">2</span>, command = run_csv)<br>b4.grid(row=<span class="hljs-number">9</span>, columnspan=<span class="hljs-number">2</span>, sticky=W, padx=<span class="hljs-number">5</span>, pady=<span class="hljs-number">5</span>)<br><br><br>myWindow.mainloop()<br></code></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>SQL Server</tag>
        <tag>Python</tag>
        <tag>My Work</tag>
      </tags>
  </entry>
</search>
